"use strict";
define("vine-ember/app", ["exports", "ember", "ember/resolver", "ember/load-initializers", "vine-ember/config/environment"], function(e, t, a, n, r) {
    var i;
    t["default"].MODEL_FACTORY_INJECTIONS = !0,
    "development" === r["default"].environment && (t["default"].deprecate = function() {}
    ),
    i = t["default"].Application.extend({
        modulePrefix: r["default"].modulePrefix,
        podModulePrefix: r["default"].podModulePrefix,
        Resolver: a["default"]
    }),
    n["default"](i, r["default"].modulePrefix),
    e["default"] = i
}),
define("vine-ember/components/animated-button", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "button",
        classNames: ["action", "clear"],
        classNameBindings: ["isActive:active", "actionName"],
        attributeBindings: ["disabled:disabled"],
        disabled: !1,
        iconClass: function() {
            return this.get("actionName") ? "icon-" + (this.get("iconName") || this.get("actionName")) : void 0
        }
        .property("actionName"),
        click: function() {
            "view" === this.get("actionTarget") ? this.get("parentView").send(this.get("action")) : this.sendAction();
            var e = this.$();
            this.get("isActive") ? (e.removeClass("activated"),
            setTimeout(function() {
                e.addClass("deactivated")
            })) : (e.removeClass("deactivated"),
            setTimeout(function() {
                e.addClass("activated")
            }))
        }
    });
    e["default"] = a
}),
define("vine-ember/components/attribution-icon", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "div",
        classNames: ["attribution-icon"],
        classNameBindings: ["cssClass", "active"],
        isMobile: !1,
        mouseEnterAction: "showAttribution",
        touchAction: "showAttribution",
        logAttributionClick: "logAttributionClick",
        mouseEnter: function() {
            this.get("isMobile") || this.sendAction("mouseEnterAction")
        },
        click: function() {
            this.get("isMobile") && this.sendAction("touchAction")
        },
        actions: {
            logAttributionClick: function() {
                this.sendAction("logAttributionClick")
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/components/banned-word", ["exports", "ember"], function(e, t) {
    e["default"] = t["default"].Component.extend({
        classNames: ["banned-words__word"],
        classNameBindings: ["isSelected:selected", "width::invisible"],
        attributeBindings: ["fixedWidth:style"],
        width: null ,
        fixedWidth: t["default"].computed("width", function() {
            var e = this.get("width");
            return e ? new t["default"].Handlebars.SafeString("width: " + e + "px") : void 0
        }),
        didInsertElement: function() {
            this.set("width", this.$().width())
        },
        mouseEnter: function() {
            this.sendAction("hoverOn", this.get("body"))
        },
        mouseLeave: function() {
            this.sendAction("hoverOff", this.get("body"))
        },
        click: function(e) {
            return this.get("isSelected") ? this.sendAction("unselect", this.get("body")) : this.sendAction("select", this.get("body")),
            !1
        },
        censored: function() {
            var e = this.get("body");
            return e.length > 2 && this.get("width") && !this.get("hovering") ? "" + e.slice(0, 2) + "*".repeat(e.length - 2) : e
        }
        .property("body", "width", "hovering")
    })
}),
define("vine-ember/components/banned-words-editor", ["exports", "ember", "vine-ember/constants/index"], function(e, t, a) {
    e["default"] = t["default"].Component.extend({
        keyDown: function(e) {
            var t = this;
            return e.keyCode === a["default"].ENTER || e.keyCode === a["default"].TAB ? (this.sendAction("ban", this._getWords(), function(e) {
                return t.set("value", Array.from(e).join(", "))
            }),
            !1) : e.keyCode === a["default"].BACKSPACE ? (this.get("value") ? (this.sendAction("toggleWarning", !1),
            this.sendAction("unselectAll")) : this.get("selected").size || this.sendAction("toggleSelectHelper", !0),
            !0) : (this.sendAction("unselectAll"),
            void this.sendAction("toggleHelpers", !1))
        },
        _getWords: function() {
            var e = this
              , t = new Set;
            return this.get("value").split(",").forEach(function(n) {
                if (n = n.trim().toLowerCase(),
                n.length > a["default"].WORD_BAN_LIMIT)
                    e.sendAction("toggleWarning", !0);
                else if (0 === n.length)
                    return;
                t.add(n)
            }),
            t
        }
    })
}),
define("vine-ember/components/banned-words", ["exports", "ember", "vine-ember/constants/index"], function(e, t, a) {
    function n(e) {
        if (Array.isArray(e)) {
            for (var t = 0, a = Array(e.length); t < e.length; t++)
                a[t] = e[t];
            return a
        }
        return Array.from(e)
    }
    e["default"] = t["default"].Component.extend({
        classNames: ["banned-words-wrapper"],
        selected: new Set,
        hovered: "",
        hasWarning: !1,
        hasDeleteHelper: !1,
        hasSelectHelper: !1,
        placeholder: t["default"].computed("bannedWords", function() {
            return this.get("bannedWords").size ? "" : "Add words to block, separated by commas"
        }),
        message: t["default"].computed("hasWarning", "hasSelectHelper", "hasDeleteHelper", "disableKeydown", function() {
            return this.get("hasWarning") ? "*Your phrase should be max " + a["default"].WORD_BAN_LIMIT + " characters and comma separated" : this.get("hasSelectHelper") ? "*Select a word first" : this.get("hasDeleteHelper") ? "*Finish your word first" : this.get("disableKeydown") ? "*Finish editing your profile first" : ""
        }),
        init: function() {
            this._super(),
            this.handleKeydown = this.handleKeydown.bind(this)
        },
        didInsertElement: function() {
            document.addEventListener("keydown", this.handleKeydown, !1)
        },
        willDestroyElement: function() {
            document.removeEventListener("keydown", this.handleKeydown, !1)
        },
        handleKeydown: function(e) {
            if (!this.get("disableKeydown") && e.keyCode === a["default"].BACKSPACE) {
                var t = document.getElementById("banned-words__editor");
                0 === t.selectionStart && this.get("selected").size ? (e.preventDefault(),
                this.sendAction("unban", this.get("selected")),
                this.set("selected", new Set)) : this.get("selected").size && (e.preventDefault(),
                this.send("toggleDeleteHelper", !0))
            }
        }
        .observes("disableKeydown"),
        focusEditor: function() {
            document.getElementById("banned-words__editor").focus()
        },
        click: function(e) {
            return this.focusEditor(),
            !1
        },
        words: function() {
            var e = this;
            return Array.from(this.get("bannedWords")).map(function(t) {
                return {
                    body: t,
                    isSelected: e.get("selected").has(t),
                    hovering: e.get("hovered") === t
                }
            })
        }
        .property("bannedWords", "selected", "hovered"),
        actions: {
            select: function(e) {
                this.set("hasSelectHelper", !1);
                var t = this.get("selected");
                t.add(e),
                this.set("selected", new Set([].concat(n(t))))
            },
            unselect: function(e) {
                var t = this.get("selected");
                t["delete"](e),
                this.set("selected", new Set([].concat(n(t))))
            },
            unselectAll: function() {
                this.set("selected", new Set)
            },
            hoverOn: function(e) {
                this.set("hovered", e)
            },
            hoverOff: function(e) {
                this.set("hovered", "")
            },
            toggleSelectHelper: function(e) {
                this.setProperties({
                    hasSelectHelper: e,
                    hasDeleteHelper: !1,
                    hasWarning: !1
                })
            },
            toggleDeleteHelper: function(e) {
                this.setProperties({
                    hasDeleteHelper: e,
                    hasSelectHelper: !1,
                    hasWarning: !1
                })
            },
            toggleWarning: function(e) {
                this.setProperties({
                    hasWarning: e,
                    hasDeleteHelper: !1,
                    hasSelectHelper: !1
                })
            },
            toggleHelpers: function() {
                this.setProperties({
                    hasDeleteHelper: !1,
                    hasSelectHelper: !1
                })
            },
            ban: function(e, t) {
                this.sendAction("ban", e, t)
            }
        }
    })
}),
define("vine-ember/components/cdn-img", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "img",
        attributeBindings: ["cdnPath:src", "width", "height", "style", "alt", "data-parralax"],
        cdnPath: function() {
            return this.get("config.ASSETS_CDN_PREFIX") + this.get("src")
        }
        .property("config.ASSETS_CDN_PREFIX", "src")
    });
    e["default"] = a
}),
define("vine-ember/components/channel-badge", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: "channel-badge",
        classNameBindings: ["size"],
        attributeBindings: ["backgroundStyle:style"],
        mouseEnter: function(e) {
            var t = this._headerForEvent(e);
            this.set("originalText", t.text()),
            t.text(this.get("channel"))
        },
        mouseLeave: function(e) {
            var t = this._headerForEvent(e);
            t.text(this.get("originalText"))
        },
        _headerForEvent: function(e) {
            return t["default"].$(e.target).closest(".channels-container").prev()
        }
    });
    e["default"] = a
}),
define("vine-ember/components/channel-hover", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "span",
        mouseEnter: function() {
            this.$().css("color", "#" + this.get("color"))
        },
        mouseLeave: function() {
            this.$().css("color", "")
        }
    });
    e["default"] = a
}),
define("vine-ember/components/comment-form", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "form",
        classNames: "comment",
        classNameBindings: ["commentCount:has-comments"],
        action: "comment",
        submit: function(e) {
            return e.preventDefault(),
            e.stopPropagation(),
            "view" === this.get("target") ? void this.get("parentView").send(this.get("action"), this.get("commentText")) : void this.sendAction(this.get("commentText"))
        }
    });
    e["default"] = a
}),
define("vine-ember/components/custom-styles", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        didInsertElement: function() {
            this.send("generateStyleTag")
        },
        modelChanged: function() {
            t["default"].run.scheduleOnce("afterRender", this, function() {
                this.send("generateStyleTag")
            })
        }
        .observes("modelId"),
        actions: {
            generateStyleTag: function() {
                var e = this.$(".custom-styles").text()
                  , t = $("<style></style>").text(e);
                this.$("style").remove(),
                this.$().append(t)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/components/download-buttons", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: ["download-buttons"],
        classNameBindings: "cssClass",
        goToStore: "goToStore",
        storeOverrides: null ,
        didInsertElement: function() {
            var e = this.get("targetObject.controllers.application.deviceType");
            e && this.$(".download-button:not([data-device='" + e + "'])").hide()
        },
        actions: {
            goToStore: function(e) {
                var t;
                this.$().closest(".modal.login").length && (t = "login modal"),
                this.sendAction("goToStore", e, t, this.get("storeOverrides"))
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/components/follow-button", ["exports"], function(e) {
    var t = Ember.Component.extend({
        tagName: "button",
        classNames: "clear",
        classNameBindings: ["cssClass", "user.following:following:follow", "user.followRequested:follow-requested"],
        gaq: "gaq",
        doAuthenticatedAction: "doAuthenticatedAction",
        cssClass: "follow-button",
        userIdStr: Ember.computed.alias("user.userIdStr"),
        "private": Ember.computed.alias("user.private"),
        following: Ember.computed.alias("user.following"),
        followRequested: Ember.computed.alias("user.followRequested"),
        click: function() {
            this.send("follow")
        },
        isVisible: function() {
            return !this.get("session").isCurrentUser(this.get("userIdStr"))
        }
        .property("session.userId", "userIdStr"),
        isLarge: function() {
            return "follow-button-large" === this.get("cssClass")
        }
        .property("cssClass"),
        _doFollow: function() {
            this.get("followRequested") || this.get("following") ? (this.get("services.user").unFollow(this.get("userIdStr")).then(function() {
                this.get("user").setProperties({
                    following: 0,
                    followRequested: 0
                })
            }
            .bind(this)),
            this.sendAction("gaq", ["_trackEvent", "User", "unfollow"])) : (this.get("services.user").follow(this.get("userIdStr")).then(function() {
                this.get("private") && this.set("user.followRequested", 1),
                this.set("user.following", 1)
            }
            .bind(this)),
            this.sendAction("gaq", ["_trackEvent", "User", "follow"]))
        },
        actions: {
            follow: function() {
                this.sendAction("doAuthenticatedAction", "follow this user", this._doFollow.bind(this))
            }
        }
    });
    e["default"] = t
}),
define("vine-ember/components/header-logo", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        action: "scrollToTop",
        click: function(e) {
            (this.$("a").hasClass("active") || this.get("isMobile")) && this.sendAction()
        }
    });
    e["default"] = a
}),
define("vine-ember/components/iframe-modal", ["exports", "ember"], function(e, t) {
    var a = 1;
    e["default"] = t["default"].Component.extend({
        startWhen: !1,
        showWhen: !1,
        minimized: !1,
        host: "",
        path: "",
        key: "",
        params: {},
        modalSrc: function() {
            var e = this.get("host")
              , t = this.get("path")
              , n = this.get("params") || {}
              , r = t.replace(/\/(:[a-zA-Z]+)/, function(e, t) {
                var r = n[t.slice(a)];
                return "/" + (r || t)
            });
            return e + "/" + r
        }
        .property("host", "path", "params")
    })
}),
define("vine-ember/components/link-user", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNameBindings: ["className"],
        tagName: "span",
        likes: !1,
        routeInfo: function() {
            var e, t, a = this.get("user.vanityUrls");
            return a && a.length > 0 ? (e = "user",
            t = a[0]) : (e = "user-fallback",
            t = this.get("user.userIdStr")),
            this.get("likes") && (e += "-likes"),
            {
                name: e,
                param: t
            }
        }
        .property("user.vanityUrls", "user.userIdStr", "likes")
    });
    e["default"] = a
}),
define("vine-ember/components/linkify-entities", ["exports", "ember", "emojify"], function(e, t, a) {
    var n = {
        mention: !0,
        tag: !0,
        channel: !0
    }
      , r = t["default"].Component.extend({
        tagName: "span",
        linkifiedEntities: function() {
            var e = this.get("text")
              , r = this.get("entities");
            if (!r)
                return [new t["default"].Handlebars.SafeString(a["default"](t["default"].Handlebars.Utils.escapeExpression(e), !0))];
            var i = []
              , d = 0;
            r.sort(function(e, t) {
                return e.range[0] - t.range[0]
            });
            for (var c = 0; c < r.length; c++) {
                var s = r[c];
                if (n[s.type]) {
                    var o = e.kmwSubstring(d, s.range[0])
                      , l = a["default"](t["default"].Handlebars.Utils.escapeExpression(o), !0);
                    i.push(new t["default"].Handlebars.SafeString(l));
                    var h, u, p = new t["default"].Handlebars.SafeString(s.title || "");
                    "mention" === s.type ? (h = "user-fallback",
                    u = s.idStr,
                    s.vanityUrls && s.vanityUrls[0] && (h = "user",
                    u = s.vanityUrls[0])) : "tag" === s.type ? (h = "tag",
                    u = s.title,
                    p = "#" + p) : "channel" === s.type && (h = "channel",
                    u = s.vanityUrls ? s.vanityUrls[0].substr(9) : null ),
                    i.push({
                        title: t["default"].Handlebars.Utils.escapeExpression(p),
                        route: h,
                        param: u
                    }),
                    d = s.range[1]
                }
            }
            var m = e.kmwSubstring(d)
              , v = a["default"](t["default"].Handlebars.Utils.escapeExpression(m), !0);
            return i.push(new t["default"].Handlebars.SafeString(v)),
            i
        }
        .property("text", "entities")
    });
    e["default"] = r
}),
define("vine-ember/components/loop-count", ["exports", "ember", "vine-ember/utils/loop-incrementor"], function(e, t, a) {
    var n = new RegExp("\\B(?=(\\d{3})+(?!\\d))","g")
      , r = "2014-04-03"
      , i = t["default"].Component.extend({
        classNames: ["loop-count"],
        init: function() {
            this._super(),
            this.initializeLoopCounter()
        },
        initializeLoopCounter: function() {
            this.clearHandle();
            var e = a["default"].add(this.get("postId"), this.get("loops.count"), this.get("loops.velocity"), function(e) {
                this.set("loops.count", e),
                this.renderCount()
            }
            .bind(this));
            this.set("loopHandle", e)
        }
        .observes("postId"),
        formattedCount: function() {
            return Math.round(this.get("loops.count")).toString().replace(n, ",")
        }
        .property("loops.count"),
        willDestroyElement: function() {
            this.clearHandle()
        },
        clearHandle: function() {
            var e = this.get("loopHandle");
            e && a["default"].remove(e)
        },
        couldHaveUnrecordedLoops: function() {
            return this.get("postDate") ? window.moment(this.get("postDate"), "YYYY-MM-DD HH:mm:ss").isBefore(r) : !1
        }
        .property("postDate"),
        renderCount: function() {
            var e = "" + this.get("formattedCount")
              , t = this.$(".counter")
              , a = $(t).find(".spinner");
            t.hasClass("seeded") && t.empty().removeClass("seeded");
            var n = e.length - a.length;
            if (0 > n)
                a.slice(0, Math.abs(n)).remove();
            else
                for (; n--; )
                    this.createDigit(t);
            $(t).find(".spinner").toArray().forEach(function(t, a) {
                "," === e[a] ? t.className = "spinner comma" : t.className = "spinner digit-" + e[a]
            })
        }
        .observes("loops.count"),
        createDigit: function() {
            for (var e = -1, t = $('<div class="spinner"></div>').appendTo(this.$(".counter")); e++ < 9; )
                t.append("<div>" + e + "</div>");
            t.append("<div>,</div>")
        }
    });
    e["default"] = i
}),
define("vine-ember/components/mobile-interstitial", ["exports", "ember"], function(e, t) {
    e["default"] = t["default"].Component.extend({
        toggleMobileInterstitial: "toggleMobileInterstitial",
        hideMobileInterstitial: "hideMobileInterstitial",
        downloadVine: "downloadVine",
        openPostInApp: "openPostInApp",
        showOpenInApp: !1,
        isLongform: !1,
        didInsertElement: function() {
            var e = this;
            /iP(hone|ad|od)/.test(navigator.userAgent) && !function() {
                e.set("showOpenInApp", !0);
                var t = "vine://post/" + e.get("postId");
                $(window).on("load", function() {
                    var e = document.createElement("iframe");
                    e.id = "redirect_frame",
                    e.style.display = "none",
                    e.src = t,
                    document.body.appendChild(e),
                    document.body.removeChild(e)
                })
            }()
        },
        click: function(e) {
            e.stopPropagation(),
            this.sendAction("toggleMobileInterstitial")
        },
        actions: {
            downloadVine: function() {
                this.sendAction("downloadVine")
            },
            openPostInApp: function() {
                this.sendAction("openPostInApp")
            },
            hideMobileInterstitial: function() {
                this.sendAction("hideMobileInterstitial")
            }
        }
    })
}),
define("vine-ember/components/modal-post-context", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: "modal-post-context"
    });
    e["default"] = a
}),
define("vine-ember/components/module-block", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: ["module-block"],
        classNameBindings: ["className", "channelIdAttr"],
        iconClass: function() {
            var e = this.get("icon")
              , t = this.get("rawIconClass");
            return t ? t : e ? "module-icon icon-" + e : this.get("route") ? "module-icon icon-" + this.get("route").replace(/-/g, "_") : void 0
        }
        .property("icon", "route", "rawIconClass")
    });
    e["default"] = a
}),
define("vine-ember/components/mouseover-video", ["exports", "ember", "vine-ember/mixins/continuous-play-view"], function(e, t, a) {
    var n = 2e3
      , r = t["default"].Component.extend(a["default"], {
        classNames: ["mouseover-video"],
        classNameBindings: ["className"],
        launchLongformViewer: "launchLongformViewer",
        clickToEnlarge: !1,
        showClickToEnlargeText: !1,
        clickToEnlargeHideTimeout: null ,
        showLongform: !1,
        toggleMute: !1,
        wasMuted: window.localStorage.post_page_volume,
        player: function() {
            return this.get("post.playingVine")
        }
        .property("post.playingVine"),
        didInsertElement: function() {
            this.get("player").send("videoRendered", this._getVideoObject())
        },
        _getVideoObject: function() {
            var e = this._super();
            return e.preventAutoplay = !0,
            e
        },
        mouseEnter: function() {
            this.get("toggleMute") && (this.set("wasMuted", "off" === this.get("player.audioClass")),
            this.get("player").send("playerUnmute")),
            window.localStorage.removeClickToEnlarge || (this.set("showClickToEnlargeText", !0),
            this.set("clickToEnlargeHideTimeout", setTimeout(function() {
                this.set("showClickToEnlargeText", !1),
                window.localStorage.removeClickToEnlarge = !0
            }
            .bind(this), n))),
            this.get("player").send("play", this._getVideoObject()),
            this.sendAction("mouseEntered")
        },
        mouseLeave: function() {
            this.get("toggleMute") && this.get("player").send(this.get("wasMuted") ? "playerMute" : "playerUnmute"),
            window.localStorage.removeClickToEnlarge || (this.set("showClickToEnlargeText", !1),
            clearTimeout(this.get("clickToEnlargeHideTimeout"))),
            this.$(".vine-player").length > 0 && this.get("player").send("removePlayer"),
            this.get("player").send("hideLoading", this._getVideoObject()),
            this.sendAction("mouseLeft")
        },
        actions: {
            viewExplicit: function() {
                this.get("post").send("viewExplicit")
            },
            launchLongformViewer: function(e, t) {
                this.sendAction("launchLongformViewer", e, t)
            }
        }
    });
    e["default"] = r
}),
define("vine-ember/components/my-input", ["exports", "ember"], function(e, t) {
    var a = t["default"].TextField.extend({
        classNameBindings: "messageTypeClass",
        fixedEls: "header, .global-search, .app-banner, footer",
        email: !1,
        isIE9: window.navigator.userAgent.match(/MSIE [1-9][^0-9]/),
        didInsertElement: function() {
            $("input, textarea").placeholder(),
            this.get("email") && this.set("type", this.get("isIE9") ? "text" : "email")
        },
        focusIn: function() {
            "error" === this.get("messageType") && this.set("messageType", void 0);
            var e = $(this.get("fixedEls"));
            e.hasClass("fixfixed") || e.addClass("fixfixed")
        },
        focusOut: function() {
            var e = $(this.get("fixedEls"));
            e.hasClass("fixfixed") && e.removeClass("fixfixed")
        },
        messageTypeClass: function() {
            return this.get("messageType")
        }
        .property("messageType", "noStyles")
    });
    e["default"] = a
}),
define("vine-ember/components/nav-button", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "span",
        action: "scrollToTop",
        iconClass: function() {
            return "icon-" + this.get("route").replace("-", "_")
        }
        .property("route"),
        click: function() {
            this.$("a").hasClass("active") && this.sendAction()
        }
    });
    e["default"] = a
}),
define("vine-ember/components/paginated-comments", ["exports", "ember", "vine-ember/services/post", "vine-ember/mixins/pagination"], function(e, t, a, n) {
    var r = t["default"].Component.extend(n["default"], {
        initialized: !1,
        hasFetchedFirstPage: !1,
        posts: t["default"].computed.alias("comments.posts"),
        pagination: t["default"].computed.alias("comments.pagination"),
        paginatedProperty: "posts",
        shouldShowPaginationLoading: !1,
        endpoint: a["default"].comments.bind(a["default"]),
        params: t["default"].computed.alias("comments.postIdStr"),
        hasMorePosts: function() {
            return this.get("posts.length") < this.get("pagination.count")
        }
        .property("posts.length", "pagination.count"),
        hasMoreComments: function() {
            return this.get("posts.length") && this.get("hasMorePosts")
        }
        .property("posts.length", "hasMorePosts"),
        visibilityChanged: function() {
            !this.get("hasFetchedFirstPage") && this.get("isVisible") && this.send("doNextPage")
        }
        .observes("isVisible", "posts.length"),
        _appendObjects: function(e) {
            this.get(this.get("paginatedProperty")).unshiftObjects(e)
        },
        _doNextPage: function() {
            this.get("hasMorePosts") && (this.send("nextPage", !0),
            this.set("hasFetchedFirstPage", !0))
        },
        actions: {
            doNextPage: function() {
                this._doNextPage()
            }
        }
    });
    e["default"] = r
}),
define("vine-ember/components/profile-background", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        action: "setProfileBackground",
        classNames: ["color"],
        classNameBindings: ["isCurrentColor:selected"],
        attributeBindings: ["backgroundStyle:style"],
        backgroundStyle: function() {
            var e = this.get("color").replace("0x", "#");
            return "background-color: " + e
        }
        .property("color"),
        click: function() {
            var e = this.get("color");
            this.get("isCurrentColor") && (e = "0x333333"),
            this.sendAction("action", e)
        }
    });
    e["default"] = a
}),
define("vine-ember/components/related-videos", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        visible: !1,
        posts: [],
        classNames: "related-videos",
        classNameBindings: ["canShow:is-visible"],
        transition: "transitionToRelatedVideo",
        trackEvent: "trackSimilarVinesEvent",
        videosShown: 3,
        impressionLogged: !1,
        endpoint: function() {
            var e = this.get("services.timeline");
            return e.relatedVideos.bind(e)
        }
        .property("services.timeline"),
        expParams: function() {
            return this.get("isMobile") ? {
                mobile: 1
            } : void 0
        }
        .property("isMobile"),
        didInsertElement: function() {
            this.get("player") && this.get("player").set("forceMute", !0)
        },
        postChanged: function() {
            this.setProperties({
                impressionLogged: !1
            })
        }
        .observes("shortId"),
        hasPosts: function() {
            return this.get("posts.length") >= this.get("videosShown")
        }
        .property("posts.length", "videosShown"),
        canShow: function() {
            return this.get("visible") && this.get("hasPosts")
        }
        .property("visible", "hasPosts"),
        postsToDisplay: function() {
            return this.get("hasPosts") ? this.get("posts").slice(0, this.get("videosShown")).map(function(e, t) {
                return e.set("index", t),
                e
            }) : void 0
        }
        .property("posts.length", "hasPosts"),
        canShowChanged: function() {
            this.get("canShow") && !this.get("impressionLogged") && (this.send("trackSimilarVinesEvent", "impression", {
                nonInteraction: !0
            }),
            this.get("player") && this.get("player").send("checkViewport"),
            this.setProperties({
                impressionLogged: !0,
                selectedPost: void 0
            }))
        }
        .observes("canShow"),
        actions: {
            seeMore: function() {
                this.send("trackSimilarVinesEvent", "click")
            },
            select: function(e) {
                var t = this.get("posts").objectAt(e);
                this.sendAction("transition", t, e),
                this.set("selectedPost", t.get("secureThumbnailUrl"));
                var a = {
                    value: e
                };
                this.send("trackSimilarVinesEvent", "preview click", a)
            },
            trackSimilarVinesEvent: function(e, t) {
                t = t || {},
                this.sendAction("trackEvent", e, t)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/components/search-autocomplete", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        action: "search",
        defaultCount: 3,
        resultOrder: ["tags", "users", "venues"],
        results: void 0,
        position: -2,
        columnSize: 1,
        didInsertElement: function() {
            var e = function(e) {
                0 === $(e.target).closest(".search").length && this.set("results", void 0)
            }
            .bind(this);
            if ($(document).click(e),
            this.set("clickBinding", e),
            this.get("isMobile")) {
                this.$("input").width(this.$().width() - 60);
                var t = function() {
                    this.$("input").width(this.$().width() - 60)
                }
                .bind(this);
                $(window).bind("resize", t),
                this.set("resizeBinding", t)
            }
        },
        willDestroyElement: function() {
            $(document).unbind("click", this.get("clickBinding")),
            this.get("resizeBinding") && $(window).unbind("resizeBinding", this.get("resizeBinding"))
        },
        click: function(e) {
            ($(e.target).is("a") || $(e.target).closest("a").length > 0) && this.send("reset")
        },
        tap: function(e) {
            ($(e.target).is("a") || $(e.target).closest("a").length > 0) && this.send("reset")
        },
        _doNavLeft: function() {
            var e = this.get("position") - this.get("columnSize")
              , t = this.$("li:not(.empty-result)").length - 1;
            this.set("position", -2 > e ? t : e)
        },
        _doNavUp: function() {
            var e = this.get("position.") - 1
              , t = this.$("li:not(.empty-result)").length - 1;
            this.set("position", -2 > e ? t : e)
        },
        _doNavRight: function() {
            var e = this.get("position") + this.get("columnSize")
              , t = this.$("li:not(.empty-result)").length - 1;
            this.set("position", e > t ? -2 : e)
        },
        _doNavDown: function() {
            var e = this.get("position") + 1
              , t = this.$("li:not(.empty-result)").length - 1;
            this.set("position", e > t ? -2 : e)
        },
        positionChanged: function() {
            var e = this.get("position");
            return this.$("li a, .all-results").removeClass("active"),
            -1 > e ? void this.$("input").focus() : -1 === e ? void this.$(".all-results").addClass("active") : (this.$(".autocomplete").attr({
                tabindex: 1
            }),
            this.$(".autocomplete").focus(),
            void this.$("li:not(.empty-result) a").eq(e).addClass("active"))
        }
        .observes("position", "position"),
        keyDown: $.throttle(100, function(e) {
            switch (e.which) {
            case 37:
                e.preventDefault(),
                this._doNavLeft();
                break;
            case 38:
                e.preventDefault(),
                this._doNavUp();
                break;
            case 39:
                e.preventDefault(),
                this._doNavRight();
                break;
            case 40:
                e.preventDefault(),
                this._doNavDown();
                break;
            case 13:
                this.$(".active").click();
                break;
            case 27:
                this.send("reset"),
                this.$("input").focus();
                break;
            default:
                return
            }
        }),
        counts: function() {
            return {
                tags: this.get("tagCount") || this.get("defaultCount"),
                venues: this.get("venueCount") || this.get("defaultCount"),
                users: this.get("userCount") || this.get("defaultCount")
            }
        }
        .property("defaultCount", "tagCount", "venueCount", "userCount"),
        actions: {
            reset: function() {
                this.setProperties({
                    results: void 0,
                    query: void 0,
                    position: -2
                })
            },
            queryChanged: function() {
                function e(e) {
                    return e.posts.length > 0 ? e.posts : void 0
                }
                var a = this.get("query");
                if (!a)
                    return void this.set("results", void 0);
                var n = this.get("counts");
                t["default"].RSVP.hash({
                    tags: this.get("services.search").tags({
                        query: a
                    }, {
                        size: n.tags
                    }).then(e),
                    users: this.get("services.search").users({
                        query: a
                    }, {
                        size: n.users
                    }).then(e),
                    venues: this.get("services.search").venues({
                        query: a
                    }, {
                        size: n.venues
                    }).then(e)
                }).then(function(e) {
                    if (["tags", "users", "venues"].forEach(function(t) {
                        e[t] && e[t].length > n[t] && (e[t] = e[t].slice(0, n[t]))
                    }),
                    e.tags || e.users || e.venues) {
                        var t = this.get("resultOrder").map(function(t) {
                            var a = {};
                            return a.items = e[t],
                            a[t] = !0,
                            a
                        });
                        this.set("results", t)
                    } else
                        this.setProperties({
                            results: void 0,
                            position: -2
                        })
                }
                .bind(this))
            },
            search: function() {
                var e = this.get("query");
                e && (this.sendAction("action", e),
                this.send("reset"))
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/components/secure-img", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "img",
        attributeBindings: ["securePath:src", "style", "title", "alt"],
        securePath: function() {
            return this.get("src") ? this.get("src").replace("http://", "https://") : void 0
        }
        .property("src")
    });
    e["default"] = a
}),
define("vine-ember/components/share-post", ["exports", "ember"], function(e, t) {
    var a = {
        list: ["like", "twitter", "facebook", "view"],
        listHeader: ["twitter", "facebook", "email"],
        feed: ["twitter", "facebook", "view", "embed", "vm"],
        permalink: ["twitter", "facebook", "pinterest", "embed", "vm"],
        playlist: ["twitter", "facebook", "email"]
    }
      , n = t["default"].Component.extend({
        classNames: ["badges"],
        classNameBindings: ["dataReady:is-visible"],
        featureSet: "list",
        location: "default",
        visible: !1,
        gaq: "gaq",
        init: function() {
            a[this.get("featureSet")].forEach(function(e) {
                this.set(e + "_enabled", !0)
            }
            .bind(this)),
            this._super(),
            this.get("visible") && this.initializeSocialMetrics()
        },
        didInsertElement: function() {
            this.$().on("click", ".share-badge", function(e) {
                var t = e.currentTarget.className.replace(/share-badge/, "").trim()
                  , a = "Share";
                this.get("isMobile") && (a += "Mobile"),
                this.sendAction("gaq", ["_trackEvent", "Share", t, this.get("location")])
            }
            .bind(this))
        },
        willDestroyElement: function() {
            this.get("metricsTimeout") && window.clearTimeout(this.get("metricsTimeout"))
        },
        click: function(e) {
            return this.get("onShare") ? (($(e.target).hasClass("share-badge") || $(e.target).closest(".share-badge").length) && this.sendAction("onShare"),
            !0) : void 0
        },
        initializeSocialMetrics: function() {
            this.get("dataReady") || this.set("metricsTimeout", window.setTimeout(function() {
                this.set("dataReady", !0)
            }
            .bind(this), 500))
        }
        .observes("visible"),
        postChanged: function() {
            this.setProperties({
                facebookCount: 0,
                tweetCount: 0
            }),
            this.$().addClass("fade-out"),
            t["default"].run.later(this, function() {
                this.$().removeClass("fade-out")
            }, 500)
        }
        .observes("post.postIdStr"),
        stumbleuponUrl: function() {
            return this.get("post.shareUrl") ? "http://www.stumbleupon.com/submit?url=" + this.get("post.shareUrl") : void 0
        }
        .property("post.shareUrl"),
        pinterestUrl: function() {
            return this.get("post.shareUrl") ? "http://www.pinterest.com/pin/create/bookmarklet/?" + $.param({
                url: this.get("post.shareUrl"),
                media: this.get("post.thumbnailUrl"),
                is_video: !1,
                description: this.get("post.description")
            }) : void 0
        }
        .property("post.shareUrl", "post.thumbnailUrl", "post.description"),
        tumblrUrl: function() {
            var e = {
                posttype: "video",
                canonicalUrl: this.get("post.shareUrl")
            };
            return "http://tumblr.com/widgets/share/tool?" + $.param(e)
        }
        .property("post.shareUrl"),
        isCurrentUser: function() {
            return this.get("parentView").get("session").isCurrentUser(this.get("post.userIdStr"))
        }
        .property("userIdStr", "session"),
        actions: {
            facebookShare: function() {
                var e = 670
                  , t = 350
                  , a = window.open(this.get("post.facebookUrl"), "fbWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            tweet: function() {
                var e = 550
                  , t = 380
                  , a = window.open(this.get("post.tweetUrl"), "tweetWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            tumblrShare: function() {
                var e = 550
                  , t = 380;
                window.open(this.get("tumblrUrl"), "tumblrWindow", "width=" + e + ",height=" + t)
            },
            pinterestShare: function() {
                var e = 550
                  , t = 380;
                window.open(this.get("pinterestUrl"), "pinterestWindow", "width=" + e + ",height=" + t)
            },
            like: function() {
                this.get("post").send("like")
            },
            revine: function() {
                this.get("post").send("revine")
            },
            vm: function() {
                this.get("post").send("vm")
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/components/share-widgets", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: ["share-widgets"],
        classNameBindings: ["vertical"],
        didInsertElement: function() {
            window.FB ? (window.FB.XFBML.parse(this.$()[0]),
            this.set("fbInit", !0)) : t["default"].$.getScript("//connect.facebook.net/en_US/all.js", function() {
                window.FB.init({
                    appId: "1185475921592170"
                }),
                window.FB.XFBML.parse(this.$()[0]),
                this.set("fbInit", !0)
            }
            .bind(this)),
            window.twttr && window.twttr.widgets ? (window.twttr.widgets.load(),
            this.set("twitterInit", !0)) : t["default"].$.getScript("https://platform.twitter.com/widgets.js", function() {
                this.set("twitterInit", !0)
            }
            .bind(this))
        },
        fbLayout: function() {
            return this.get("vertical") ? "box_count" : "button_count"
        }
        .property("vertical"),
        tweetLayout: function() {
            return this.get("vertical") ? "vertical" : void 0
        }
        .property("vertical"),
        finalTweetUrl: function() {
            return this.get("tweetUrl") || window.location.href
        }
        .property("tweetUrl"),
        finalFbUrl: function() {
            return this.get("fbUrl") || window.location.href
        }
        .property("fbUrl")
    });
    e["default"] = a
}),
define("vine-ember/components/slide-link", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "h3",
        classNames: ["slide-link"],
        didInsertElement: function() {
            this.$(".text").css("max-width", this.$().width() + "px")
        },
        tvRoute: function() {
            return this.get("route") + ".tv"
        }
        .property("route")
    });
    e["default"] = a
}),
define("vine-ember/components/suspension-sidebar", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: "notification-sidebar",
        confirmedCompliance: !1,
        showNormalAccessMessage: !1,
        showUnsuspensionMessage: !1,
        restoreBtnDisabled: t["default"].computed.not("confirmedCompliance"),
        actions: {
            restoreAccess: function() {
                this.get("confirmedCompliance") && this.get("services.user").restoreAccess(this.get("userIdStr")).then(function() {
                    this.get("session").set("suspended", void 0),
                    this.set("showUnsuspensionMessage", !0),
                    this.set("confirmedCompliance", !0)
                }
                .bind(this))
            },
            markCompliant: function() {
                this.get("confirmedCompliance") && this.get("services.user").markCompliant(this.get("userIdStr")).then(function() {
                    this.get("session").set("isEscUser", void 0),
                    this.set("showNormalAccessMessage", !0),
                    this.set("confirmedCompliance", !0)
                }
                .bind(this))
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/components/timeline-header", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: ["timeline-header"],
        classNameBindings: "cssClass",
        didInsertElement: function() {
            if (this.get("model.backgroundImageUrl")) {
                var e = this.$(".background-image-container");
                e.hide();
                var t = $("<img>");
                t.load(function() {
                    e.fadeIn()
                }),
                t.attr("src", this.get("model.backgroundImageUrl"))
            }
            var a = $("#outer-wrapper")
              , n = a.hasClass("mobile");
            !n && this.get("dynamicHeight") && a.css({
                paddingTop: this.$().height()
            }),
            n && this.$(".title").is(":visible") && this._bindMobileScroll()
        },
        willDestroyElement: function() {
            $("#outer-wrapper").removeAttr("style"),
            this._unbindMobileScroll()
        },
        headerContentStyle: function() {
            var e = this.get("model.headerContentStyle") || this.get("model.backgroundColorStyle");
            return t["default"].String.htmlSafe(e)
        }
        .property("model.backgroundColorStyle", "model.headerContentStyle"),
        _bindMobileScroll: function() {
            var e = $(window)
              , t = this.$(".title")
              , a = $("header")
              , n = a.find(".logo")
              , r = function() {
                e.scrollTop() > t.offset().top + t.height() - a.height() ? n.show() : n.hide()
            }
            ;
            e.scroll(r),
            this.set("scrollBinding", r)
        },
        _unbindMobileScroll: function() {
            this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")),
            $("header .logo").removeAttr("style")
        }
    });
    e["default"] = a
}),
define("vine-ember/components/tv-link", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: ["tv-link"]
    });
    e["default"] = a
}),
define("vine-ember/components/user-hover", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        classNames: ["user-container"],
        classNameBindings: "userIdClass",
        borderWidth: 7,
        defaultColor: "#00d9a3",
        userIdClass: function() {
            return "user-" + this.get("userIdStr")
        }
        .property("userId"),
        mouseEnter: function() {
            this.get("userColor") && (this.$("a").css("color", this.get("userColor")),
            this.$(".avatar, .avatar-new img").css("box-shadow", this.get("borderColorStyle")))
        },
        mouseLeave: function() {
            this.$("a").css("color", ""),
            this.$(".avatar, .avatar-new img").css("box-shadow", "")
        },
        borderColorStyle: function() {
            return "0 0 0 " + this.get("borderWidth") + "px " + this.get("userColor")
        }
        .property("userColor"),
        userColor: function() {
            return this.get("color") || this.get("defaultColor")
        }
        .property("color")
    });
    e["default"] = a
}),
define("vine-ember/components/user-info", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        tagName: "div",
        classNames: ["user-info-new"],
        classNameBindings: "cssClass",
        cssClass: "user-info-size-38",
        delinkify: !1,
        textColorStyle: function() {
            if (this.get("textColor")) {
                var e = "color: " + this.get("textColor");
                return t["default"].String.htmlSafe(e)
            }
        }
        .property("textColor")
    });
    e["default"] = a
}),
define("vine-ember/components/view-mode-toggles", ["exports", "ember"], function(e, t) {
    var a = t["default"].Component.extend({
        classNames: ["view-mode-toggles"],
        gaq: "gaq",
        isGridMode: function() {
            return !this.get("isListMode") && !this.get("isTvMode")
        }
        .property("mode"),
        isListMode: function() {
            return "list" === this.get("mode")
        }
        .property("mode"),
        isTvMode: function() {
            return "tv" === this.get("mode")
        }
        .property("mode"),
        actions: {
            trackViewMode: function(e) {
                this.sendAction("gaq", ["_trackEvent", "Timeline", "enter " + e + " mode"])
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/components/vine-spinner", ["exports", "ember"], function(e, t) {
    var a = 100;
    e["default"] = t["default"].Component.extend({
        color: "white",
        size: a,
        scale: function() {
            return this.get("size") / a
        }
        .property("size")
    })
}),
define("vine-ember/components/watch-more", ["exports", "ember"], function(e, t) {
    var a = 0
      , n = "m:ss";
    e["default"] = t["default"].Component.extend({
        classNameBindings: ["mini", "hoisted"],
        mini: !1,
        post: null ,
        fireOnInit: !1,
        action: "launchLongformViewer",
        hoisted: !1,
        init: function() {
            var e = this;
            this._super(),
            this.get("fireOnInit") && t["default"].run.scheduleOnce("afterRender", this, function() {
                e.send("sendWatchMoreAction")
            })
        },
        hasLongform: function() {
            var e = !!this.get("post.longform")
              , t = this.get("session.showLongform");
            return e && t
        }
        .property("post.longform", "session.showLongform", "post.postIdStr"),
        duration: function() {
            if (this.get("post.longform.duration")) {
                var e = this.get("post.longform.duration");
                return moment(a).seconds(e).format(n)
            }
        }
        .property("post.longform.duration"),
        buttonText: function() {
            var e = this.get("post.lastTimestampOfLongform")
              , t = this.get("post.isReplay");
            return t ? "WATCH AGAIN" : e > 0 ? "CONTINUE" : "WATCH MORE"
        }
        .property("post.lastTimestampOfLongform", "post.isReplay"),
        actions: {
            sendWatchMoreAction: function() {
                var e = this.get("post.longform")
                  , t = this.get("session")
                  , a = this.get("post.userIdStr");
                e.isCurrentUser = t.isCurrentUser(a),
                e.isAuthenticated = t.get("isAuthenticated"),
                e.author = {
                    username: this.get("post.username"),
                    userIdStr: this.get("post.userIdStr"),
                    vanityUrls: this.get("post.vanityUrls")
                },
                e.description = this.get("post.description"),
                e.postId = this.get("post.postIdStr"),
                e.shortId = this.get("post.shortId"),
                e.shareUrl = this.get("post.shareUrl"),
                e.isLiked = !!this.get("post.liked"),
                e.entities = this.get("post.entities"),
                e.lastTimestamp = this.get("post.lastTimestampOfLongform"),
                this.sendAction("action", e, this.get("post"))
            }
        }
    })
}),
define("vine-ember/constants/index", ["exports"], function(e) {
    e["default"] = {
        BACKSPACE: 8,
        ENTER: 13,
        TAB: 9,
        WORD_BAN_LIMIT: 25,
        WORD_BAN_API_SUCCESS: "Word(s) successfully added to list!",
        WORD_BAN_API_ERROR: "Word(s) successfully removed from list!"
    }
}),
define("vine-ember/controllers/application", ["exports", "ember", "vine-ember/mixins/message-broker", "vine-ember/mixins/upload", "vine-ember/mixins/modernizr"], function(e, t, a, n, r) {
    var i = t["default"].Controller.extend(a["default"], n["default"], r["default"], {
        needs: ["current-user"],
        activeBanners: [],
        modal: !1,
        searchAutocompleteOrder: ["users", "tags", "venues"],
        isVisible: !0,
        isTimeline: !1,
        currentYear: (new Date).getFullYear(),
        currentUser: t["default"].computed.alias("controllers.current-user.model"),
        init: function() {
            this._super();
            var e = /android|iphone|ipod|ipad|blackberry|mini|windows phone|kf|palm|blackberry|bb/i.test(window.navigator.userAgent);
            this.set("isMobile", e)
        },
        hasNotification: function() {
            if (!this.get("activeBanners").length)
                return !1;
            if (!localStorage.dismissedBanners)
                return !0;
            var e = localStorage.dismissedBanners ? JSON.parse(localStorage.dismissedBanners) : {}
              , t = !0;
            return this.get("activeBanners").forEach(function(a) {
                t = t && !e[a]
            }),
            t
        }
        .property("activeBanners"),
        deviceType: function() {
            var e = window.navigator.userAgent;
            return e.match(/Windows Phone/i) ? "windows" : e.match(/iPhone/i) || e.match(/iPad/i) || e.match(/iPod/i) ? "apple" : e.match(/Android/i) ? "android" : void 0
        }
        .property(),
        routeClass: function() {
            return this.get("currentPath") ? this.get("currentPath").replace(/[.\/]/g, "-") : void 0
        }
        .property("currentPath"),
        currentPathChanged: function() {
            t["default"].run.next(function() {
                var e = window.location.hash.length > 0 ? window.location.hash.substring(1) : window.location.pathname;
                this.send("gaq", ["_trackPageview", e]),
                this.get("scribe").resetAppNavigation()
            }
            .bind(this))
        }
        .observes("currentPath"),
        actions: {
            closeBanner: function(e) {
                delete localStorage["year-on-vine-banner"];
                var t = localStorage.dismissedBanners ? JSON.parse(localStorage.dismissedBanners) : {};
                t[e] = !0,
                localStorage.dismissedBanners = JSON.stringify(t),
                this.set("hasNotification", !1)
            },
            resetPageStates: function() {
                this.get("isMobile") && this.set("transitioning", !0),
                this.setProperties({
                    modal: !1,
                    mobileTitle: void 0
                })
            }
        }
    });
    e["default"] = i
}),
define("vine-ember/controllers/audio-track", ["exports", "vine-ember/controllers/timeline", "vine-ember/mixins/top-recent"], function(e, t, a) {
    var n = t["default"].extend(a["default"]);
    e["default"] = n
}),
define("vine-ember/controllers/confirm-email", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        _doResendEmail: function() {
            this.get("services.user").sendEmailVerification(this.get("token")).then(function() {
                this.setProperties({
                    error: !1,
                    emailResent: !0
                })
            }
            .bind(this), function(e) {
                this.setProperties({
                    error: e.response,
                    showContinue: !0
                })
            }
            .bind(this))
        },
        actions: {
            resendEmail: function() {
                this.send("doAuthenticatedAction", "resend a confirmation link", this._doResendEmail.bind(this))
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/current-user", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        sessionChanged: function() {
            this.get("session.isAuthenticated") ? this.get("services.user").me().then(function(e) {
                this.set("model", e)
            }
            .bind(this)) : this.set("model", null )
        }
        .observes("session.userId").on("init"),
        borderColorStyle: function() {
            return this.get("backgroundColor") ? "box-shadow: 0 0 0 2px #" + this.get("backgroundColor") : void 0
        }
        .property("backgroundColor")
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/channels", ["exports", "ember"], function(e, t) {
    var a = t["default"].ArrayController.extend({
        init: function() {
            this._super(),
            this.get("services.channels").findAll().then(function(e) {
                this.set("content", e)
            }
            .bind(this))
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/list", ["exports", "vine-ember/controllers/timeline"], function(e, t) {
    var a = t["default"].extend({
        needs: ["index", "playlists"],
        list: Ember.computed.alias("model.list"),
        pagination: Ember.computed.alias("model.pagination"),
        listIdClass: function() {
            return "list-" + this.get("list.timelineIdStr")
        }
        .property("list.timelineIdStr"),
        secureThumbnailUrl: function() {
            return this.get("firstObject.thumbnailUrl").replace("http://", "https://")
        }
        .property("firstObject.thumbnailUrl"),
        actions: {
            openModalView: function(e) {
                if (this.get("isMobile") && this.get("list.vanityUrl"))
                    return void this.transitionTo("list", this.get("list.vanityUrl"));
                var t = this.get("firstObject.model");
                return this.send("showModal", "post", {
                    content: e,
                    videoIndex: e.indexOf(t)
                }),
                !1
            },
            facebookShare: function() {
                var e = 670
                  , t = 350
                  , a = window.open(this.get("list.shareObject.facebookUrl"), "fbWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            tweet: function() {
                var e = 550
                  , t = 380
                  , a = window.open(this.get("list.shareObject.tweetUrl"), "tweetWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            routeToList: function() {
                var e = this.get("list.isTrend") ? "trend" : "list";
                this.transitionToRoute(e, this.get("list.vanityUrl"))
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/lists", ["exports", "ember"], function(e, t) {
    var a = t["default"].ArrayController.extend({
        needs: "index",
        itemController: "explore/list",
        init: function() {
            this._super(),
            this.get("services.list").editorialWithPosts(null , {
                size: 8
            }, 3).then(function(e) {
                this.set("content", e.posts);
                var t = e.posts.reduce(function(e, t) {
                    return e = e.concat(t.slice(0, 3).map(function(e, a) {
                        return e.context = {
                            list: t.list,
                            positionIndex: a + 1,
                            listLength: t.length
                        },
                        e
                    }))
                }, []);
                this.get("controllers.index").send("addPosts", t)
            }
            .bind(this))
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/mobile", ["exports", "vine-ember/controllers/explore"], function(e, t) {
    var a = t["default"].extend({
        numPinnedChannels: 1,
        numEditorsPicks: 5,
        numEditorial: 2,
        _mixContent: function(e) {
            var t = e.editorial
              , a = e.channels
              , n = e.users
              , r = e.editorsPicks
              , i = [t.shift(), {
                channels: !0
            }, r.shift(), {
                popularNow: !0
            }, n, a.shift(), t.shift()];
            return i
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/pinned-channel", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        needs: "application",
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        channelIdAttr: function() {
            return "channel-" + this.get("channel.channelIdStr")
        }
        .property("channel.channelIdStr"),
        route: function() {
            return "channel"
        }
        .property("channel"),
        routeParam: function() {
            return this.get("channel.event") ? void 0 : this.get("channel.vanityUrl")
        }
        .property("channel.event")
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/popular-now", ["exports", "ember"], function(e, t) {
    var a = t["default"].ArrayController.extend({
        needs: ["index", "application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        itemController: "explore/post",
        init: function() {
            this._super(),
            this.fetchData()
        },
        fetchData: function(e) {
            var t = 5;
            return this.get("isMobile") && (t = 3),
            this.get("services.timeline").popular(null , {
                size: t
            }).then(function(e) {
                var a = e.posts.slice(0, t);
                this.set("content", a),
                this.get("controllers.index").send("addPosts", a.map(function(e) {
                    return e.context = {
                        popularNow: !0
                    },
                    e
                }))
            }
            .bind(this))
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/post", ["exports", "vine-ember/controllers/post"], function(e, t) {
    var a = t["default"].extend({
        needs: ["index"]
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/posts/three", ["exports", "vine-ember/controllers/explore/post"], function(e, t) {
    var a = t["default"].extend({
        linkColorStyle: function() {
            var e = this.get("parentController.channel");
            return e ? e.get("fontColorStyle") : void 0
        }
        .property("parentController.channel.fontColorStyle")
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore/tags", ["exports", "ember"], function(e, t) {
    var a = t["default"].ArrayController.extend({
        init: function() {
            this._super(),
            this._fetchTags()
        },
        _fetchTags: function() {
            this.get("services.timeline").trendingTags().then(function(e) {
                this.set("content", e.posts.slice(0, 8))
            }
            .bind(this))
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/explore", ["exports", "ember", "vine-ember/models/user"], function(e, t, a) {
    var n = t["default"].ArrayController.extend({
        needs: ["application", "index"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        numPinnedChannels: 3,
        numEditorsPicks: 9,
        numEditorial: 3,
        hideDownloadButtons: function() {
            var e = this.get("config.ORIGINAL_VINE_CLIENT");
            return this.get("isMobile") && e && e.match(/^ios-watch/)
        }
        .property("isMobile", "config.ORIGINAL_VINE_CLIENT"),
        init: function() {
            this._super(),
            this.fetchData().then(function(e) {
                var t = this._mixContent(e).filter(function(e) {
                    return e
                });
                this.set("content", t),
                this._constructTimeline(t)
            }
            .bind(this))
        },
        fetchData: function() {
            return t["default"].RSVP.hash({
                channels: this.get("services.list").pinned(null , {
                    size: this.get("numPinnedChannels")
                }, {
                    timelineSize: 3
                })["catch"](function() {
                    return []
                }),
                editorsPicks: this.get("services.timeline").promoted(null , {
                    size: this.get("numEditorsPicks")
                }).then(function(e) {
                    return e.posts
                })["catch"](function() {
                    return []
                }),
                editorial: this.get("services.list").editorialWithPosts(null , {
                    size: this.get("numEditorial")
                }).then(function(e) {
                    return e.posts
                })["catch"](function() {
                    return []
                })
            }).then(function(e) {
                var n = {};
                return n.channels = e.channels.filter(function(e) {
                    return e.channel && e.posts && e.posts.length
                }),
                n.editorsPicks = e.editorsPicks.splice(0, 1),
                n.users = [{
                    users: e.editorsPicks.splice(0, 4).map(function(e) {
                        return a["default"].create(e)
                    })
                }, {
                    users: e.editorsPicks.splice(0, 4).map(function(e) {
                        return a["default"].create(e)
                    })
                }],
                n.editorial = e.editorial.filter(function(e) {
                    return e && e.length
                }),
                t["default"].RSVP.resolve(n)
            })
        },
        _mixContent: function(e) {
            var t = e.editorial
              , a = e.channels
              , n = e.users
              , r = e.editorsPicks
              , i = []
              , d = window.moment;
            t.length && r.length && (i = d(t[0].published).isAfter(r[0].repost.created) ? i.concat([t.shift(), r.shift()]) : i.concat([r.shift(), t.shift()])),
            i = i.concat(t);
            var c = [i.shift(), a.shift(), n.shift(), i.shift(), a.shift(), n.shift(), i.shift(), a.shift(), i.shift()];
            return c
        },
        _constructTimeline: function(e) {
            var t = [];
            e.forEach(function(e) {
                e.list ? t = t.concat(e.map(function(t, a) {
                    return t.context = {
                        list: e.list,
                        positionIndex: a + 1,
                        listLength: e.length
                    },
                    t
                })) : e.channel ? t = t.concat(e.posts.map(function(t) {
                    return t.context = {
                        channel: e.channel
                    },
                    t
                })) : e.postIdStr && (e.context = {
                    editorsPick: !0
                },
                t.push(e))
            }),
            this.get("controllers.index").send("addPosts", t)
        },
        lookupItemController: function(e) {
            return e.channel ? "explore/pinned-channel" : e.postIdStr ? "explore/post" : e.list ? "explore/list" : void 0
        }
    });
    e["default"] = n
}),
define("vine-ember/controllers/forgot-password", ["exports", "ember", "vine-ember/services/password"], function(e, t, a) {
    var n = t["default"].Controller.extend({
        actions: {
            submitEmail: function() {
                return this.get("email") && this.get("email").trim() ? void a["default"].forgotPassword(this.get("email")).then(function() {
                    this.send("forgotPasswordSuccess")
                }
                .bind(this), function() {
                    this.send("forgotPasswordError")
                }
                .bind(this)) : void this.send("forgotPasswordError", "Email must not be blank.")
            },
            forgotPasswordSuccess: function() {
                this.setProperties({
                    message: {
                        text: "Please check your email for instructions.",
                        type: "confirm"
                    },
                    submitted: !0
                })
            },
            forgotPasswordError: function(e) {
                this.set("message", {
                    text: e || "We couldn't find an account with that email.",
                    type: "error"
                })
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/controllers/index", ["exports", "vine-ember/controllers/timeline"], function(e, t) {
    var a = t["default"].extend({
        timelineName: "Explore Vine",
        pagination: function() {
            return {
                count: this.get("length")
            }
        }
        .property("length"),
        iconStyle: function() {
            var e = "background-image: url('" + this.get("config.ASSETS_CDN_PREFIX") + "images/sidebar/explore.svg'); background-size: 50%;";
            return Ember.String.htmlSafe(e)
        }
        .property("config.ASSETS_CDN_PREFIX"),
        actions: {
            addPosts: function(e) {
                this.get("model").pushObjects(e)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/jobs", ["exports", "ember", "vine-ember/mixins/shuffle"], function(e, t, a) {
    var n = t["default"].ObjectController.extend(a["default"], {
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        heroVideoUrl: "https://v.cdn.vine.co/static/trix/JP2.mp4",
        heroPosterUrl: function() {
            return this.get("config.ASSETS_CDN_PREFIX") + "images/jobs/poster-b8e30ec6de2e4ea7e40bcac96310e5a5.jpg"
        }
        .property("config.ASSETS_CDN_PREFIX"),
        perks: [{
            className: "perks-green",
            title: "Green for green",
            description: "Vine naturally has to be about plants, right? Get a budget for flora at your station.",
            img: "images/jobs/perks-02.svg"
        }, {
            className: "perks-flicks",
            title: "Tix to the flicks",
            description: "At Vine, we all make short movies, and we offer tickets for feature-length too.",
            img: "images/jobs/perks-07.svg"
        }, {
            className: "perks-fitness",
            title: "Fitness for free",
            description: "To keep you ripe on the vine, we'll pick up the tab for membership to your local gym.",
            img: "images/jobs/perks-06.svg"
        }, {
            className: "perks-medical",
            title: "OneMedical one cost",
            description: "Don't stress your health with a free OneMedical membership to see an MD anytime.",
            img: "images/jobs/perks-04.svg"
        }, {
            className: "perks-impact",
            title: "Immediate impact",
            description: "Join a small team creating a huge platform with instant gratification as it goes live.",
            img: "images/jobs/perks-08.svg"
        }],
        numEmployeesToShow: 12,
        assetPrefix: "https://v.cdn.vine.co/w/jobs/",
        employeeAssets: [{
            mp4: "Andre.mp4",
            gif: "Andre.gif",
            source: "iqidYYYLBT1"
        }, {
            mp4: "Carolyn.mp4",
            gif: "Carolyn.gif",
            source: "inE6iDrhxKM"
        }, {
            mp4: "Chris.mp4",
            gif: "Chris.gif",
            source: "iqVVO2XBa6v"
        }, {
            mp4: "Dan.mp4",
            gif: "Dan.gif",
            source: "iOlEZFKxwIx"
        }, {
            mp4: "Hilary.mp4",
            gif: "Hilary.gif",
            source: "iOXHWjM3euu"
        }, {
            mp4: "Izzy.mp4",
            gif: "Izzy.gif",
            source: "e6q0ePV0ga1"
        }, {
            mp4: "Janessa.mp4",
            gif: "Janessa.gif",
            source: "e21aXh3jT9P"
        }, {
            mp4: "Jared.mp4",
            gif: "Jared.gif",
            source: "iqVVO2XBa6v"
        }, {
            mp4: "JingJing.mp4",
            gif: "Jingjing.gif",
            source: "iAD9FUUV1lU"
        }, {
            mp4: "John.mp4",
            gif: "John.gif",
            source: "iJO1LzMnOEa"
        }, {
            mp4: "Julia.mp4",
            gif: "Julia.gif",
            source: "iiiMZZzZJtb"
        }, {
            mp4: "KB.mp4",
            gif: "KB.gif",
            source: "ib7BAFp6TrX"
        }, {
            mp4: "Karyn.mp4",
            gif: "Karyn.gif",
            source: "e6B3UIE7DAz"
        }, {
            mp4: "Kevin.mp4",
            gif: "Kevin.gif",
            source: "ib2mTn1A1Zd"
        }, {
            mp4: "Key.mp4",
            gif: "Key.gif",
            source: "ihO5b9iuUv7"
        }, {
            mp4: "Luca.mp4",
            gif: "Luca.gif",
            source: "int5AAA0IOQ"
        }, {
            mp4: "Madeline.mp4",
            gif: "Madeline.gif",
            source: "inul2th7PrP"
        }, {
            mp4: "Matt.mp4",
            gif: "Matt.gif",
            source: "iJrTAXmaFHO"
        }, {
            mp4: "Ralph.mp4",
            gif: "Ralph.gif",
            source: "iZaBJIT9hjD"
        }, {
            mp4: "Rodney.mp4",
            gif: "Rodney.gif",
            source: "hHaLpzqXdiH"
        }, {
            mp4: "Simon.mp4",
            gif: "Simon.gif",
            source: "inF7KqjhjMb"
        }, {
            mp4: "William.mp4",
            gif: "William.gif",
            source: "ejT0FZ3ZHK0"
        }, {
            mp4: "Zack.mp4",
            gif: "Zack.gif",
            source: "i77prWqaD6Y"
        }],
        init: function() {
            this._super(),
            this.send("resumePerkAnimation")
        },
        currentPerkIndex: 0,
        currentPerk: function() {
            return this.get("perks")[this.get("currentPerkIndex")]
        }
        .property("currentPerkIndex"),
        currentPerkClassName: function() {
            return this.get("currentPerk").className
        }
        .property("currentPerk"),
        useEmployeeGifs: function() {
            return this.get("isMobile")
        }
        .property("isMobile"),
        employeeVines: function() {
            return this.shuffle(this.get("employeeAssets")).slice(0, this.get("numEmployeesToShow")).map(function(e) {
                return e.mp4 = this.get("assetPrefix") + e.mp4,
                e.gif = this.get("assetPrefix") + e.gif,
                e
            }
            .bind(this))
        }
        .property("employeeAssets", "numEmployeesToShow", "assetPrefix"),
        allJobsColumns: function() {
            for (var e = this.get("all"), t = 3, a = [], n = 0; n < e.length; n++)
                a.length - 1 < n % t && a.push([]),
                a[n % t].push(e[n]);
            return a
        }
        .property("all"),
        nonEngineeringJobs: function() {
            return this.get("all").filter(function(e) {
                return -1 === e.name.toLowerCase().indexOf("engineer")
            })
        }
        .property("all"),
        engineeringJobs: function() {
            return this.get("all").filter(function(e) {
                return -1 !== e.name.toLowerCase().indexOf("engineer")
            })
        }
        .property("all"),
        currentJobChanged: function() {
            var e = this.get("current");
            e && this.send("openModalForJobId", e.id)
        }
        .observes("current"),
        perkSliderStyle: function() {
            var e = "left:" + this.get("currentPerkIndex") * $("section.perks").width() * -1 + "px";
            return t["default"].String.htmlSafe(e)
        }
        .property("currentPerkIndex"),
        actions: {
            openModalForJobId: function(e) {
                this.send("showModal", "job", {
                    content: this.get("all"),
                    job: this.get("current"),
                    applying: !1,
                    jobIdToShow: e,
                    routeAfterClose: "jobs"
                }),
                this.send("scrollToTop")
            },
            nextPerk: function() {
                var e = this.get("currentPerkIndex") + 1;
                e > this.get("perks").length - 1 && (e = 0),
                this.set("currentPerkIndex", e)
            },
            prevPerk: function() {
                var e = this.get("currentPerkIndex") - 1;
                0 > e && (e = this.get("perks").length - 1),
                this.set("currentPerkIndex", e)
            },
            pausePerkAnimation: function() {
                window.clearInterval(this.perkSliderTimer)
            },
            resumePerkAnimation: function() {
                window.clearInterval(this.perkSliderTimer),
                this.perkSliderTimer = window.setInterval(this.send.bind(this, "nextPerk"), 4e3)
            },
            toggleCredits: function() {
                $(".hero-overlay").toggleClass("showing-credits")
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/controllers/login", ["exports", "ember"], function(e, t) {
    var a = t["default"].Controller.extend({
        needs: "application",
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        message: null ,
        action: null ,
        getExtraParams: function() {
            var e = {};
            return this.get("action") && (e.action = this.get("action")),
            e
        },
        clearAction: function() {
            this.set("action", null )
        },
        actions: {
            login: function() {
                var e = this
                  , a = this.getProperties("identification", "password");
                t["default"].isEmpty(a.identification) || t["default"].isEmpty(a.password) || this.get("services.user").authenticate(a.identification, a.password, this.getExtraParams()).then(function(t) {
                    e.send("loginSuccess", t)
                })["catch"](function(t) {
                    e.send("loginFailed", t)
                })["finally"](function() {
                    e.set("password", void 0)
                })
            },
            twitterSignin: function() {
                this.send("gaq", ["_trackEvent", "Login", "twitter"]);
                var e = this;
                window.createOauthSession = function(t) {
                    e.get("services.user").authTwitter(t.access_token, t.access_token_secret, e.getExtraParams()).then(function(t) {
                        e.send("loginSuccess", t)
                    })["catch"](function(t) {
                        e.send("oauthAuthFailed", t)
                    })
                }
                ,
                window.createOauthError = function(t) {
                    e.send("loginFailed", "An error occured while connecting with Twitter.\n Please try logging in again.")
                }
                ,
                /CriOS/.test(window.navigator.userAgent) && this.send("bindSessionPolling");
                var t = 550
                  , a = 590
                  , n = ""
                  , r = (window.screen.height - a) / 2
                  , i = (window.screen.width - t) / 2;
                window.open(n + "/twitter/oauth/redirect", "twitterOauthWindow", "width=" + t + ",height=" + a + ",top=" + r + ",left=" + i)
            },
            bindSessionPolling: function() {
                var e = window.setInterval(function() {
                    window.localStorage.userId && (this.get("session").init(),
                    this.send("loginSucceeded"),
                    this.send("cleanupSessionPolling"))
                }
                .bind(this), 500);
                this.set("sessionPoller", e)
            },
            cleanupSessionPolling: function() {
                window.clearInterval(this.get("sessionPoller"))
            },
            loginSuccess: function(e) {
                this.clearAction(),
                this.get("session").setup(e.data).then(function() {
                    this.send("loginSucceeded")
                }
                .bind(this))
            },
            loginFailed: function(e) {
                this.clearAction();
                var t = "That username and password is incorrect.";
                return "object" == typeof e ? t = e.response.error : e && (t = e),
                this.set("message", {
                    text: t,
                    type: "error"
                }),
                !0
            },
            oauthAuthFailed: function() {
                this.send("loginFailed", "We couldn't find a Vine account linked to that Twitter account.")
            },
            resetForm: function() {
                this.setProperties({
                    message: void 0,
                    identification: void 0,
                    password: void 0
                })
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/modal/embed", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        modalSelector: ".embed-modal",
        embedSize: 600,
        embedType: "simple",
        audioEnabled: !1,
        locationOrigin: function() {
            return window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "")
        }
        .property(),
        hostScriptSrc: function() {
            return ("vine.co" === window.location.host ? "https://platform.vine.co" : this.get("locationOrigin")) + "/static/scripts/embed.js"
        }
        .property(),
        embedSrc: function() {
            var e = {}
              , t = this.get("locationOrigin") + "/v/" + this.get("shortId") + "/embed/" + this.get("embedType");
            return this.get("audioEnabled") && (e.audio = 1),
            e = $.param(e),
            e && (t += "?" + e),
            t
        }
        .property("embedType", "shortId", "audioEnabled"),
        isPostcardEmbed: t["default"].computed.equal("embedType", "postcard"),
        isSimpleEmbed: t["default"].computed.equal("embedType", "simple"),
        isSize600: t["default"].computed.equal("embedSize", 600),
        isSize480: t["default"].computed.equal("embedSize", 480),
        isSize300: t["default"].computed.equal("embedSize", 300),
        iframeHtml: function() {
            return ['<iframe src="', this.get("embedSrc"), '" width="', this.get("embedSize"), '" height="', this.get("embedSize"), '" frameborder="0"></iframe>'].join("")
        }
        .property("embedSrc", "embedSize"),
        embedCode: function() {
            return this.get("iframeHtml") + '<script src="' + this.get("hostScriptSrc") + '"></script>'
        }
        .property("iframeHtml", "hostScriptSrc"),
        actions: {
            toggleAudio: function() {
                this.toggleProperty("audioEnabled")
            },
            setEmbedType: function(e) {
                this.set("embedType", e)
            },
            setEmbedSize: function(e) {
                this.set("embedSize", e)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/modal/flash-error", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend();
    e["default"] = a
}),
define("vine-ember/controllers/modal/job", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        modalSelector: ".job-modal",
        escapedShareUrl: function() {
            return encodeURIComponent(document.location.protocol + "//" + document.location.host + "/jobs/" + this.get("jobIdToShow"))
        }
        .property("jobIdToShow"),
        escapedShareTitle: function() {
            return encodeURIComponent("Vine is hiring a " + this.get("job.name") + ". Apply now.")
        }
        .property("job.name"),
        twitterShareUrl: function() {
            return "https://twitter.com/share?text=" + this.get("escapedShareTitle") + "&url=" + this.get("escapedShareUrl")
        }
        .property("escapedShareUrl", "escapedShareTitle"),
        facebookShareUrl: function() {
            return "http://www.facebook.com/sharer.php?s=100&p[url]=" + this.get("escapedShareUrl")
        }
        .property("escapedShareUrl"),
        linkedInShareUrl: function() {
            return "http://www.linkedin.com/shareArticle?mini=true&url=" + this.get("escapedShareUrl") + "&title=" + this.get("escapedShareTitle")
        }
        .property("escapedShareUrl", "escapedShareTitle"),
        emailShareUrl: function() {
            return "mailto:?subject=" + this.get("escapedShareTitle") + "&body=" + this.get("escapedShareUrl")
        }
        .property("escapedShareUrl", "escapedShareTitle"),
        actions: {
            apply: function() {
                this.set("applying", !0)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/modal/login", ["exports", "ember"], function(e, t) {
    var a = t["default"].Controller.extend({
        needs: ["login", "application"],
        actions: {
            setAction: function(e) {
                this.get("controllers.login").set("action", e)
            },
            doSuccessEvent: function() {
                this.get("successEvent") && (this.get("successEvent")(),
                this.set("successEvent", void 0))
            },
            hideModal: function() {
                return this.set("successEvent", void 0),
                !0
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/modal/post", ["exports", "ember", "vine-ember/mixins/fullscreen"], function(e, t, a) {
    var n = t["default"].ArrayController.extend(a["default"], {
        itemController: "post",
        modalSelector: ".modal.post-navigator",
        isModal: !0
    });
    e["default"] = n
}),
define("vine-ember/controllers/modal/report", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        action: "block",
        reason: null ,
        source: null ,
        error: null ,
        isBlock: !0,
        isReport: !1,
        isConfirmation: !1,
        confirmation: "Thanks for your feedback.",
        init: function() {
            this._super()
        },
        fetchPrompt: function() {
            this.get("services.complaint").getCategory("post").then(function(e) {
                this.setProperties({
                    prompt: e.prompt,
                    choices: e.choices
                })
            }
            .bind(this))
        },
        promptChanged: function() {
            this.get("prompt") || this.fetchPrompt()
        }
        .observes("prompt"),
        longformChanged: function() {
            this.set("isLongform", Boolean(this.get("longform")))
        }
        .observes("longform"),
        actionChanged: function() {
            this.set("error", null )
        }
        .observes("isBlock", "isReport"),
        submitText: function() {
            return this.get("isReport") ? "Report" : "Block"
        }
        .property("isBlock", "isReport"),
        disableSubmit: function() {
            return !this.get("isBlock") && !this.get("isReport")
        }
        .property("isBlock", "isReport"),
        _blockUser: function() {
            return this.get("services.user").blockUser(this.get("userIdStr"), this.get("session.userId")).then(function() {
                this.send("gaq", ["_trackEvent", "User", "block"])
            }
            .bind(this))
        },
        _reportPost: function() {
            var e = {
                code: this.get("reason"),
                longformId: "video" === this.get("source") && this.get("longform").longformIdStr
            };
            return this.get("services.post").report(this.get("postIdStr"), e).then(function() {
                this.send("gaq", ["_trackEvent", "Post", "report"])
            }
            .bind(this))
        },
        actions: {
            selectReason: function(e, t) {
                this.setProperties({
                    error: null ,
                    reason: e,
                    confirmation: t
                })
            },
            selectSource: function(e) {
                this.setProperties({
                    source: e
                })
            },
            submitReport: function() {
                this.set("error", null );
                var e = [];
                return this.get("isBlock") && e.push(this._blockUser()),
                this.get("isReport") && e.push(this._reportPost()),
                e.length ? void t["default"].RSVP.all(e).then(function() {
                    this.send("handleSuccess")
                }
                .bind(this))["catch"](function(e) {
                    this.send("handleError", e)
                }
                .bind(this)) : void this.set("error", {
                    message: "No action selected."
                })
            },
            handleSuccess: function(e) {
                this.set("isConfirmation", !0),
                t["default"].run.later(this, function() {
                    this.get("timeline") ? this.get("isBlock") ? this.get("timeline").send("removeUsersPostsFromTimeline", this.get("userIdStr")) : this.get("isReport") && this.get("timeline").send("removePostFromTimeline", this.get("userIdStr")) : this.transitionToRoute("index"),
                    this.send("hideModal")
                }, 1e3)
            },
            handleError: function(e) {
                e && e.response && e.response.error ? this.set("error", {
                    message: e.response.error
                }) : this.set("error", !0)
            },
            reset: function() {
                this.setProperties({
                    action: "block",
                    reason: null ,
                    error: null ,
                    isBlock: !0,
                    isReport: !1,
                    isConfirmation: !1,
                    confirmation: "Thanks for your feedback."
                })
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/modal/vm", ["exports", "ember"], function(e, t) {
    var a = t["default"].Controller.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        modalSelector: ".vm-modal",
        categorizedRecipients: [],
        autocompleteRecipients: [],
        loadedUsers: {},
        recipients: [],
        anchor: void 0,
        error: void 0,
        confirmation: !1,
        _addRecipientsToList: function(e, t) {
            this.set("anchor", t),
            e.forEach(function(e) {
                (0 === this.get("categorizedRecipients").length || this.get("categorizedRecipients.lastObject.category") !== e.section) && this.get("categorizedRecipients").pushObject({
                    category: e.section,
                    users: []
                }),
                this.get("categorizedRecipients.lastObject.users").pushObject(this._getUserModel(e))
            }
            .bind(this))
        },
        _getUserModel: function(e) {
            if (!this.get("loadedUsers")[e.userIdStr]) {
                var t = e.get("backgroundColor");
                "#00bf8f" === t && (t = "#333333"),
                e.set("textColor", t),
                this.get("loadedUsers")[e.userIdStr] = e
            }
            return this.get("loadedUsers")[e.userIdStr]
        },
        recipientChanged: $.debounce(300, function() {
            return this.get("recipient") ? void this.send("loadAutocompleteResults", !0) : void this.send("resetAutocomplete")
        }).observes("recipient"),
        isAutocomplete: function() {
            return !!this.get("autocompleteRecipients.length")
        }
        .property("autocompleteRecipients.length"),
        sendDisabled: function() {
            return t["default"].isEmpty(this.get("recipients")) || this.get("sendingVm")
        }
        .property("recipients.length", "sendingVm"),
        actions: {
            reloadRecipients: function() {
                this.get("services.user").vmRecipients().then(function(e) {
                    this._addRecipientsToList(e.posts, e.pagination.anchor)
                }
                .bind(this))
            },
            paginateRecipients: function() {
                this.set("paginating", !0),
                this.get("services.user").vmRecipients({
                    anchor: this.get("anchor")
                }).then(function(e) {
                    this._addRecipientsToList(e.posts, e.pagination.anchor)
                }
                .bind(this))["finally"](function() {
                    t["default"].run.scheduleOnce("afterRender", function() {
                        this.set("paginating", !1)
                    }
                    .bind(this))
                }
                .bind(this))
            },
            loadAutocompleteResults: function(e) {
                this.set("paginating", !0),
                e && this.set("autocompletePagination", void 0),
                this.get("services.conversation").searchRecipients(this.get("recipient"), this.get("autocompletePagination")).then(function(t) {
                    this.set("autocompletePagination", t.pagination);
                    var a = t.posts.map(function(e) {
                        return this._getUserModel(e)
                    }
                    .bind(this));
                    e ? this.set("autocompleteRecipients", a) : this.get("autocompleteRecipients").pushObjects(a);
                }
                .bind(this))["finally"](function() {
                    t["default"].run.scheduleOnce("afterRender", function() {
                        this.set("paginating", !1)
                    }
                    .bind(this))
                }
                .bind(this))
            },
            addRecipient: function(e) {
                return e.get("selected") ? void this.send("removeRecipient", e) : (e.set("selected", !0),
                this.get("recipients").pushObject(e),
                void this.send("resetAutocomplete"))
            },
            removeRecipient: function(e) {
                for (var t = -1, a = 0; a < this.get("recipients").length; a++)
                    if (this.get("recipients").objectAt(a).userIdStr === e.userIdStr) {
                        t = a;
                        break
                    }
                t >= 0 && this.get("recipients").removeAt(t),
                e.set("selected", !1)
            },
            vmShare: function() {
                if (this.get("recipients.length") && !this.get("sendingVm")) {
                    this.set("sendingVm", !0);
                    var e = this.get("recipients").map(function(e) {
                        return e.userIdStr
                    });
                    this.get("services.conversation").vmPost(this.get("post.postIdStr"), e).then(function(e) {
                        this.set("confirmation", !0),
                        this.send("gaq", ["_trackEvent", "Post", "vm"]),
                        t["default"].run.later(this, function() {
                            this.send("hideModal"),
                            this.send("reset")
                        }, 1e3)
                    }
                    .bind(this))["catch"](function(e) {
                        e && e.response && e.response.error ? this.set("error", e.response.error) : this.set("error", !0)
                    }
                    .bind(this))["finally"](function() {
                        this.set("sendingVm", !1)
                    }
                    .bind(this))
                }
            },
            resetAutocomplete: function() {
                this.setProperties({
                    recipient: void 0,
                    autocompletePagination: void 0
                }),
                this.get("autocompleteRecipients").length > 0 && this.set("autocompleteRecipients", [])
            },
            reset: function() {
                this.get("recipients").forEach(function(e) {
                    e.set("selected", !1)
                }),
                this.send("resetAutocomplete"),
                this.setProperties({
                    recipients: [],
                    categorizedRecipients: [],
                    anchor: void 0,
                    confirmation: !1,
                    error: void 0
                })
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/permalink-post", ["exports", "ember", "vine-ember/controllers/post"], function(e, t, a) {
    var n = a["default"].extend({
        queryParams: ["quality", "video"],
        quality: null ,
        video: 0,
        needs: "related-videos/playing-vine",
        relatedVideosPlayer: t["default"].computed.alias("controllers.related-videos/playing-vine"),
        commentsExpanded: !1,
        isPermalink: !0,
        isModal: t["default"].computed.alias("parentController.isModal"),
        transitioningRelatedVideos: !1,
        selectedPost: void 0,
        canShowRelatedVideos: !1,
        relatedVideosDataReady: !1,
        forceHideMobileInterstitial: !1,
        shouldOpenEmbedModalChanged: function() {
            this.get("shouldOpenEmbedModal") && this.send("openEmbedModal", this.get("shortId"))
        }
        .observes("shouldOpenEmbedModal"),
        shouldShowMobileInterstitial: function() {
            if (this.get("isMobile") && this.get("longform"))
                return !this.get("video");
            var e = void 0;
            try {
                e = JSON.parse(window.localStorage.getItem("hideMobileInterstitialUntil"))
            } catch (t) {}
            var a = e && e > Date.now();
            return this.get("isMobile") && !a && !this.get("forceHideMobileInterstitial")
        }
        .property("isMobile", "forceHideMobileInterstitial", "longform"),
        onShare: "showRelatedVideos",
        fetchRelatedVideos: function() {
            this.set("relatedVideosDataReady", !1);
            var e = this.get("isMobile") || !this.get("hasSimilarPosts") || this.get("isModal") || !this.get("postIdStr") || this.get("transitioningRelatedVideos");
            if (!e) {
                var t = {
                    post_id: this.get("postIdStr")
                };
                return this.get("services.timeline").relatedVideos(t, {
                    size: 5
                }).then(function(e) {
                    this.setProperties({
                        relatedPosts: e.posts,
                        relatedVideosDataReady: !0
                    })
                }
                .bind(this))
            }
        }
        .observes("postIdStr", "transitioningRelatedVideos").on("init"),
        relatedVideosVisible: function() {
            return this.get("isModal") ? !1 : this.get("canShowRelatedVideos") && this.get("relatedVideosDataReady")
        }
        .property("canShowRelatedVideos", "relatedVideosDataReady", "isModal"),
        actions: {
            openEmbedModal: function(e) {
                this.send("showModal", "embed", {
                    content: {
                        shortId: e,
                        embedType: "simple"
                    },
                    routeAfterClose: "permalink-post"
                }),
                this.send("scrollToTop")
            },
            launchLongformViewer: function(e, t) {
                if (this.send("gaq", ["_trackEvent", "Post", "watch more"]),
                this.get("isMobile"))
                    return void (window.location.href = e.videoUrl);
                var a = this.get("controllers.application");
                this.set("video", 1),
                a.set("currentLongform", e, t),
                a.send("initBroker", "watching", e, t)
            },
            showRelatedVideos: function() {
                this.get("canShowRelatedVideos") || this.set("canShowRelatedVideos", !0)
            },
            like: function() {
                this._super(),
                this.send("showRelatedVideos")
            },
            revine: function() {
                this._super(),
                this.send("showRelatedVideos")
            },
            comment: function() {
                this._super(),
                this.send("showRelatedVideos")
            },
            facebookShare: function() {
                this._super(),
                this.send("showRelatedVideos")
            },
            tweet: function() {
                this._super(),
                this.send("showRelatedVideos")
            },
            resetRelatedVideosState: function() {
                this.setProperties({
                    selectedPost: void 0,
                    canShowRelatedVideos: !1
                })
            },
            transitionToRelatedVideo: function(e, t) {
                var a = {
                    pos: t
                };
                this.get("isMobile") && (a.mobile = 1,
                this.send("resetRelatedVideosState")),
                this.get("services.timeline").post({
                    short_id: e.get("shortId")
                }, a).then(function(e) {
                    this.transitionToRoute("permalink-post", e)
                }
                .bind(this));
                var n = e.get("secureThumbnailUrl");
                n === this.get("secureThumbnailUrl") || this.get("isMobile") || this.setProperties({
                    triggerRelatedVideosTransition: !0
                })
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/controllers/playing-vine", ["exports", "ember", "vine-ember/services/video-preload-queue", "vine-ember/services/loop-tracker"], function(e, t, a, n) {
    var r = .5
      , i = t["default"].Controller.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        name: "main",
        forceFallback: !1,
        mediaSourceEnabledBrowsers: {
            Chrome: 30,
            Firefox: 42
        },
        vines: t["default"].A([]),
        visuallySortedVines: t["default"].computed.sort("vines", function(e, t) {
            var a = e.el.offset()
              , n = t.el.offset();
            return a.top === n.top ? a.left - n.left : a.top - n.top
        }),
        continuous: !1,
        forceMute: !1,
        forceUnmute: !1,
        defaultVideoSize: 535,
        recordedLoop: !1,
        player: null ,
        playing: null ,
        loading: !0,
        videoPreloadQueue: a["default"],
        checkViewportScheduled: !1,
        shouldLoop: function() {
            return !this.get("continuous")
        }
        .property("continuous"),
        visibilityDidChange: function() {
            if (!this.get("manuallyPaused")) {
                var e = this.get("controllers.application.isVisible") && !this.get("controllers.application.isMessageBrokerOpen")
                  , t = this.get("player");
                if (t) {
                    var a = this.get("playing");
                    e && a && a.el.is(":visible") ? t.play() : t.pause()
                }
            }
        }
        .observes("controllers.application.isVisible", "controllers.application.isMessageBrokerOpen"),
        isMediaSourceEnabledBrowser: function() {
            if (/OPR\/\d+/.test(window.navigator.userAgent))
                return !1;
            var e = this.get("mediaSourceEnabledBrowsers")
              , t = new RegExp("(" + Object.keys(e).join("|") + ")/[0-9]+","i")
              , a = window.navigator.userAgent.match(t)
              , n = !1;
            if (a && a.length) {
                var r = a[0].split("/")
                  , i = e[r[0]]
                  , d = parseInt(r[1], 10);
                n = d >= i
            }
            return n
        }
        .property("mediaSourceEnabledBrowsers"),
        _canPlayMediaSource: function(e) {
            window.MediaSource = window.MediaSource || window.WebKitMediaSource;
            var t = e.get("secureVideoUrls").findBy("format", "dash")
              , a = this.get("isMediaSourceEnabledBrowser")
              , n = this.get("player");
            return !this.get("forceFallback") && a && "native" === n.pluginType && !this.get("continuous") && t && window.MediaSource
        },
        _getVideoData: function(e, t) {
            return t = t || {},
            t.forceHd = "hd" === (e.get("quality") || "").toLowerCase(),
            t.needsUrl = !!window.navigator.userAgent.match(/MSIE [1-9][^0-9]/) || "native" !== this.get("player").pluginType,
            t.forceLoad = this.get("forceLoad"),
            this.get("videoPreloadQueue").getVideoData(e.get("secureVideoUrls"), t)
        },
        _getVideoObject: function(e, t) {
            return t = t || {},
            t.forceHd = "hd" === (e.get("quality") || "").toLowerCase(),
            this.get("videoPreloadQueue").getVideoObject(e.get("secureVideoUrls"), t)
        },
        _getVinesInViewport: function() {
            var e, t, a, n = this.get("visuallySortedVines"), r = $(window).scrollTop(), i = r + $(window).height(), d = 0, c = n.length - 1;
            for (100 > r && (c = d = 0); c > d; )
                a = d + ~~((c - d) / 2),
                e = n.objectAt(a).el,
                t = e.offset().top + e.height(),
                t >= r ? c = a : d = a + 1;
            for (var s, o, l, h = [], u = [], p = 0, m = d; m < n.length && (o = n.objectAt(m),
            l = o.el.offset().top,
            t = l + o.el.height(),
            !(l > i)); m++)
                if (h.push(o),
                !o.preventAutoplay && !o.post.get("explicitContent")) {
                    var v = Math.min(t, i) - Math.max(l, r);
                    v > p && (s = o,
                    p = v),
                    u.push(o)
                }
            return {
                all: h,
                playable: u,
                mostInViewport: s
            }
        },
        _onEnded: function(e, t) {
            e = e || this.get("player"),
            e && (this.set("recordedLoop", !1),
            this.get("shouldLoop") && !t && (e.setCurrentTime(0),
            "native" !== e.pluginType && e.pause(),
            e.play(),
            this.get("loopSuccessChecker") && this.get("loopSuccessChecker")()),
            this.get("endedEvent") && this.get("endedEvent")())
        },
        _onTimeUpdate: function(e) {
            if (!this.get("recordedLoop") && e.currentTime > r) {
                var t = this.get("playing");
                t && t.post.get("postIdStr") && this.get("loopTracker").recordLoop(t.post.get("postIdStr")),
                this.set("recordedLoop", !0)
            }
        },
        _onVolumeChange: function() {
            var e = this.get("player");
            if (e)
                try {
                    if (!e.muted && e.volume > 0) {
                        if (this.get("forceMute"))
                            return e.setMuted(!0),
                            void this.set("audioClass", "off");
                        this.set("audioClass", "on")
                    } else
                        this.set("audioClass", "off")
                } catch (t) {
                    this.get("config.CLIENT_LOGGING") && console.error(t)
                }
        },
        _onForceMuteChanged: function() {
            if (this.get("player") && this.get("player").setMuted)
                try {
                    if (this.get("forceMute"))
                        this.get("player").setMuted(!0);
                    else {
                        var e = "true" === window.localStorage.post_page_volume;
                        this.get("player").setMuted(!e)
                    }
                } catch (t) {
                    this.get("config.CLIENT_LOGGING") && console.error(t)
                }
        }
        .observes("forceMute"),
        _onForceUnmuteChanged: function() {
            if (this.get("player") && this.get("player").setMuted)
                try {
                    if (this.get("forceUnmute"))
                        this.get("player").setMuted(!1),
                        this.set("audioClass", "on");
                    else {
                        var e = "true" === window.localStorage.post_page_volume;
                        this.get("player").setMuted(!e)
                    }
                } catch (t) {
                    this.get("config.CLIENT_LOGGING") && console.error(t)
                }
        }
        .observes("forceUnmute"),
        _isCurrentlyPlayingVine: function(e) {
            return this.get("playing.post.postIdStr") === e.post.get("postIdStr")
        },
        actions: {
            playerInitialized: function(e, t) {
                this.get("isMobile") || this.setProperties({
                    player: e,
                    el: t
                }),
                this.set("loopTracker", n["default"].create({
                    name: this.get("name")
                })),
                $(e).unbind("ended"),
                $(e).unbind("timeupdate"),
                $(e).unbind("volumechange"),
                $(e).bind("ended", function() {
                    this._onEnded(e)
                }
                .bind(this)),
                $(e).bind("timeupdate", function() {
                    this._onTimeUpdate(e)
                }
                .bind(this)),
                $(e).bind("volumechange", function() {
                    this._onVolumeChange(e)
                }
                .bind(this)),
                this.get("attemptedPlay") && this.send("play", this.get("attemptedPlay")),
                this._onForceMuteChanged(),
                this._onForceUnmuteChanged(),
                this._onVolumeChange()
            },
            queuePreload: function(e) {
                this.get("videoPreloadQueue").queueUrl(e.get("secureVideoUrls"), {
                    isSeamless: this._canPlayMediaSource(e)
                })
            },
            videoRendered: function(e) {
                var a = e.post && e.el && e.el.length && e.view;
                a && (this.get("vines").pushObject(e),
                this.get("isMobile") || this.get("checkViewportScheduled") || (this.set("checkViewportScheduled", !0),
                t["default"].run.scheduleOnce("afterRender", this, function() {
                    this.send("checkViewport")
                })))
            },
            checkViewport: function() {
                var e = this._getVinesInViewport()
                  , t = e.playable;
                if (this.get("isMobile"))
                    return void t.forEach(function(e) {
                        this.send("initMobile", e)
                    }
                    .bind(this));
                var a = this.get("controllers.application.isMessageBrokerOpen")
                  , n = e.mostInViewport;
                n && n !== this.get("playing") && !a && this.send("play", n),
                this.get("isMobile") || e.all.forEach(function(e) {
                    this.send("queuePreload", e.post)
                }
                .bind(this))
            },
            initMobile: function(e) {
                if (!e.view.get("player")) {
                    var t = e.el.find(".vine-video-container")
                      , a = e.video || t.find("video")
                      , n = t.width()
                      , r = {
                        defaultVideoWidth: n,
                        defaultVideoHeight: n,
                        features: [],
                        plugins: ["flash"],
                        pluginPath: "/assets/swf/",
                        enablePluginSmoothing: !0,
                        flashName: "flashmediaelement.2.swf",
                        startVolume: 1,
                        success: function(t) {
                            e.view.set("player", t),
                            $(t).bind("webkitendfullscreen", function() {
                                e.view.send("pause")
                            }),
                            this.get("initMobileEvent") && this.get("initMobileEvent")(t),
                            this.send("playerInitialized", t, e.el)
                        }
                        .bind(this),
                        error: function(e) {
                            window.console.error("Player initialization failed.", e),
                            this.send("gaq", ["_trackEvent", "Post", "video initialization error"])
                        }
                    }
                      , i = this.get("mediaElement") || window.MediaElement;
                    i(a[0], r)
                }
            },
            play: function(e) {
                if (!e) {
                    if (!this.get("playing"))
                        return;
                    e = this.get("playing")
                }
                if (this.get("isMobile"))
                    return void this.send("playMobile", e);
                if (e.post.get("explicitContent"))
                    return this.send("pause"),
                    t["default"].$("#outer-wrapper").before(this.get("el")),
                    void this.set("attemptedPlay", e);
                var a = this.get("player")
                  , n = this.get("el");
                if (!n || !a)
                    return void this.set("attemptedPlay", e);
                this.send("gaq", ["_trackEvent", "Post", "play"]);
                var r = Math.max(e.el.width(), e.el.height());
                a.setVideoSize(r, r);
                var i = n.parent()[0] !== e.el[0];
                i && e.el.append(n),
                this.get("continuous") || n.addClass("almost-invisible"),
                this.get("loopTracker").startPlaying(e.post.get("postIdStr")),
                this.get("loadingTimeout") && t["default"].run.cancel(this.get("loadingTimeout"));
                var d = 300;
                this.set("loadingTimeout", t["default"].run.later(null , function() {
                    this.send("showLoading", e)
                }
                .bind(this), d)),
                this.get("mediaSourceEndedTrigger") && $(a).unbind("timeupdate", this.get("mediaSourceEndedTrigger")),
                this.get("controllers.application.isVisible") && (this._canPlayMediaSource(e.post) ? this.send("loadMediaSource", e) : this.send("playFallback", e))
            },
            loadMediaSource: function(e) {
                var t = this.get("player");
                if (this._isCurrentlyPlayingVine(e))
                    try {
                        return t.setCurrentTime(0),
                        this.send("setVisible", e),
                        void t.play()
                    } catch (a) {
                        this.get("config.CLIENT_LOGGING") && console.error(a)
                    }
                this.set("playing", e),
                this.send("clearMediaSource"),
                this._getVideoData(e.post, {
                    isSeamless: !0
                }).then(function(t) {
                    this.send("mediaSourceLoaded", t, e)
                }
                .bind(this))["catch"](function(t) {
                    this.send("playFallback", e)
                }
                .bind(this))["finally"](function() {
                    this.get("videoPreloadQueue").set("paused", !1)
                }
                .bind(this))
            },
            mediaSourceLoaded: function(e, t) {
                if (this._isCurrentlyPlayingVine(t)) {
                    var a, n = this.get("player"), r = .05, i = 25, d = new window.MediaSource;
                    this.set("currentMediaSource", d),
                    $(n).attr("poster", t.post.get("secureThumbnailUrl")),
                    n.setSrc(window.URL.createObjectURL(d));
                    var c = new Uint8Array(e)
                      , s = this;
                    d.addEventListener("sourceopen", function() {
                        function o() {
                            var e = a.buffered.length > 0 ? a.buffered.end(a.buffered.length - 1) : r;
                            return u && u - m > e ? (a.removeEventListener("updateend", g),
                            void s.send("playFallback", t)) : (a.timestampOffset = e - r,
                            a.appendWindowEnd = e + h - 2 * r,
                            a.appendWindowStart = e,
                            a.appendBuffer(c),
                            void (u = a.appendWindowEnd))
                        }
                        try {
                            a = d.addSourceBuffer('video/mp4; codecs="avc1.4d401e, mp4a.40.2"'),
                            s.set("currentSourceBuffer", a)
                        } catch (l) {
                            return s.get("config.CLIENT_LOGGING") && console.error(l),
                            void s.send("playFallback", t)
                        }
                        for (var h, u, p = [], m = .5, v = 0; i > v; v++)
                            p.push(function() {
                                if (s.get("playing") !== t)
                                    return void a.removeEventListener("updateend", g);
                                try {
                                    o()
                                } catch (e) {
                                    return s.get("config.CLIENT_LOGGING") && console.error(e),
                                    a.removeEventListener("updateend", g),
                                    void s.send("playFallback", t)
                                }
                            });
                        p.push(function() {
                            function e() {
                                Math.floor(n.currentTime / h) > a && (a++,
                                s._onEnded(n, !0))
                            }
                            var a = 0;
                            $(n).bind("timeupdate", e),
                            s.set("mediaSourceEndedTrigger", e),
                            d.endOfStream(),
                            n.currentTime = r + .011,
                            s.send("setVisible", t),
                            s.get("controllers.application.isVisible") && n.play()
                        });
                        var g = function() {
                            p.length && p.shift()()
                        }
                        ;
                        a.addEventListener("updateend", g),
                        window.mp4({
                            file: e,
                            type: "arraybuffer"
                        }, function(e, a) {
                            return e ? void s.send("playFallback", t) : (h = parseFloat(a["com.vineapp.duration"]),
                            void p.shift()())
                        })
                    })
                }
            },
            playFallback: function(e) {
                var t = this.get("player");
                this.set("playing", e),
                $(t).one("canplay", function() {
                    this.get("playing") === e && (this.send("setVisible", e),
                    t.play())
                }
                .bind(this)),
                $(t).attr("poster", e.post.get("secureThumbnailUrl"));
                try {
                    this._getVideoData(e.post, {
                        isSeamless: !1
                    }).then(function(a) {
                        if (this._isCurrentlyPlayingVine(e)) {
                            var n = "string" == typeof a ? a : window.URL.createObjectURL(a);
                            t.setSrc([{
                                src: n,
                                type: "video/mp4"
                            }]),
                            t.play()
                        }
                    }
                    .bind(this))
                } catch (a) {
                    this.get("config.CLIENT_LOGGING") && console.error(a)
                }
            },
            clearMediaSource: function() {
                this.get("player") && this.get("currentMediaSource") && this.get("currentSourceBuffer") && $(this.get("player")).removeAttr("src")
            },
            pause: function() {
                if (this.get("isMobile"))
                    return void this.send("pauseMobile");
                try {
                    this.get("player").pause()
                } catch (e) {}
                this.set("playing", null )
            },
            playMobile: function(e) {
                if ((!e.el || 0 !== e.el.length) && e.view && e.view.get("player")) {
                    e.controlEls && e.controlEls.hide(),
                    e.playerEls && e.playerEls.show(),
                    this.send("pauseMobile"),
                    this.send("gaq", ["_trackEvent", "Post", "play"]),
                    this.send("gaq", ["_trackEvent", "Post", "mobile play"]);
                    var t = e.view.get("player");
                    t || (e.view.$("video").attr("loop", "true"),
                    t = e.view.$("video")[0]),
                    $(t).one("webkitbeginfullscreen", function() {
                        t.play()
                    }),
                    t.setSrc([{
                        src: e.post.get("secureSDVideoUrl"),
                        type: "video/mp4"
                    }]),
                    t.play(),
                    this.setProperties({
                        playing: e,
                        player: t
                    }),
                    this.get("loopTracker").startPlaying(e.post.get("postIdStr"))
                }
            },
            pauseMobile: function() {
                var e = this.get("player");
                e && (e.pause(),
                this.set("player", null ));
                var t = this.get("playing");
                t && (t.controlEls.show(),
                t.playerEls.hide(),
                this.set("playing", null ))
            },
            toggleMute: function() {
                var e = this.get("player");
                if (e) {
                    var t = this.get("playing.post.postType");
                    e.muted ? (window.localStorage.post_page_volume = !0,
                    e.setMuted(!1),
                    this.send("gaq", ["_trackEvent", "Post", "user unmute", t])) : (delete window.localStorage.post_page_volume,
                    e.setMuted(!0),
                    this.send("gaq", ["_trackEvent", "Post", "user mute", t]))
                }
            },
            playerMute: function() {
                var e = this.get("player");
                e && (e.setMuted(!0),
                this.set("audioClass", "off"))
            },
            playerUnmute: function() {
                var e = this.get("player");
                e && (e.setMuted(!1),
                this.set("audioClass", "on"))
            },
            togglePlay: function() {
                var e = this.get("player");
                if (e) {
                    var t = this.get("playing.post.postType");
                    e.paused ? (e.play(),
                    this.send("gaq", ["_trackEvent", "Post", "user play", t])) : (e.pause(),
                    this.send("gaq", ["_trackEvent", "Post", "user pause", t])),
                    this.set("manuallyPaused", e.paused)
                }
            },
            explicitChanged: function(e) {
                e ? (this.send("pause"),
                t["default"].$("#outer-wrapper").before(this.get("el"))) : this.get("attemptedPlay") && this.send("play", this.get("attemptedPlay"))
            },
            removePlayer: function() {
                this.get("playing") && this.send("pause"),
                this.get("isMobile") || (t["default"].$("#outer-wrapper").before(this.get("el")),
                this.get("player") && this.get("player").setVideoSize(this.get("defaultVideoSize"), this.get("defaultVideoSize"))),
                this.set("playing", null )
            },
            reset: function() {
                this.send("removePlayer"),
                this.setProperties({
                    continuous: !1,
                    attemptedPlay: null ,
                    endedEvent: null ,
                    checkViewportScheduled: !1,
                    currentSourceBuffer: void 0,
                    currentMediaSource: void 0,
                    forceFallback: !1
                }),
                this.set("vines", []),
                this.get("videoPreloadQueue").reset()
            },
            setVisible: function(e) {
                this.get("el").removeClass("almost-invisible"),
                t["default"].run.cancel(this.get("loadingTimeout")),
                this.send("hideLoading", e)
            },
            showLoading: function(e) {
                var t = e.el.find(".loading-bar");
                if (!t.is(":visible") && !this.get("loadingInterval")) {
                    t.show();
                    var a = 70 + 10 * Math.random()
                      , n = e.el.width();
                    t.width(a / 100 * n);
                    var r = setInterval(function() {
                        a += 10 * Math.random(),
                        t.width(a / 100 * n)
                    }, 100);
                    this.setProperties({
                        loading: !0,
                        loadingInterval: r
                    })
                }
            },
            hideLoading: function(e) {
                t["default"].run.cancel(this.get("loadingTimeout")),
                clearInterval(this.get("loadingInterval"));
                var a = e.el.find(".loading-bar");
                a.width(e.el.width()),
                t["default"].run.later(function() {
                    a.fadeOut(400, function() {
                        a.width(0)
                    })
                }, 1200),
                this.setProperties({
                    loading: !1,
                    loadingTimeout: null ,
                    loadingInterval: null
                })
            }
        }
    });
    e["default"] = i
}),
define("vine-ember/controllers/playlists/grid-list", ["exports", "vine-ember/controllers/explore/list", "vine-ember/mixins/launch-longform-viewer"], function(e, t, a) {
    var n = t["default"].extend(a["default"], {
        needs: ["application"],
        isMobile: Ember.computed.alias("controllers.application.isMobile"),
        actions: {
            launchLongformModal: function() {
                this.get("controllers.application").send("initBroker", "watch")
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/controllers/playlists", ["exports", "vine-ember/controllers/timeline"], function(e, t) {
    var a = t["default"].extend({
        itemController: "playlists/grid-list",
        shareFeatureSet: "playlist",
        shareObject: function() {
            var e = this.get("config.SECURE_HOSTNAME") + "/playlists/"
              , t = "Playlists on Vine"
              , a = encodeURIComponent(t)
              , n = {
                url: e,
                text: t,
                related: "vine"
            };
            return {
                shareUrl: e,
                description: t,
                facebookUrl: "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(e),
                tweetUrl: "https://twitter.com/share?" + $.param(n),
                emailUrl: "mailto:?subject=" + a + "&body=" + encodeURIComponent(t) + " " + encodeURIComponent(e)
            }
        }
        .property("config.SECURE_HOSTNAME")
    });
    e["default"] = a
}),
define("vine-ember/controllers/post-remixes", ["exports", "vine-ember/controllers/timeline", "vine-ember/mixins/top-recent"], function(e, t, a) {
    var n = t["default"].extend(a["default"]);
    e["default"] = n
}),
define("vine-ember/controllers/post", ["exports", "ember", "vine-ember/services/post", "vine-ember/mixins/launch-longform-viewer", "vine-ember/mixins/modernizr"], function(e, t, a, n, r) {
    var i = t["default"].ObjectController.extend(n["default"], r["default"], {
        needs: ["current-user", "playing-vine", "application"],
        currentUser: t["default"].computed.alias("controllers.current-user"),
        playingVine: t["default"].computed.alias("controllers.playing-vine"),
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        isIos: /iphone|ipod|ipad/i.test(window.navigator.userAgent),
        hasModal: t["default"].computed.alias("controllers.application.modal"),
        audioEnabledBinding: "controllers.playing-vine.audioEnabled",
        videoHeight: 0,
        loadingBroker: !1,
        showAttribution: !1,
        attributionImpressionLogged: !1,
        lastTimestampOfLongform: 0,
        isReplay: !1,
        commentsExpanded: !1,
        initWithComments: !1,
        videoContainerStyle: function() {
            var e = this.get("backgroundImageStyle");
            return this.get("videoHeight") && (e += " height: " + this.get("videoHeight") + "px;"),
            t["default"].String.htmlSafe(e)
        }
        .property("backgroundImageStyle", "videoHeight"),
        postIdClass: function() {
            return "post-" + this.get("postIdStr")
        }
        .property("postIdStr"),
        shouldHideRevine: function() {
            return this.get("isCurrentUser") && !this.get("reposts.count")
        }
        .property("isCurrentUser", "reposts.count"),
        hasDescriptionSection: function() {
            return this.get("description") || this.get("hasAudioAttribution") || this.get("hasSimilarPosts")
        }
        .property("description", "hasAudioAttribution", "hasSimilarPosts"),
        postChanged: function() {
            this.set("attributionImpressionLogged", !1)
        }
        .observes("postIdStr"),
        _doLike: function() {
            var e = this.get("postIdStr");
            this.get("liked") ? (this.set("liked", 0),
            a["default"].unLike(e).then(function() {
                this.set("likes.count", this.get("likes.count") - 1),
                this.decrementProperty("currentUser.likeCount")
            }
            .bind(this), function() {
                this.set("liked", 1)
            }
            .bind(this)),
            this.send("gaq", ["_trackEvent", "Post", "unlike"])) : (this.set("liked", 1),
            a["default"].like(e).then(function() {
                this.set("likes.count", this.get("likes.count") + 1),
                this.incrementProperty("currentUser.likeCount")
            }
            .bind(this), function() {
                this.set("liked", 0)
            }
            .bind(this)),
            this.send("gaq", ["_trackEvent", "Post", "like"]))
        },
        _doRevine: function() {
            if (!this.get("session").isCurrentUser(this.get("userIdStr"))) {
                var e = this.get("postIdStr");
                this.get("myRepostId") ? (a["default"].unRevine(this.get("postIdStr"), this.get("myRepostIdStr")).then(function() {
                    this.set("reposts.count", this.get("reposts.count") - 1),
                    this.setProperties({
                        myRepostId: void 0,
                        myRepostIdStr: void 0,
                        repost: void 0
                    })
                }
                .bind(this)),
                this.send("gaq", ["_trackEvent", "Post", "unrevine"])) : (a["default"].revine(e).then(function(e) {
                    this.set("reposts.count", this.get("reposts.count") + 1),
                    this.setProperties({
                        myRepostId: 1,
                        myRepostIdStr: e.repostIdStr,
                        repost: {
                            userIdStr: this.get("currentUser.userIdStr"),
                            username: this.get("currentUser.username")
                        }
                    })
                }
                .bind(this)),
                this.send("gaq", ["_trackEvent", "Post", "revine"]))
            }
        },
        _doComment: function() {
            var e = this.get("commentText");
            this.set("commentText", void 0),
            a["default"].comment(this.get("postIdStr"), e).then(function(t) {
                var a = t;
                a.comment = e,
                a.avatarUrl = this.get("currentUser.avatarUrl"),
                a.userIdStr = this.get("currentUser.userIdStr"),
                a.username = this.get("currentUser.username"),
                this.get("isPermalink") && 0 !== this.get("paginatedComments.pagination.count") || this.get("paginatedComments.posts").pushObject(a),
                this.incrementProperty("paginatedComments.pagination.count"),
                this.set("comments.dirty", !0)
            }
            .bind(this)),
            this.send("gaq", ["_trackEvent", "Post", "comment"])
        },
        _doUnfollowUser: function() {
            this.get("following") && (this.get("services.user").unFollow(this.get("userIdStr")).then(function() {
                this.set("following", 0),
                this.get("parentController.isTimeline") ? this.send("removeUsersPostsFromTimeline", this.get("userIdStr")) : this.transitionToRoute("index")
            }
            .bind(this)),
            this.send("gaq", ["_trackEvent", "User", "unfollow"]))
        },
        _doShowReportModal: function() {
            var e = this.get("model")
              , t = this.get("parentController.isTimeline") ? this.get("parentController") : null ;
            this.send("showModal", "report", {
                model: e,
                timeline: t
            })
        },
        postType: function() {
            var e = "post";
            return this.get("isPermalink") && (e = "permalink"),
            this.get("isMobile") && (e += " mobile"),
            e
        }
        .property("isPermalink", "isMobile"),
        actions: {
            like: function() {
                this.send("doAuthenticatedAction", "like this post", function() {
                    this._doLike()
                }
                .bind(this))
            },
            revine: function() {
                this.send("doAuthenticatedAction", "revine this post", this._doRevine.bind(this))
            },
            comment: function() {
                this.send("doAuthenticatedAction", "comment on this post", this._doComment.bind(this))
            },
            commentInListView: function() {
                this.send("openPostInListView", this.get("postIdStr"), !0)
            },
            viewExplicit: function() {
                this.toggleProperty("explicitContent"),
                this.get("playingVine").send("explicitChanged", !1),
                this.send("gaq", ["_trackEvent", "Post", "view explicit"])
            },
            unfollowUser: function() {
                this.send("doAuthenticatedAction", "unfollow this user", this._doUnfollowUser.bind(this))
            },
            deletePost: function() {
                if (window.confirm("Are you sure you want to delete this post?")) {
                    var e = this.get("postIdStr");
                    a["default"].deletePost(e).then(function() {
                        this.set("isDestroyed", !0),
                        this.get("isPermalink") || this.send("removePostFromTimeline", e)
                    }
                    .bind(this))
                }
            },
            openModalView: function(e) {
                return this.get("isMobile") && this.get("shortId") ? void this.transitionTo("permalink-post", this.get("shortId")) : void this.send("showModal", "post", {
                    content: e,
                    videoIndex: e.indexOf(this.get("model"))
                })
            },
            forceListView: function(e) {
                return this.get("isMobile") && this.get("shortId") ? void this.transitionTo("permalink-post", this.get("shortId")) : void this.send("openPostInListView", e)
            },
            share: function() {
                this.send("hideAttribution"),
                this.set("shareSheetOpen", !0),
                this.send("startShareCloseTimer")
            },
            hideShare: function() {
                this.set("shareSheetOpen", !1),
                this.send("stopShareCloseTimer")
            },
            startShareCloseTimer: function() {
                this.send("stopShareCloseTimer"),
                this.set("shareCloseTimer", window.setTimeout(function() {
                    this.set("shareSheetOpen", !1)
                }
                .bind(this), 2e3))
            },
            stopShareCloseTimer: function() {
                window.clearTimeout(this.get("shareCloseTimer"))
            },
            facebookShare: function() {
                var e = 670
                  , t = 350
                  , a = window.open(this.get("facebookUrl"), "fbWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            tweet: function() {
                var e = 550
                  , t = 380
                  , a = window.open(this.get("tweetUrl"), "tweetWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            vm: function() {
                var e = this.get("model");
                this.send("doAuthenticatedAction", "share this post with a friend", function() {
                    this.send("showModal", "vm", {
                        post: e
                    })
                }
                .bind(this))
            },
            showReportModal: function() {
                this.send("doAuthenticatedAction", "block or report", function() {
                    this._doShowReportModal()
                }
                .bind(this))
            },
            showAttribution: function() {
                this.send("hideShare"),
                this.get("attributionImpressionLogged") || this.send("logAttributionImpression"),
                this.setProperties({
                    showAttribution: !0,
                    attributionImpressionLogged: !0
                })
            },
            hideAttribution: function() {
                this.set("showAttribution", !1)
            },
            logAttributionImpression: function() {
                this.send("gaq", ["_trackEvent", "Attribution", "impression"])
            },
            logAttributionClick: function() {
                this.send("gaq", ["_trackEvent", "Attribution", "click"])
            },
            goToAttributionRoute: function() {
                var e = this.get("attributionRoute");
                e && (this.send("logAttributionClick"),
                this.transitionToRoute(e.name, e.param))
            },
            trackSimilarVinesEvent: function(e, t) {
                t = t || {},
                t.label = this.get("postType"),
                this.send("gaq", ["_trackEvent", "Similar Vines", e, t.label, t.value, !!t.nonInteraction])
            },
            toggleMobileInterstitial: function() {
                this.toggleProperty("shouldShowMobileInterstitial")
            },
            hideMobileInterstitial: function() {
                try {
                    var e = window.moment().add(3, "days").valueOf();
                    window.localStorage.setItem("hideMobileInterstitialUntil", e)
                } catch (t) {}
            },
            downloadVine: function() {
                this.send("goToStore", null , "mobile interstitial", {
                    apple: "https://itunes.apple.com/app/apple-store/id592447445?pt=1613620&ct=interstitialdownload&mt=8"
                })
            },
            openPostInApp: function() {
                window.location.href = "vine://post/" + this.get("postIdStr") + "?src=openInApp"
            },
            recordLastTimestampOfLongform: function(e) {
                var t = void 0
                  , a = void 0;
                Math.floor(e) === Math.floor(this.get("longform.duration")) ? (t = !0,
                a = 0) : (t = !1,
                a = Math.floor(e)),
                this.setProperties({
                    isReplay: t,
                    lastTimestampOfLongform: a
                })
            }
        }
    });
    e["default"] = i
}),
define("vine-ember/controllers/promo/camera", ["exports", "ember"], function(e, t) {
    var a = t["default"].Controller.extend({
        needs: ["application"],
        isPlaying: !1,
        heros: new Array(10),
        actions: {
            playVideo: function() {
                this.set("isPlaying", !0)
            },
            stopVideo: function() {
                this.set("isPlaying", !1)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/promo/music", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        thumbnailUrl: "https://v.cdn.vine.co/w/music/vine_music_hero_thumbnail.png",
        videoUrl: "https://v.cdn.vine.co/w/music/vine_music_hero.mp4",
        videoBlurUrl: "https://v.cdn.vine.co/w/music/vine_music_hero_blur.mp4",
        screenshot1: "https://v.cdn.vine.co/w/music/vine_music_screenshot1_1.mp4",
        screenshot2: "https://v.cdn.vine.co/w/music/vine_music_screenshot2_1.mp4",
        screenshot3: "https://v.cdn.vine.co/w/music/vine_music_screenshot3.mp4",
        screenshot4: "https://v.cdn.vine.co/w/music/vine_music_screenshot4.mp4",
        mobileScreenshot1: "https://v.cdn.vine.co/w/music/mobile_screenshot1_1.gif",
        mobileScreenshot2: "https://v.cdn.vine.co/w/music/mobile_screenshot2_1.gif",
        mobileScreenshot3: "https://v.cdn.vine.co/w/music/mobile_screenshot3.gif",
        mobileScreenshot4: "https://v.cdn.vine.co/w/music/mobile_screenshot4.gif",
        storeOverrides: {
            apple: "https://itunes.apple.com/app/apple-store/id592447445?pt=1613620&ct=music.vine.co&mt=8"
        },
        backgroundImageStyle: function() {
            if (this.get("thumbnailUrl")) {
                var e = 'background-image: url("' + this.get("thumbnailUrl") + '");';
                return t["default"].String.htmlSafe(e)
            }
        }
        .property("thumbnailUrl")
    });
    e["default"] = a
}),
define("vine-ember/controllers/related-videos/playing-vine", ["exports", "vine-ember/controllers/playing-vine"], function(e, t) {
    var a = t["default"].extend({
        name: "related-videos"
    });
    e["default"] = a
}),
define("vine-ember/controllers/reset-password", ["exports", "ember", "vine-ember/services/password"], function(e, t, a) {
    var n = t["default"].Controller.extend({
        queryParams: ["token"],
        token: null ,
        message: {
            text: "Enter a new password in the fields below."
        },
        actions: {
            resetPassword: function() {
                var e = this.getProperties("password1", "password2");
                if (e.password1 && e.password2) {
                    if (e.password1 !== e.password2)
                        return void this.set("message", {
                            text: "The passwords do not match.",
                            type: "error"
                        });
                    var t = this.get("token");
                    return t ? void a["default"].resetPassword(t, e.password1).then(function() {
                        this.send("resetPasswordSuccess")
                    }
                    .bind(this), function(e) {
                        this.send("resetPasswordError", e.response)
                    }
                    .bind(this)) : void this.set("message", {
                        text: "Your reset password token is invalid.",
                        type: "error"
                    })
                }
            },
            resetPasswordSuccess: function() {
                this.setProperties({
                    message: {
                        text: "Your password has been reset!"
                    },
                    submitted: !0
                })
            },
            resetPasswordError: function(e) {
                var t = "That's not a valid password.  Please try again.";
                e.error && (t = e.error),
                this.set("message", {
                    text: t,
                    type: "error"
                })
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/controllers/search/index", ["exports", "vine-ember/controllers/timeline"], function(e, t) {
    var a = t["default"].extend({
        timelineName: function() {
            return "Search: " + this.get("params.query")
        }
        .property("params.query"),
        iconStyle: function() {
            var e = "background-image: url('" + this.get("config.ASSETS_CDN_PREFIX") + "images/sidebar/search.svg'); background-size: 50%;";
            return Ember.String.htmlSafe(e)
        }
        .property("config.ASSETS_CDN_PREFIX"),
        _getModuleObject: function(e, t, a) {
            if (!e || !e.posts || 0 !== e.posts.length) {
                var n = e.pagination;
                n && n.set("size", a || t);
                var r = [];
                e && e.posts && (r = e.posts.slice(0, t));
                var i = encodeURIComponent(this.get("params").query).replace(/%20/g, "+");
                return {
                    posts: r,
                    pagination: n,
                    params: this.get("params"),
                    query: i
                }
            }
        },
        moduleUsers: function() {
            return this.get("isMobile") ? this._getModuleObject(this.get("users"), 3, 3) : this._getModuleObject(this.get("users"), 7, 9)
        }
        .property("users"),
        moduleTags: function() {
            return this.get("isMobile") ? this._getModuleObject(this.get("tags"), 3, 3) : this._getModuleObject(this.get("tags"), 12, 16)
        }
        .property("tags"),
        moduleVenues: function() {
            return this.get("isMobile") ? this._getModuleObject(this.get("venues"), 3, 3) : this._getModuleObject(this.get("venues"), 12, 16)
        }
        .property("venues")
    });
    e["default"] = a
}),
define("vine-ember/controllers/search/modules/tags", ["exports", "ember", "vine-ember/mixins/pagination"], function(e, t, a) {
    var n = t["default"].ObjectController.extend(a["default"], {
        paginatedProperty: "posts",
        endpoint: function() {
            return this.get("services.search").tags
        }
        .property()
    });
    e["default"] = n
}),
define("vine-ember/controllers/search/modules/users", ["exports", "ember", "vine-ember/mixins/pagination"], function(e, t, a) {
    var n = t["default"].ObjectController.extend(a["default"], {
        paginatedProperty: "posts",
        endpoint: function() {
            return this.get("services.search").users
        }
        .property()
    });
    e["default"] = n
}),
define("vine-ember/controllers/search/modules/venues", ["exports", "ember", "vine-ember/mixins/pagination"], function(e, t, a) {
    var n = t["default"].ObjectController.extend(a["default"], {
        paginatedProperty: "posts",
        endpoint: function() {
            return this.get("services.search").venues
        }
        .property()
    });
    e["default"] = n
}),
define("vine-ember/controllers/search/user", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        borderColorStyle: function() {
            if (this.get("profileBackground")) {
                var e = "#" + this.get("profileBackground").substr(2);
                return "box-shadow: 0 0 0 2px " + e
            }
        }
        .property("profileBackground")
    });
    e["default"] = a
}),
define("vine-ember/controllers/search/users", ["exports", "ember", "vine-ember/mixins/pagination"], function(e, t, a) {
    var n = t["default"].ObjectController.extend(a["default"], {
        paginatedProperty: "posts"
    });
    e["default"] = n
}),
define("vine-ember/controllers/search", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        displayQuery: function() {
            return decodeURIComponent(this.get("query"))
        }
        .property("query"),
        actions: {
            search: function() {
                var e = this.get("query");
                e && this.target.send("search", e)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/settings", ["exports", "ember", "vine-ember/mixins/url-reserve", "vine-ember/constants/index"], function(e, t, a, n) {
    function r(e) {
        if (Array.isArray(e)) {
            for (var t = 0, a = Array(e.length); t < e.length; t++)
                a[t] = e[t];
            return a
        }
        return Array.from(e)
    }
    var i = t["default"].Controller.extend(a["default"], {
        needs: ["current-user", "modal/login"],
        currentUser: t["default"].computed.alias("controllers.current-user"),
        passwordReset: null ,
        editingProfile: !1,
        editingEmail: !1,
        hasHellbanEnabled: t["default"].computed.bool("session.enableHellban"),
        bannedWords: new Set,
        savedWords: new Set,
        apiError: !1,
        apiMessage: "",
        disableEditor: t["default"].computed("editingEmail", "editingProfile", function() {
            return this.get("editingEmail") || this.get("editingProfile")
        }),
        init: function() {
            this._super(),
            this.get("currentUser.userIdStr") && this._getBannedWords()
        },
        onCurrentUserIdStr: function() {
            this._getBannedWords()
        }
        .observes("currentUser.userIdStr"),
        profileColors: function() {
            var e = ["0xff5967", "0xff794d", "0xffaf40", "0x68bf60", "0x33ccbf", "0x6db0f2", "0x5082e5", "0x7870cc", "0xf279ac"]
              , t = this.get("currentUser.profileBackground");
            return e.map(function(e) {
                return {
                    color: e,
                    isCurrentColor: t === e
                }
            })
        }
        .property("currentUser.profileBackground"),
        _getBannedWords: function() {
            var e = this;
            return this.get("services.safety").getBannedWords(this.get("currentUser.userIdStr")).then(function(t) {
                var a = t.data;
                e.set("bannedWords", new Set(a.records.map(function(e) {
                    return e.word
                })))
            })["catch"](function(t) {
                var a = t.response;
                e.set("apiError", !0),
                e.set("apiMessage", a.error)
            })
        },
        _banWords: function(e, t) {
            var a = this;
            return this.get("services.safety").banWords(this.get("currentUser.userIdStr"), Array.from(e)).then(function(e) {
                a.set("apiError", !1),
                a.set("apiMessage", n["default"].WORD_BAN_API_SUCCESS),
                t()
            })["catch"](function(e) {
                var t = e.response;
                a.set("bannedWords", a.get("savedWords")),
                a.set("apiError", !0),
                a.set("apiMessage", t.error)
            })
        },
        _unbanWords: function(e) {
            var t = this;
            return this.get("services.safety").unbanWords(this.get("currentUser.userIdStr"), Array.from(e)).then(function(e) {
                t.set("apiError", !1),
                t.set("apiMessage", n["default"].WORD_BAN_API_ERROR)
            })["catch"](function(e) {
                var a = e.response;
                t.set("bannedWords", t.get("savedWords")),
                t.set("apiError", !0),
                t.set("apiMessage", a.error)
            })
        },
        actions: {
            toggleEditProfile: function() {
                this.setProperties({
                    locationText: this.get("currentUser.location"),
                    descriptionText: this.get("currentUser.description"),
                    usernameText: this.get("currentUser.username")
                }),
                this.toggleProperty("editingProfile")
            },
            saveProfile: function() {
                var e = {
                    description: this.get("descriptionText"),
                    location: this.get("locationText"),
                    username: this.get("usernameText")
                };
                this.set("editingProfile", !1),
                this.get("currentUser").setProperties({
                    description: e.description,
                    location: e.location,
                    username: e.username
                }),
                this.get("services.user").setProfile(this.get("currentUser.userIdStr"), e)
            },
            resetPassword: function() {
                this.get("services.password").forgotPassword(this.get("currentUser.email")).then(function() {
                    this.set("passwordReset", "Please check your email for instructions.")
                }
                .bind(this))
            },
            toggleEditEmail: function() {
                this.setProperties({
                    emailText: this.get("currentUser.email"),
                    emailError: void 0
                }),
                this.toggleProperty("editingEmail"),
                this.get("editingEmail") && t["default"].run.scheduleOnce("afterRender", function() {
                    $(".setting.email input").focus()
                })
            },
            setEmail: function() {
                if (this.get("emailText") === this.get("currentUser.email"))
                    return void this.send("toggleEditEmail");
                var e = this.get("controllers.modal/login");
                e.send("setAction", "change_email"),
                e.set("successEvent", function() {
                    this.get("services.user").setEmail(this.get("currentUser.userIdStr"), this.get("emailText")).then(function() {
                        this.get("currentUser").set("email", this.get("emailText")),
                        this.set("editingEmail", !1)
                    }
                    .bind(this), function(e) {
                        this.set("emailError", e.response.error)
                    }
                    .bind(this))
                }
                .bind(this)),
                this.send("showModal", "login", {
                    attemptedAction: "change your email"
                })
            },
            togglePrivate: function() {
                var e, t = this.get("currentUser.private");
                e = t ? 0 : 1;
                var a;
                a = e ? "Are you sure you want to mark your posts as private?" : "Are you sure you want to mark your posts as public?",
                window.confirm(a) && (this.get("currentUser").set("private", e),
                this.get("services.user").setPrivate(this.get("currentUser.userIdStr"), e).then(null , function() {
                    this.get("currentUser").set("private", t)
                }
                .bind(this)))
            },
            toggleRemixDisabled: function() {
                var e = this
                  , t = this.get("currentUser.remixDisabled")
                  , a = t ? 0 : 1;
                if (a) {
                    var n = "Are you sure you want to disable remixes? You will always be credited when someone remixes your Vine.";
                    if (!window.confirm(n))
                        return
                }
                this.get("currentUser").set("remixDisabled", a),
                this.get("services.user").setRemixDisabled(this.get("currentUser.userIdStr"), a).then(null , function() {
                    return e.get("currentUser").set("remixDisabled", t)
                })
            },
            toggleHiddenTwitter: function() {
                var e = this.get("currentUser.hiddenTwitter")
                  , t = e ? 0 : 1;
                this.get("currentUser").set("hiddenTwitter", t),
                this.get("services.user").setHiddenTwitter(this.get("currentUser.userIdStr"), t)["catch"](function() {
                    this.get("currentUser").set("hiddenTwitter", e)
                }
                .bind(this))
            },
            setProfileBackground: function(e) {
                var t = this.get("currentUser.profileBackground");
                this.get("currentUser").set("profileBackground", e),
                this.get("services.user").setProfileBackground(this.get("currentUser.userIdStr"), e)["catch"](function() {
                    this.get("currentUser").set("profileBackground", t)
                }
                .bind(this))
            },
            onMessageClick: function() {
                this.setProperties({
                    apiError: !1,
                    apiMessage: ""
                })
            },
            banWords: function(e, t) {
                var a = new Set
                  , i = new Set
                  , d = this.get("bannedWords");
                return e.forEach(function(e) {
                    e.length > n["default"].WORD_BAN_LIMIT ? i.add(e) : d.has(e) || a.add(e)
                }),
                a.size ? (this.setProperties({
                    savedWords: d,
                    bannedWords: new Set([].concat(r(d), r(a)))
                }),
                this._banWords(a, function() {
                    return t(i)
                })) : void 0
            },
            unbanWords: function(e) {
                if (e.size) {
                    var t = this.get("bannedWords");
                    return this.setProperties({
                        savedWords: t,
                        bannedWords: new Set([].concat(r(t)).filter(function(t) {
                            return !e.has(t)
                        }))
                    }),
                    this._unbanWords(e)
                }
            }
        }
    });
    e["default"] = i
}),
define("vine-ember/controllers/splash/playing-vine", ["exports", "vine-ember/controllers/playing-vine"], function(e, t) {
    var a = t["default"].extend({
        name: "splash"
    });
    e["default"] = a
}),
define("vine-ember/controllers/splash/post", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        needs: "splash/playing-vine",
        playingVine: t["default"].computed.alias("controllers.splash/playing-vine")
    });
    e["default"] = a
}),
define("vine-ember/controllers/splash", ["exports", "ember", "vine-ember/mixins/fullscreen", "vine-ember/mixins/pagination", "vine-ember/mixins/shuffle"], function(e, t, a, n, r) {
    var i = t["default"].ArrayController.extend(n["default"], a["default"], r["default"], {
        itemController: "splash/post",
        needs: ["application", "splash/playing-vine"],
        playingVine: t["default"].computed.alias("controllers.splash/playing-vine"),
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        isFullscreen: !0,
        videoIndex: 0,
        init: function() {
            this._super(),
            this.fetchData()
        },
        fetchData: function() {
            var e = this.get("services.list");
            e.homepage().then(function(t) {
                this.setProperties({
                    content: this.shuffle(t.posts),
                    pagination: t.pagination,
                    endpoint: e.homepage.bind(e)
                })
            }
            .bind(this))
        },
        actions: {
            forceMute: function() {
                this.get("playingVine").set("forceMute", !0)
            },
            restoreMute: function() {
                this.get("playingVine").set("forceMute", !1)
            }
        }
    });
    e["default"] = i
}),
define("vine-ember/controllers/timeline", ["exports", "ember", "vine-ember/mixins/pagination", "vine-ember/mixins/fullscreen", "vine-ember/mixins/launch-longform-viewer"], function(e, t, a, n, r) {
    var i = t["default"].ArrayController.extend(a["default"], n["default"], r["default"], {
        queryParams: ["mode"],
        itemController: "post",
        needs: ["application", "playing-vine", "splash/playing-vine"],
        playingVine: t["default"].computed.alias("controllers.playing-vine"),
        headerPlayingVine: t["default"].computed.alias("controllers.splash/playing-vine"),
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        currentYear: t["default"].computed.alias("controllers.application.currentYear"),
        isTimeline: !0,
        hasToggles: !1,
        lastMode: "",
        mode: "",
        videoIndex: 0,
        placeholderTemplate: function() {
            return this.get("isEmpty") ? "timelines/placeholders/empty" : void 0
        }
        .property("isEmpty"),
        playingChanged: function() {
            var e = this.get("playingVine.playing.post")
              , t = this.indexOf(e);
            t = -1 === t ? 0 : t,
            this.set("videoIndex", t)
        }
        .observes("playingVine.playing"),
        modeChanged: function() {
            if (this.get("mode") !== this.get("lastMode")) {
                var e = this.get("videoIndex");
                if (this.set("lastMode", "mode"),
                this.get("playingVine").send("reset"),
                this.set("videoIndex", e),
                this.get("isTvMode")) {
                    var t = window.localStorage.getItem("autoplayOff");
                    t = JSON.parse(t),
                    t || this.send("bindFullscreenListener"),
                    this.get("playingVine.player") && this.get("playingVine.player").setMuted(!1)
                } else if (this.send("unbindFullscreenListener"),
                this.get("playingVine.player")) {
                    var a = "true" === window.localStorage.post_page_volume;
                    this.get("playingVine.player").setMuted(!a)
                }
            }
        }
        .observes("mode").on("init"),
        isGridMode: function() {
            return !this.get("isListMode") && !this.get("isTvMode")
        }
        .property("mode"),
        isListMode: function() {
            return "list" === this.get("mode")
        }
        .property("mode"),
        isTvMode: function() {
            return "tv" === this.get("mode")
        }
        .property("mode"),
        actions: {
            removePostFromTimeline: function(e) {
                var t = this.get("content").findBy("postIdStr", e);
                this.get("content").removeObject(t)
            },
            removeUsersPostsFromTimeline: function(e) {
                var t = this.get("content").filterBy("userIdStr", e);
                this.get("content").removeObjects(t)
            },
            openPostInListView: function(e, t) {
                this.forEach(function(a, n) {
                    a.get("postIdStr") === e ? (this.set("videoIndex", n),
                    a.set("initWithComments", !!t)) : a.set("initWithComments", !1)
                }
                .bind(this)),
                this.transitionTo({
                    queryParams: {
                        mode: "list"
                    }
                })
            }
        }
    });
    e["default"] = i
}),
define("vine-ember/controllers/timelines/headers/venue", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        backgroundImageUrl: function() {
            var e = 3e3
              , t = 300
              , a = {
                size: [e, t].join(","),
                key: this.get("config.MAPQUEST_API_KEY"),
                zoom: 16,
                center: [this.get("lat"), this.get("lng")].join(","),
                scalebar: !1
            }
              , n = [];
            Object.keys(a).forEach(function(e) {
                n.push(e + "=" + a[e])
            });
            var r = "https://open.mapquestapi.com/staticmap/v4/getmap?" + n.join("&");
            return r
        }
        .property("lat", "lng"),
        backgroundImageStyle: function() {
            var e = 'background-image: url("' + this.get("backgroundImageUrl") + '")';
            return t["default"].String.htmlSafe(e)
        }
        .property("backgroundImageUrl")
    });
    e["default"] = a
}),
define("vine-ember/controllers/trends/footer", ["exports", "ember", "vine-ember/mixins/shuffle"], function(e, t, a) {
    var n = t["default"].ArrayController.extend(a["default"], {
        needs: ["application"],
        itemController: "playlists/grid-list",
        init: function() {
            this._super();
            var e = this.get("controllers.application.lastTransition.params.trend.vanity")
              , a = this.get("services.list");
            return a.trends({
                sort: "top"
            }, {
                size: 9
            }).then(function(n) {
                var r = n.posts.filter(function(t) {
                    return t.vanityUrl !== e
                });
                r = this.shuffle(r).slice(0, 3),
                t["default"].RSVP.all(r.map(function(e) {
                    return e.set("isTrend", !0),
                    a.listPosts({
                        list_id: e.timelineIdStr
                    }, {
                        size: 10
                    }).then(function(t) {
                        var a = t.posts;
                        return a.pagination = t.pagination,
                        a.list = e,
                        a
                    })
                })).then(function(e) {
                    this.set("model", e)
                }
                .bind(this))
            }
            .bind(this))
        }
    });
    e["default"] = n
}),
define("vine-ember/controllers/trends", ["exports", "vine-ember/controllers/playlists", "vine-ember/mixins/top-recent"], function(e, t, a) {
    var n = t["default"].extend(a["default"], {
        needs: ["application", "splash/playing-vine"],
        playingVine: Ember.computed.alias("controllers.splash/playing-vine"),
        isMobile: Ember.computed.alias("controllers.application.isMobile"),
        sort: "recent",
        shareObject: function() {
            var e = this.get("config.SECURE_HOSTNAME") + "/trends/"
              , t = "Trends on Vine"
              , a = this.get("header.description")
              , n = encodeURIComponent(["Trends on Vine " + e, a].join("\n\n"))
              , r = {
                url: e,
                text: "Watch the stories behind Vine's most influential Trends",
                related: "vine"
            };
            return {
                shareUrl: e,
                description: t,
                facebookUrl: "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(e),
                tweetUrl: "https://twitter.com/share?" + $.param(r),
                emailUrl: "mailto:?subject=" + encodeURIComponent(t) + "&body=" + n
            }
        }
        .property("config.SECURE_HOSTNAME", "header.description"),
        actions: {
            subscribeEmail: function() {
                var e = this.get("email");
                if (e) {
                    var t = "a520f286ef";
                    this.get("services.api").ajax("/mailchimp/subscribe/" + t, "post", {
                        headers: {
                            "Content-Type": "application/json"
                        },
                        data: JSON.stringify({
                            email_address: e,
                            status: "subscribed"
                        })
                    }).then(function() {
                        this.set("emailSubscribed", !0)
                    }
                    .bind(this))["catch"](function(e) {
                        "Member Exists" === e.response.title ? this.set("emailSubscribed", !0) : this.set("error", e.response.detail)
                    }
                    .bind(this))
                }
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/controllers/unsubscribe-vm", ["exports", "ember"], function(e, t) {
    var a = t["default"].ObjectController.extend({
        actions: {
            unsubscribe: function() {
                this.get("services.conversation").unsubscribeEmail(this.get("token")).then(function() {
                    this.setProperties({
                        confirmed: !0,
                        unsubscribed: !0
                    })
                }
                .bind(this), function() {
                    this.set("confirmed", !0)
                }
                .bind(this))
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/controllers/user", ["exports", "vine-ember/controllers/timeline"], function(e, t) {
    var a = t["default"].extend({
        isUserTimeline: !0,
        placeholderTemplate: function() {
            return this.get("user.blocked") ? "timelines/placeholders/blocked" : this.get("user.private") && !this.get("user.hasAccess") ? "timelines/placeholders/private" : this._super()
        }
        .property("user.blocked", "user.private", "user.hasAccess"),
        hideUserStats: function() {
            return this.get("user.blocked") || this.get("user.private")
        }
        .property("user.blocked", "user.private"),
        sessionChanged: function() {
            this.get("services.user").profile({
                user_id: this.get("user.userIdStr")
            }).then(function(e) {
                this.set("user", e)
            }
            .bind(this))
        }
        .observes("session.userId"),
        noPostsMessage: function() {
            return this.get("user.isCurrentUser") ? "You haven't posted anything yet." : void 0
        }
        .property("user.isCurrentUser"),
        isUnfollowedPrivateAccount: function() {
            return !this.get("isCurrentUserOrFollowing") && !!this.get("user.private")
        }
        .property("isCurrentUserOrFollowing", "user.private"),
        isBlocked: function() {
            return !!this.get("user.blocked")
        }
        .property("user.blocked"),
        showStats: function() {
            return !this.get("user.blocked") && !this.get("isUnfollowedPrivateAccount")
        }
        .property("user.blocked", "isUnfollowedPrivateAccount"),
        isCurrentUserOrFollowing: function() {
            return this.get("session.userId") === this.get("user.userIdStr") || this.get("user.following") && !this.get("user.followRequested")
        }
        .property("session.userId", "user.userIdStr", "user.isFollowing", "user.isFollowRequested")
    });
    e["default"] = a
}),
define("vine-ember/controllers/vm-post", ["exports", "ember", "vine-ember/services/conversation"], function(e, t, a) {
    var n = t["default"].ObjectController.extend({
        needs: ["playing-vine", "application"],
        playingVine: t["default"].computed.alias("controllers.playing-vine"),
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        isPermalink: !0,
        profileColor: function() {
            return this.get("user") ? this.get("user.backgroundColor") ? this.get("user.backgroundColor") : "#333333" : "#00bf8f"
        }
        .property("user.backgroundColor"),
        textColorStyle: function() {
            var e = "color: " + this.get("profileColor");
            return t["default"].String.htmlSafe(e)
        }
        .property("profileColor"),
        backgroundColorStyle: function() {
            var e = "background-color: " + this.get("profileColor");
            return t["default"].String.htmlSafe(e)
        }
        .property("profileColor"),
        canOpenInApp: function() {
            var e = /android|iphone|ipod|ipad/i.test(window.navigator.userAgent);
            return !this.get("expired") && !this.get("error") && this.get("session.isAuthenticated") && e
        }
        .property("expired", "error", "session.isAuthenticated"),
        recipientUser: function() {
            return {
                username: this.get("recipient")
            }
        }
        .property("recipient"),
        actions: {
            resendLink: function() {
                a["default"].refreshToken(this.get("token")).then(function() {
                    this.set("confirmation", {
                        resent: !0
                    })
                }
                .bind(this), function(e) {
                    this.set("confirmation", {
                        error: {
                            message: e.response.error
                        }
                    })
                }
                .bind(this))
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/helpers/commaize-number", ["exports", "ember"], function(e, t) {
    var a = new RegExp("\\B(?=(\\d{3})+(?!\\d))","g")
      , n = t["default"].Handlebars.makeBoundHelper(function(e) {
        return Math.round(e).toString().replace(a, ",")
    });
    e["default"] = n
}),
define("vine-ember/helpers/format-count", ["exports", "ember"], function(e, t) {
    var a = new RegExp("\\B(?=(\\d{3})+(?!\\d))","g")
      , n = t["default"].Handlebars.makeBoundHelper(function(e, t) {
        if (t = t && t.hash ? t.hash : {},
        t.pluralText = t.pluralText ? " " + t.pluralText : "",
        t.singleText = t.singleText ? " " + t.singleText : "",
        e) {
            if (1 === e)
                return "1" + t.singleText;
            if (1e3 > e)
                return e + t.pluralText;
            if (1e4 > e)
                return Math.round(e).toString().replace(a, ",") + t.pluralText;
            if (1e6 > e)
                return Math.floor(e / 100) / 10 + "K" + t.pluralText;
            var n = e / 1e6;
            return Math.floor(10 * n) / 10 + "M" + t.pluralText
        }
        return t.zeroText ? t.zeroText : 0
    });
    e["default"] = n
}),
define("vine-ember/helpers/format-date", ["exports", "ember"], function(e, t) {
    var a = t["default"].Handlebars.makeBoundHelper(function(e, t) {
        var a = moment().utcOffset()
          , n = moment(e).utc(a)
          , r = n.format("ll");
        return t.hash.format ? n.format(t.hash.format) : (moment.locale("en", {
            relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "%ds ago",
                m: "%dm ago",
                mm: "%dm ago",
                h: "%dh ago",
                hh: "%dh ago",
                d: "%dd ago",
                dd: "%dd ago",
                M: r,
                MM: r,
                y: r,
                yy: r
            }
        }),
        n.fromNow(!0))
    });
    e["default"] = a
}),
define("vine-ember/helpers/html-linebreak", ["exports", "ember"], function(e, t) {
    var a = t["default"].Handlebars.makeBoundHelper(function(e) {
        if (e) {
            var a = t["default"].Handlebars.Utils.escapeExpression(e).replace(/(\r\n|\n|\r)/gm, "<br>");
            return new t["default"].Handlebars.SafeString(a)
        }
    });
    e["default"] = a
}),
define("vine-ember/helpers/max-count", ["exports", "ember"], function(e, t) {
    var a = t["default"].Handlebars.makeBoundHelper(function(e, t) {
        var a, n = "";
        e ? !t.hash.max || e < t.hash.max ? a = e : t.hash.display ? (a = t.hash.display,
        n = "+") : (a = t.hash.max,
        n = "+") : a = 0;
        var r = "";
        return t.hash.unit && (r = t.hash.unit,
        a > 1 && (r = t.hash.unit + "s")),
        a + n + " " + r
    });
    e["default"] = a
}),
define("vine-ember/helpers/replace-emoji", ["exports", "ember", "emojify"], function(e, t, a) {
    var n = t["default"].Handlebars.makeBoundHelper(function(e) {
        return new t["default"].Handlebars.SafeString(a["default"](t["default"].Handlebars.Utils.escapeExpression(e)),!0)
    });
    e["default"] = n
}),
define("vine-ember/initializers/app-version", ["exports", "vine-ember/config/environment", "ember"], function(e, t, a) {
    var n = a["default"].String.classify
      , r = !1;
    e["default"] = {
        name: "App Version",
        initialize: function(e, i) {
            if (!r) {
                var d = n(i.toString());
                a["default"].libraries.register(d, t["default"].APP.version),
                r = !0
            }
        }
    }
}),
define("vine-ember/initializers/authentication", ["exports", "vine-ember/services/authentication/main"], function(e, t) {
    e["default"] = {
        name: "authentication",
        initialize: function(e, a) {
            a.deferReadiness(),
            t["default"].setup(e, a, {
                serverTokenEndpoint: "/users/authenticate",
                routeAfterLogin: "index"
            })["finally"](function() {
                a.advanceReadiness()
            })
        }
    }
}),
define("vine-ember/initializers/export-application-global", ["exports", "ember", "vine-ember/config/environment"], function(e, t, a) {
    function n() {
        var e = arguments[1] || arguments[0];
        if (a["default"].exportApplicationGlobal !== !1) {
            var n, r = a["default"].exportApplicationGlobal;
            n = "string" == typeof r ? r : t["default"].String.classify(a["default"].modulePrefix),
            window[n] || (window[n] = e,
            e.reopen({
                willDestroy: function() {
                    this._super.apply(this, arguments),
                    delete window[n]
                }
            }))
        }
    }
    e.initialize = n,
    e["default"] = {
        name: "export-application-global",
        initialize: n
    }
}),
define("vine-ember/initializers/scribe", ["exports", "vine-scribe"], function(e, t) {
    e["default"] = {
        name: "scribe",
        initialize: function(e, a) {
            var n = new t.client({
                host: "/api",
                client: window.APP_CONFIG.VINE_CLIENT
            });
            a.register("scribe:client", n, {
                instantiate: !1,
                singleton: !0
            }),
            Ember.$.each(["model", "controller", "view", "component", "route"], function(e, t) {
                a.inject(t, "scribe", "scribe:client")
            })
        }
    }
}),
define("vine-ember/initializers/server-config", ["exports"], function(e) {
    e["default"] = {
        name: "serverconfig",
        initialize: function(e, t) {
            var a = Ember.Object.extend(window.APP_CONFIG);
            t.register("app_config:config", a.create(), {
                instantiate: !1,
                singleton: !0
            }),
            Ember.$.each(["model", "controller", "view", "route", "component"], function(e, a) {
                t.inject(a, "config", "app_config:config")
            })
        }
    }
}),
define("vine-ember/initializers/services", ["exports", "vine-ember/utils/service-loader"], function(e, t) {
    e["default"] = {
        name: "services",
        initialize: function(e, a) {
            var n = t["default"].create();
            a.register("services:loader", n, {
                instantiate: !1,
                singleton: !0
            }),
            Ember.$.each(["model", "controller", "view", "component", "route"], function(e, t) {
                a.inject(t, "services", "services:loader")
            })
        }
    }
}),
define("vine-ember/mixins/color-brightener", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        brightenColor: function(e, t) {
            var a = parseInt(e, 16)
              , n = (a >> 16) + t
              , r = (a >> 8 & 255) + t
              , i = (255 & a) + t;
            return (16777216 + 65536 * (255 > n ? 1 > n ? 0 : n : 255) + 256 * (255 > r ? 1 > r ? 0 : r : 255) + (255 > i ? 1 > i ? 0 : i : 255)).toString(16).slice(1)
        }
    });
    e["default"] = a
}),
define("vine-ember/mixins/continuous-play-view", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        postChanged: function() {
            this.send("playCurrentVine")
        }
        .observes("post.postIdStr"),
        _getVideoObject: function() {
            return {
                post: this.get("post"),
                el: this.$(".video-container")
            }
        },
        actions: {
            playCurrentVine: function() {
                if (this.get("post") && this._getVideoObject().el) {
                    var e = this.get("controller.playingVine") || this.get("post.playingVine");
                    e.send("play", this._getVideoObject())
                }
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/mixins/fullscreen", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        needs: ["application", "playing-vine"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        playingVine: t["default"].computed.alias("controllers.playing-vine"),
        fullscreenAvailable: !0,
        videoIndex: 0,
        autoplayOn: !JSON.parse(window.localStorage.getItem("autoplayOff")),
        currentPost: function() {
            var e = this.objectAt(this.get("videoIndex"));
            if (e)
                return e
        }
        .property("content.length", "videoIndex"),
        positionIndex: function() {
            return this.get("videoIndex") + 1
        }
        .property("videoIndex"),
        totalPosts: function() {
            return this.get("pagination.count") || this.get("length")
        }
        .property("pagination.count", "length"),
        prevAvailable: function() {
            return this.get("content") ? this.get("videoIndex") > 0 || 0 === this.get("videoIndex") && !this.get("pagination.nextPage") : !1
        }
        .property("videoIndex"),
        nextAvailable: function() {
            return this.get("content") ? this.get("videoIndex") < this.get("content").length - 1 || !this.get("pagination.nextPage") && this.get("videoIndex") === this.get("content").length - 1 : !1
        }
        .property("videoIndex"),
        indexChanged: function() {
            for (var e = 2, t = 1; e >= t; ++t) {
                var a = this.objectAt(this.get("videoIndex") + t);
                a && (this.get("playingVine").send("queuePreload", a),
                $('<img src="' + a.get("secureThumbnailUrl") + '">'))
            }
            this.get("pagination.nextPage") && this.get("videoIndex") === Math.floor(this.get("content").length / 2) && this.send("nextPage")
        }
        .observes("videoIndex"),
        actions: {
            openFullscreen: function() {
                this.transitionToRoute({
                    queryParams: {
                        mode: "tv"
                    }
                })
            },
            closeFullscreen: function() {
                this.transitionToRoute({
                    queryParams: {
                        mode: ""
                    }
                })
            },
            navLeft: function() {
                return this.send("gaq", ["_trackEvent", "TV Mode", "navigate left"]),
                this.get("pagination.nextPage") || 0 !== this.get("videoIndex") ? void (this.get("videoIndex") > 0 && this.decrementProperty("videoIndex")) : void this.set("videoIndex", this.get("content").length - 1)
            },
            navRight: function() {
                return this.send("gaq", ["_trackEvent", "TV Mode", "navigate right"]),
                this.get("pagination.nextPage") || this.get("videoIndex") !== this.get("content").length - 1 ? void (this.get("videoIndex") < this.get("content").length - 1 && this.incrementProperty("videoIndex")) : void this.set("videoIndex", 0)
            },
            like: function() {
                this.send("gaq", ["_trackEvent", "TV Mode", "like post"]),
                this.get("currentPost").send("like")
            },
            showAttribution: function() {
                this.get("currentPost").send("showAttribution")
            },
            hideAttribution: function() {
                this.get("currentPost").send("hideAttribution")
            },
            logAttributionClick: function() {
                this.get("currentPost").send("logAttributionClick")
            },
            viewExplicit: function() {
                this.get("currentPost").send("viewExplicit")
            },
            togglePlay: function() {
                this.get("playingVine").send("togglePlay")
            },
            toggleMute: function() {
                this.get("playingVine").send("toggleMute")
            },
            toggleAutoplay: function() {
                this.get("autoplayOn") ? this.send("turnOffAutoplay") : this.send("turnOnAutoplay")
            },
            bindFullscreenListener: function() {
                this.get("playingVine").set("endedEvent", function() {
                    this.send("navRight")
                }
                .bind(this)),
                this.get("playingVine").set("continuous", !0)
            },
            unbindFullscreenListener: function() {
                this.get("playingVine").setProperties({
                    endedEvent: void 0,
                    continuous: !1
                })
            },
            turnOffAutoplay: function() {
                this.set("autoplayOn", !1),
                window.localStorage.setItem("autoplayOff", "true"),
                this.send("unbindFullscreenListener")
            },
            turnOnAutoplay: function() {
                this.set("autoplayOn", !0),
                window.localStorage.setItem("autoplayOff", "false"),
                this.send("bindFullscreenListener")
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/mixins/launch-longform-viewer", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        needs: ["application"],
        actions: {
            launchLongformViewer: function(e, t) {
                this.send("gaq", ["_trackEvent", "Post", "watch more"]);
                var a = this.get("controllers.application");
                return a.get("isMobile") ? void (window.location.href = e.videoUrl) : (a.set("currentLongform", e, t),
                void a.send("initBroker", "watching", e, t))
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/mixins/message-broker", ["exports", "ember"], function(e, t) {
    var a = 1e3
      , n = t["default"].Mixin.create({
        connectionTimeoutId: null ,
        frame: null ,
        transitionFrame: null ,
        upload: !1,
        watching: !1,
        uploadMinimized: !1,
        watchingMinimized: !1,
        showWatching: !1,
        showUpload: !1,
        isMessageBrokerOpen: !1,
        preMessageScrollDepth: 0,
        needs: ["playing-vine"],
        init: function() {
            if (this._super(),
            this.set("iFrameHost", "localhost" === window.location.hostname ? "//localhost:3000" : ""),
            this.get("hasUpload")) {
                var e = this.get("canAnimateSVG") ? "images/loading.svg" : "images/loading_white-3fcec36654ac22d5facfa58ed4fc5c16.gif";
                (new window.Image).src = this.get("config.ASSETS_CDN_PREFIX") + e
            }
        },
        sendMessage: function(e) {
            var t = void 0;
            t = "string" == typeof e ? {
                message: e
            } : e,
            this.get("frame").contentWindow.postMessage(t, this.get("config.WWW2_HOST"))
        },
        setupMessageBroker: function(e, t, a) {
            this.set("frame", $(".iframe-modal-" + e)[0]),
            this.set("transitionFrame", $(".iframe-modal")[0]),
            this.set("preMessageScrollDepth", window.pageYOffset),
            this.set("messageReceivedHandler", this.messageReceived = this.messageReceivedFactory(e, t).bind(this)),
            window.addEventListener("message", this.get("messageReceivedHandler"), !1),
            a && (this.set("brokerController", a),
            a.set("loadingBroker", !0)),
            this.initConnection()
        },
        teardownMessageBroker: function(e) {
            var a = this;
            window.removeEventListener("message", this.get("messageReceivedHandler")),
            this.set(e + "Minimized", !1),
            this.set("show" + (e.charAt(0).toUpperCase() + e.slice(1)), !1),
            this.set("isMessageBrokerOpen", !1),
            t["default"].run.scheduleOnce("afterRender", this, function() {
                var t = function n() {
                    a.set(e, !1),
                    a.get("transitionFrame").removeEventListener("transitionend", n),
                    a.get("brokerController") && !a.get("watching") && a.set("brokerController.video", 0)
                }
                ;
                a.get("transitionFrame").addEventListener("transitionend", t),
                window.scrollTo(0, a.get("preMessageScrollDepth"))
            })
        },
        createDummyController: function() {
            return {
                send: function() {},
                set: function() {}
            }
        },
        normalizeData: function(e) {
            return "string" == typeof e ? {
                message: e
            } : e
        },
        messageReceivedFactory: function(e, t) {
            var a = this;
            return function(n) {
                if (n.origin !== a.get("config.WWW2_HOST"))
                    return void console.error(n.origin + " is not an approved origin.");
                var r = a.normalizeData(n.data)
                  , i = r.message
                  , d = a.get("brokerController") || a.createDummyController();
                if ("pong" === i)
                    !function() {
                        var n = function r() {
                            a.set("isMessageBrokerOpen", !0),
                            a.get("controllers.playing-vine").send("pause"),
                            d.set("loadingBroker", !1),
                            a.get("transitionFrame").removeEventListener("transitionend", r)
                        }
                        ;
                        clearTimeout(a.get("connectionTimeoutId")),
                        a.set("show" + (e.charAt(0).toUpperCase() + e.slice(1)), !0),
                        a.get("transitionFrame").addEventListener("transitionend", n),
                        a.sendMessage({
                            message: "session",
                            sessionId: localStorage.authToken
                        }),
                        t && a.sendMessage({
                            message: "data",
                            brokerData: t
                        })
                    }();
                else if ("close" === i) {
                    a.teardownMessageBroker(e);
                    var c = r.timestamp || 0;
                    d.send("recordLastTimestampOfLongform", c)
                } else
                    "minimize" === i ? (a.set(e + "Minimized", !0),
                    a.set("isMessageBrokerOpen", !1)) : "maximize" === i ? (a.set(e + "Minimized", !1),
                    a.set("isMessageBrokerOpen", !0)) : "liked" === i ? d.send("like") : "report" === i && d.send("showReportModal")
            }
        },
        initConnection: function() {
            this.sendMessage("ping"),
            this.set("connectionTimeoutId", setTimeout(this.initConnection.bind(this), a))
        },
        actions: {
            initBroker: function(e, a, n) {
                var r = this;
                this.set(e, !0),
                t["default"].run.scheduleOnce("afterRender", this, function() {
                    r.setupMessageBroker(e, a, n)
                })
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/mixins/modernizr", ["exports", "ember"], function(e, t) {
    var a = "http://www.w3.org/2000/svg";
    e["default"] = t["default"].Mixin.create({
        canAnimateSVG: function() {
            return !!document.createElementNS && /SVGAnimate/.test(Object.prototype.toString.call(document.createElementNS(a, "animate")))
        }
        .property("canAnimateSVG")
    })
}),
define("vine-ember/mixins/pagination", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        paginationLoading: !1,
        paginatedProperty: "content",
        page: 1,
        shouldShowPaginationLoading: !0,
        pageClass: function() {
            return "page-" + this.get("page")
        }
        .property("page"),
        isEmpty: function() {
            return this.get(this.get("paginatedProperty")) ? 0 === this.get(this.get("paginatedProperty")).length : !0
        }
        .property("model"),
        modelChanged: function() {
            this.set("page", 1)
        }
        .observes("model"),
        _appendObjects: function(e) {
            this.get(this.get("paginatedProperty")).pushObjects(e)
        },
        actions: {
            nextPage: function(e) {
                if (!this.get("paginationLoading") && (e || this.get("pagination.nextPage"))) {
                    var t = this.get("pagination")
                      , a = this.get("params") || {};
                    (this.get("queryParams") || []).contains("sort") && (a.sort = this.get("sort")),
                    this.set("paginationLoading", !0),
                    this.get("shouldShowPaginationLoading") && this.send("showLoading");
                    var n = {
                        page: t.nextPage,
                        anchor: t.anchorStr,
                        size: t.size
                    };
                    this.get("endpoint")(a, n).then(function(e) {
                        this._appendObjects(e.posts),
                        this.set("pagination", e.pagination),
                        this.incrementProperty("page"),
                        this.get("shouldShowPaginationLoading") && this.send("hideLoading")
                    }
                    .bind(this))["finally"](function() {
                        this.set("paginationLoading", !1)
                    }
                    .bind(this))
                }
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/mixins/set-comments-to-expanded-height", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        $setCommentsToExpandedHeight: function() {
            var e = this.$(".comments-container");
            if (!e)
                return void this.set("controller.commentsExpanded", !1);
            var t = [".social-context", ".user-info-new", ".post-description", ".time-location", ".post-engagement", ".engagement-metrics", ".comment"]
              , a = 180
              , n = 0;
            this.get("controller.commentsExpanded") || (t.forEach(function(e) {
                n += this.$(e).height()
            }
            .bind(this)),
            n = this.$(".card-content").height() - n - a),
            e.css("height", n + "px")
        }
    });
    e["default"] = a
}),
define("vine-ember/mixins/shuffle", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        shuffle: function(e) {
            for (var t, a, n = e.length; n; t = Math.floor(Math.random() * n),
            a = e[--n],
            e[n] = e[t],
            e[t] = a)
                ;
            return e
        }
    });
    e["default"] = a
}),
define("vine-ember/mixins/top-recent", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        queryParams: ["sort"],
        sort: "top",
        isRecent: function() {
            return "recent" === this.get("sort")
        }
        .property("sort")
    });
    e["default"] = a
}),
define("vine-ember/mixins/upload", ["exports", "ember"], function(e, t) {
    e["default"] = t["default"].Mixin.create({
        hasUpload: function() {
            return this.get("session.enableWebLongformUpload")
        }
        .property("session.enableWebLongformUpload"),
        actions: {
            launchUpload: function() {
                this.send("initBroker", "upload", {
                    maxLongformDuration: this.get("session.maxLongformDuration")
                }),
                this.send("gaq", ["_trackEvent", "Upload", "click"])
            }
        }
    })
}),
define("vine-ember/mixins/url-reserve", ["exports", "ember", "vine-ember/services/url"], function(e, t, a) {
    var n = t["default"].Mixin.create({
        message: {
            text: "Enter your desired custom URL.  Please note,\nyou will not be able to change this."
        },
        urlNotReady: function() {
            return this.get("available") && this.get("url") ? void 0 : "disabled"
        }
        .property("available", "url"),
        needsFaq: function() {
            if (!this.get("error"))
                return !1;
            var e = this.get("errorCode");
            return 256 === e || 258 === e
        }
        .property("error"),
        actions: {
            setUrl: function() {
                a["default"].suggestions(this.get("session.userId")).then(function(e) {
                    var t = e.reservations
                      , a = e.suggestions;
                    t.length > 0 ? this.set("reservations", t) : a.length > 0 ? (this.set("url", a[0]),
                    this.set("available", !0)) : this.set("url", void 0),
                    this.set("reservingUrl", !0)
                }
                .bind(this))
            },
            hideUrlForm: function() {
                this.set("reservingUrl", !1),
                this.send("resetForm"),
                this.send("resetMessages")
            },
            urlAvailable: function() {
                this.set("available", !0)
            },
            loadSuggestion: function(e) {
                this.set("url", e),
                this.setProperties({
                    url: e,
                    suggestion: void 0,
                    reservations: void 0
                })
            },
            fetchSuggestion: function() {
                var e = "Sorry! This URL is not available.  Please try another.";
                a["default"].suggestions(this.get("session.userId")).then(function(t) {
                    t.suggestions.length > 0 ? (e += " Or use one of the suggestions below",
                    this.setProperties({
                        suggestions: t.suggestions,
                        error: e
                    })) : this.set("error", e)
                }
                .bind(this))
            },
            reserveUrl: function() {
                this.get("url") && a["default"].reserveUrl(this.get("session.userId"), encodeURIComponent(this.get("url"))).then(function() {
                    this.send("reserveUrlSuccess")
                }
                .bind(this), function(e) {
                    this.send("reserveUrlError", e)
                }
                .bind(this))
            },
            reserveUrlSuccess: function() {
                this.get("currentUser.vanityUrls").push(this.get("url")),
                this.get("currentUser").set("vanityUrl", this.get("url")),
                this.get("vanityUrls").push(this.get("url"))
            },
            reserveUrlError: function(e) {
                if (this.set("available", !1),
                this.set("errorCode", e.response.code),
                255 === e.response.code)
                    this.send("fetchSuggestion");
                else if ("NOT FOUND" === e.error) {
                    var t = "The URL provided is invalid. You must use at least 3 letter or numbers and at least 1 letter. Only letters, numbers, periods and dashes are allowed.";
                    this.set("error", t)
                } else
                    this.set("error", e.response.error)
            },
            resetForm: function() {
                this.setProperties({
                    url: void 0,
                    error: void 0,
                    available: void 0
                })
            },
            resetMessages: function() {
                this.setProperties({
                    error: void 0,
                    available: void 0,
                    suggestions: void 0
                })
            },
            setTyping: function(e) {
                this.set("typing", e)
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/models/channel", ["exports", "ember", "vine-ember/mixins/color-brightener"], function(e, t, a) {
    var n = t["default"].Object.extend(a["default"], {
        channelIconUrl: function() {
            return this.get("exploreRetinaIconFullUrl") || this.get("exploreIconUrl")
        }
        .property("exploreRetinaIconFullUrl", "exploreIconUrl"),
        backgroundColorStyle: function() {
            var e = "background-color: #" + this.get("backgroundColor")
              , a = this.get("backgroundImageUrl") || this.get("exploreBackgroundImageUrl");
            return a && (e += "; background-image: url('" + a.replace("http://", "https://") + "')"),
            t["default"].String.htmlSafe(e)
        }
        .property("backgroundImageUrl", "backgroundColor", "exploreBackgroundImageUrl"),
        featuredTitle: function() {
            return this.get("rawChannelTitle") || "Featured in " + this.get("channel")
        }
        .property("channel", "rawChannelTitle"),
        backgroundColorHover: function() {
            return this.get("backgroundColor") ? this.brightenColor("0x" + this.get("backgroundColor"), 20) : void 0
        }
        .property("backgroundColor"),
        fontColorStyle: function() {
            return "color: #" + this.get("fontColor")
        }
        .property("fontColor")
    });
    e["default"] = n
}),
define("vine-ember/models/list", ["exports", "ember"], function(e, t) {
    var a = t["default"].Object.extend({
        secureSplashImageUrl: function() {
            return this.get("splashImageUrl") ? this.get("splashImageUrl").replace("http://", "https://") : void 0
        }
        .property("splashImageUrl"),
        truncatedTitle: function() {
            var e = this.get("title").slice(0, 30).trim();
            return e.length < this.get("title").length && (e += "..."),
            e
        }
        .property("title"),
        truncatedDescription: function() {
            var e = this.get("description").slice(0, 84).trim();
            return e.length < this.get("description").length && (e += "..."),
            e
        }
        .property("description"),
        shareObject: function() {
            var e = window.APP_CONFIG.SECURE_HOSTNAME + "/playlists/" + this.get("vanityUrl")
              , t = this.get("title") + " #NowWatching"
              , a = encodeURIComponent(this.get("title"));
            this.get("isTrend") && (e = window.APP_CONFIG.SECURE_HOSTNAME + "/trends/" + this.get("vanityUrl"),
            t = "Watch the story behind " + this.get("title") + " #TrendsOnVine");
            var n = {
                url: e,
                text: t,
                related: "vine"
            };
            return {
                shareUrl: e,
                description: t,
                facebookUrl: "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(e),
                tweetUrl: "https://twitter.com/share?" + $.param(n),
                emailUrl: "mailto:?subject=" + a + "&body=" + encodeURIComponent(t) + " " + encodeURIComponent(e)
            }
        }
        .property("title", "vanityUrl", "isTrend")
    });
    e["default"] = a
}),
define("vine-ember/models/post", ["exports", "ember", "vine-ember/services/pagination"], function(e, t, a) {
    var n = 200
      , r = 3
      , i = t["default"].Object.extend({
        _extractShortId: function(e) {
            return e.split("/").pop()
        },
        isCurrentUser: function() {
            return localStorage.userId === this.get("userIdStr")
        }
        .property("userIdStr"),
        shortId: function() {
            return this.get("permalinkUrl") ? this._extractShortId(this.get("permalinkUrl")) : void 0
        }
        .property("permalinkUrl"),
        paginatedComments: function() {
            if (this.get("comments")) {
                var e = a["default"]({
                    data: this.get("comments")
                });
                return delete e.pagination.anchorStr,
                e.pagination.size = r,
                e.postIdStr = this.get("postIdStr"),
                e
            }
        }
        .property("comments"),
        secureSDVideoUrl: function() {
            var e = this.get("secureVideoUrls").filterBy("format", "h264").reduce(function(e, t) {
                return e || (e = t.rate <= n ? t.videoUrl : null )
            }, null );
            return e
        }
        .property("secureVideoUrls"),
        secureThumbnailUrl: function() {
            return this.get("thumbnailUrl") ? this.get("thumbnailUrl").replace("http://", "https://") : void 0
        }
        .property("thumbnailUrl"),
        secureVideoUrls: function() {
            if (this.get("videoUrls"))
                return this.get("videoUrls").map(function(e) {
                    return e.videoUrl = e.videoUrl.replace("http://", "https://"),
                    e
                });
            var e = [];
            return this.get("videoUrl") && e.push({
                format: "h264",
                rate: 0,
                videoUrl: this.get("videoUrl").replace("http://", "https://")
            }),
            this.get("videoDashUrl") && e.push({
                format: "dash",
                rate: 0,
                videoUrl: this.get("videoDashUrl").replace("http://", "https://")
            }),
            e
        }
        .property("videoUrls", "videoUrl", "videoDashUrl"),
        backgroundImageStyle: function() {
            if (this.get("secureThumbnailUrl")) {
                var e = 'background-image: url("' + this.get("secureThumbnailUrl") + '");';
                return t["default"].String.htmlSafe(e)
            }
        }
        .property("secureThumbnailUrl"),
        backgroundColor: function() {
            return this.get("profileBackground") ? "#" + this.get("profileBackground").substr(2) : void 0
        }
        .property("profileBackground"),
        tweetUrl: function() {
            var e = {
                url: this.get("shareUrl"),
                text: this.get("description"),
                related: "vine"
            };
            return "https://twitter.com/share?" + $.param(e)
        }
        .property("shareUrl", "description"),
        facebookUrl: function() {
            return "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(this.get("shareUrl"))
        }
        .property("shareUrl"),
        emailUrl: function() {
            var e = encodeURIComponent("Check out this video on Vine")
              , t = encodeURIComponent(this.get("description"))
              , a = encodeURIComponent(this.get("shareUrl"));
            return "mailto:?subject=" + e + "&body=" + t + " " + a
        }
        .property("shareUrl", "description"),
        audioTrack: function() {
            var e = this.get("audio_tracks");
            if (e && e.length) {
                var t = e[0].track;
                if (!t)
                    return;
                return t.trackIdStr = e[0].trackIdStr,
                t
            }
        }
        .property("audio_tracks"),
        audioSource: function() {
            if (this.get("sources.records.length")) {
                var e = this.get("sources.records").filterBy("contentType", 1);
                return e && e.length ? {
                    shortId: this._extractShortId(e[0].shareUrl),
                    username: e[0].username
                } : void 0
            }
        }
        .property("sources"),
        hasAudioAttribution: function() {
            return this.get("audioTrack") || this.get("audioSource")
        }
        .property("audioTrack", "audioSource"),
        attributionRoute: function() {
            return this.get("audioSource") ? {
                name: "post-remixes",
                param: this.get("audioSource.shortId")
            } : this.get("audioTrack.hasAudioTrackTimeline") ? {
                name: "audio-track",
                param: this.get("audioTrack.trackIdStr")
            } : void 0
        }
        .property("audioSource", "audioTrack")
    });
    e["default"] = i
}),
define("vine-ember/models/tag", ["exports", "ember"], function(e, t) {
    var a = t["default"].Object.extend({
        hashtag: function() {
            return "#" + this.get("tag")
        }
        .property("tag")
    });
    e["default"] = a
}),
define("vine-ember/models/user", ["exports", "ember", "vine-ember/mixins/color-brightener"], function(e, t, a) {
    var n = t["default"].Object.extend(a["default"], {
        defaultBackgroundColor: "#00bf8f",
        loopCount: 0,
        isCurrentUser: function() {
            return localStorage.userId === this.get("userIdStr")
        }
        .property("userIdStr", "session"),
        backgroundColor: function() {
            return this.get("profileBackground") ? "#" + this.get("profileBackground").replace(/^0x/, "") : this.get("defaultBackgroundColor")
        }
        .property("profileBackground"),
        backgroundColorHover: function() {
            return this.get("profileBackground") ? "#" + this.brightenColor(this.get("profileBackground"), 20) : void 0
        }
        .property("profileBackground"),
        linkColor: function() {
            return "#333333" === this.get("backgroundColor") ? "#00bf8f" : this.get("backgroundColor")
        }
        .property("backgroundColor"),
        linkColorHover: function() {
            return "#333333" === this.get("backgroundColor") ? "#00d9a3" : this.get("backgroundColorHover")
        }
        .property("backgroundColor", "backgroundColorHover"),
        backgroundColorStyle: function() {
            var e = "background-color: " + this.get("backgroundColor");
            return t["default"].String.htmlSafe(e)
        }
        .property("backgroundColor"),
        vanityUrl: function() {
            var e = this.get("vanityUrls");
            return e && e.length > 0 ? e[0] : void 0
        }
        .property("vanityUrls"),
        hasVanityUrls: t["default"].computed.notEmpty("vanityUrls"),
        secureAvatarUrl: function() {
            return this.get("avatarUrl").replace("http://", "https://")
        }
        .property("avatarUrl")
    });
    e["default"] = n
}),
define("vine-ember/router", ["exports", "ember", "vine-ember/config/environment"], function(e, t, a) {
    var n = t["default"].Router.extend({
        location: a["default"].locationType
    });
    e["default"] = n.map(function() {
        this.route("login"),
        this.route("login/oauth-callback", {
            path: "/login/oauth-callback"
        }),
        this.route("forgot-password"),
        this.route("reset-password", {
            path: "/passwordReset"
        }),
        this.route("confirm-email", {
            path: "/confirmEmail/:token"
        }),
        this.route("settings"),
        this.route("profiles"),
        this.resource("jobs", function() {
            this.route("job", {
                path: ":job_id"
            })
        }),
        this.route("index", {
            path: "/"
        }),
        this.resource("permalink-post", {
            path: "/v/:short_id"
        }, function() {
            this.route("embed")
        }),
        this.route("post-remixes", {
            path: "/v/:short_id/remixes"
        }),
        this.route("post-similar", {
            path: "/v/:short_id/similar"
        }),
        this.route("audio-track", {
            path: "/audiotracks/:track_id"
        }),
        this.route("vm-post", {
            path: "/m/:token"
        }),
        this.route("unsubscribe-vm", {
            path: "/unsubscribe/vm/:token"
        }),
        this.route("feed"),
        this.route("popular-now"),
        this.route("channel", {
            path: "/channels/:channel_name"
        }),
        this.route("tag", {
            path: "/tags/:tag"
        }),
        this.route("venue", {
            path: "/venues/:venue_id"
        }),
        this.route("editors-picks"),
        this.route("playlists"),
        this.route("trends"),
        this.route("trend", {
            path: "/trends/:vanity"
        }),
        this.route("list", {
            path: "/playlists/:vanity"
        }),
        this.resource("search", {
            path: "/search/:query"
        }, function() {
            this.route("users"),
            this.route("tags"),
            this.route("venues")
        }),
        this.route("promo/camera", {
            path: "/camera"
        }),
        this.route("promo/music", {
            path: "/music"
        }),
        this.route("user-fallback-likes", {
            path: "/u/:user_id/likes"
        }),
        this.route("user-likes", {
            path: "/:vanity/likes"
        }),
        this.route("user-fallback", {
            path: "/u/:user_id"
        }),
        this.route("user", {
            path: "/:vanity"
        }),
        this.route("not-found", {
            path: "*path"
        })
    })
}),
define("vine-ember/routes/application", ["exports", "ember", "vine-ember/services/authentication/mixins/application_route_mixin", "vine-ember/services/errors"], function(e, t, a, n) {
    var r, i, d = t["default"].Route.extend(a["default"], {
        mobileFormattedModals: ["job", "embed", "vm"],
        storeUrls: {
            apple: "https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download",
            android: "https://play.google.com/store/apps/details?id=co.vine.android",
            windows: "http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60"
        },
        actions: {
            doAuthenticatedAction: function(e, t) {
                if (!this.get("session.isAuthenticated")) {
                    var a;
                    return e && (a = {
                        attemptedAction: e
                    }),
                    this.controllerFor("modal/login").set("successEvent", t),
                    void this.send("showModal", "login", a)
                }
                t()
            },
            showModal: function(e, t) {
                var a = this.controllerFor("application");
                if (a.get("isMobile")) {
                    if ("login" === e) {
                        var n = a.get("lastTransition");
                        return this.set("session.attemptedTransition", n),
                        void this.send("login")
                    }
                    if (!this.mobileFormattedModals.contains(e))
                        return
                }
                var r = {};
                r[e] = !0,
                t && this.controllerFor("modal/" + e).setProperties(t),
                this.controllerFor("application").set("modal", r)
            },
            hideModal: function() {
                var e = this.controllerFor("application")
                  , a = e.get("modal")
                  , n = []
                  , r = Object.keys(a);
                r.forEach(function(e) {
                    if (a[e]) {
                        var t = this.controllerFor("modal/" + e).get("modalSelector");
                        t ? n.push(t) : n.push(".modal." + e)
                    }
                }
                .bind(this)),
                t["default"].$(n.join()).animate({
                    opacity: 0
                }, 250, function() {
                    r.forEach(function(t) {
                        e.set("modal." + t, void 0);
                        var a = this.controllerFor("modal/" + t).get("routeAfterClose");
                        a && this.transitionTo(a)
                    }
                    .bind(this))
                }
                .bind(this))
            },
            loading: function(e, t) {
                e.send("showLoading"),
                this.router.one("didTransition", function() {
                    this.send("hideLoading")
                }
                .bind(this))
            },
            showLoading: function() {
                var e = t["default"].$("#loading-bar");
                if (!(e.is(":visible") || r || i)) {
                    e.show();
                    var a = 70 + 10 * Math.random()
                      , n = $(window).width();
                    e.width(a / 100 * n),
                    i = setTimeout(function() {
                        r = setInterval(function() {
                            a += 10 * Math.random(),
                            e.width(a / 100 * n)
                        }, 100)
                    }, 900)
                }
            },
            hideLoading: function() {
                clearInterval(r),
                clearTimeout(i),
                i = null ,
                r = null ;
                var e = t["default"].$("#loading-bar");
                e.width($(window).width()),
                t["default"].run.later(function() {
                    e.fadeOut(400, function() {
                        e.width(0)
                    })
                }, 1200)
            },
            scrollToTop: function() {
                $("html, body").animate({
                    scrollTop: 0
                })
            },
            setAppUrl: function(e) {
                this.set("appUrl", e)
            },
            clearAppUrl: function() {
                this.set("appUrl", void 0)
            },
            search: function(e) {
                if (e) {
                    var t = encodeURIComponent(e).replace(/%20/g, "+");
                    this.transitionTo("search.index", t)
                }
            },
            gaq: function(e) {
                t["default"].isNone(window._gaq) || window._gaq.push(e)
            },
            goToStore: function(e, t, a) {
                var n = this.controllerFor("application");
                if (e = e || n.get("deviceType")) {
                    a && a[e] ? window.open(a[e]) : window.open(this.storeUrls[e]),
                    t = t || n.get("currentPath");
                    var r = n.get("isMobile") ? 1 : 0;
                    this.send("gaq", ["_trackEvent", "App Button", e, t, r])
                }
            },
            setIsTimeline: function(e) {
                this.controllerFor("application").set("isTimeline", e)
            },
            error: function(e, t) {
                var a = e && e.response && e.response.code
                  , r = [n["default"].REQUIRES_LOGIN, n["default"].INVALID_SESSION];
                return a && this.get("session.isAuthenticated") && r.contains(a) ? (this.get("session").destroy(),
                t.retry(),
                !1) : !0
            }
        }
    });
    e["default"] = d
}),
define("vine-ember/routes/audio-track", ["exports", "vine-ember/routes/timeline"], function(e, t) {
    var a = t["default"].extend({
        controllerName: "audio-track",
        queryParams: {
            sort: {
                refreshModel: !0
            }
        },
        model: function(e) {
            return this.get("services.timeline").audioTrack(e).then(function(t) {
                var a, n;
                try {
                    var r = t.posts[0].audio_tracks[0].track;
                    a = r.artistName,
                    n = r.trackName
                } catch (i) {}
                return t.track = {
                    trackIdStr: e.track_id,
                    artistName: a,
                    trackName: t.title || n
                },
                t
            })
        },
        afterModel: function(e, t) {
            this.setProperties({
                timelineName: e.track.trackName
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.timeline")
              , n = t.track.trackIdStr;
            e.setProperties({
                track: t.track,
                endpoint: a.audioTrack.bind(a),
                params: {
                    track_id: n
                },
                routeParam: n,
                hasToggles: !0
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/audio-track", {
                into: "timeline",
                outlet: "timelineHeader"
            }),
            this.render("timelines/toggles/top-recent", {
                into: "timeline",
                outlet: "timelineToggles"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/base", ["exports", "ember"], function(e, t) {
    var a = t["default"].Route.extend({
        beforeModel: function(e) {
            this.controllerFor("application").set("lastTransition", e),
            this.controllerFor("playing-vine").send("reset")
        },
        activate: function() {
            t["default"].run.once("afterRender", function() {
                $(window).scrollTop(0)
            }),
            this._setTitle()
        },
        deactivate: function() {
            $("title").text("Vine")
        },
        titleChanged: function() {
            this._setTitle()
        }
        .observes("title"),
        _setTitle: function() {
            if (this.get("title")) {
                var e = new t["default"].Handlebars.SafeString(this.get("title"));
                $("title").text(e)
            }
        },
        actions: {
            willTransition: function(e) {
                return this.send("clearAppUrl"),
                this.controllerFor("application").send("resetPageStates"),
                !0
            },
            videoRendered: function(e) {
                this.controllerFor("playing-vine").send("videoRendered", e)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/channel", ["exports", "vine-ember/routes/timeline", "vine-ember/services/channels", "vine-ember/services/timeline"], function(e, t, a, n) {
    var r = t["default"].extend({
        model: function(e) {
            return a["default"].findByVanityUrl(decodeURI(e.channel_name)).then(function(e) {
                return n["default"].channel({
                    channel_id: e.channelIdStr
                }).then(function(t) {
                    return t.channel = e,
                    t
                })
            })
        },
        afterModel: function(e, t) {
            var a = e.channel;
            this.setProperties({
                timelineName: a.channel,
                appUrl: "vine://channels/" + a.get("channelIdStr")
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = t.channel;
            e.setProperties({
                endpoint: n["default"].channel.bind(n["default"]),
                params: {
                    channel_id: a.get("channelIdStr")
                },
                routeParam: a.get("vanityUrl"),
                channel: a
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/custom-styles/channel", {
                into: "timeline",
                outlet: "customStyles"
            }),
            this.render("timelines/headers/channel", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = r
}),
define("vine-ember/routes/confirm-email", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        model: function(e) {
            return this.get("services.user").verifyEmail(e.token).then(function() {
                return {
                    showContinue: !0
                }
            })["catch"](function(e) {
                return {
                    error: e.response
                }
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/editors-picks", ["exports", "vine-ember/routes/timeline"], function(e, t) {
    var a = t["default"].extend({
        model: function() {
            return this.get("services.timeline").promoted()
        },
        afterModel: function(e, t) {
            this.setProperties({
                timelineName: "Editor's Picks",
                appUrl: "vine://editors-picks"
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                endpoint: a.graph.bind(a)
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/editors-picks", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/error", ["exports", "vine-ember/routes/base", "vine-ember/services/errors"], function(e, t, a) {
    var n = t["default"].extend({
        setupController: function(e, t) {
            this._super(e, t),
            this.send("hideLoading");
            var n = t && t.response
              , r = n && n.code;
            this.set("errorCode", r);
            var i = [a["default"].DELETED, a["default"].DMCA].contains(r);
            i && n && n.error && e.set("message", n.error)
        },
        renderTemplate: function(e, t) {
            var n = [a["default"].DOES_NOT_EXIST, a["default"].DELETED, a["default"].DMCA];
            n.contains(this.get("errorCode")) ? (this.send("gaq", ["_trackPageview", "404"]),
            this.render("not-found")) : (this.send("gaq", ["_trackPageview", "error"]),
            this._super(e, t))
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/feed", ["exports", "vine-ember/routes/timeline", "vine-ember/services/authentication/mixins/authenticated_route_mixin"], function(e, t, a) {
    var n = t["default"].extend(a["default"], {
        timelineName: "Home Feed",
        scribeAppState: {
            section: "home",
            timeline_api_url: "/timelines/graph"
        },
        model: function(e) {
            return this.get("services.timeline").graph(e)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                endpoint: a.graph.bind(a)
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/feed", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/index", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        beforeModel: function() {
            this.controllerFor("explore/popular-now"),
            this.controllerFor("explore/lists"),
            this.controllerFor("explore")
        },
        afterModel: function(e, t) {
            t.send("gaq", ["_setCustomVar", 1, "Posttype", "homepage"])
        },
        setupController: function(e, t) {
            var a = this.controllerFor("index").get("content");
            e.setProperties({
                model: a,
                pagination: {
                    count: a.length
                }
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/jobs/job", ["exports", "vine-ember/routes/base", "vine-ember/services/jobs"], function(e, t, a) {
    var n = t["default"].extend({
        controllerName: "jobs",
        model: function(e) {
            return a["default"].job(e.job_id).then(function(e) {
                return {
                    all: this.modelFor("jobs").all,
                    current: e
                }
            }
            .bind(this))
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/jobs", ["exports", "vine-ember/routes/base", "vine-ember/services/jobs"], function(e, t, a) {
    var n = t["default"].extend({
        model: function() {
            return a["default"].allJobs().then(function(e) {
                return {
                    all: e,
                    current: null
                }
            })
        },
        afterModel: function(e, t) {
            var a = "Jobs at Vine";
            this.set("title", a),
            this.controllerFor("application").set("mobileTitle", a)
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/list", ["exports", "vine-ember/routes/timeline"], function(e, t) {
    var a = t["default"].extend({
        model: function(e) {
            var t = this.get("services.list");
            return t.listVanityPosts(e).then(function(a) {
                return t.listVanity(e).then(function(e) {
                    return a.list = e,
                    a
                })
            })
        },
        afterModel: function(e, t) {
            this.setProperties({
                timelineName: e.list.title,
                appUrl: "vine://timelines/lists/" + e.list.timelineIdStr + "/posts?title=" + encodeURIComponent(e.list.title)
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = t.list.get("vanityUrl");
            e.setProperties({
                endpoint: this.get("services.list").listVanityPosts,
                params: {
                    vanity: a
                },
                routeParam: a,
                list: t.list,
                shareObject: t.list.get("shareObject"),
                shareFeatureSet: "playlist"
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/list", {
                into: "timeline",
                outlet: "timelineHeader"
            }),
            this.render("timelines/custom-styles/list", {
                into: "timeline",
                outlet: "customStyles"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/login/oauth-callback", ["exports", "ember", "vine-ember/services/twitter"], function(e, t, a) {
    var n = t["default"].Route.extend({
        model: function(e, t) {
            var n = this;
            a["default"].accessToken().then(function(e) {
                return e.denied ? void window.close() : e.error ? (window.opener.createOauthError(),
                void window.close()) : void (window.opener ? (window.opener.createOauthSession(e),
                window.close()) : n.send("createOauthSession", e))
            })
        },
        renderTemplate: function() {
            this.render("loading-fullscreen")
        },
        actions: {
            createOauthSession: function(e) {
                var t = this;
                this.get("services.user").authTwitter(e.access_token, e.access_token_secret).then(function(e) {
                    t.get("session").setup(e.data)
                })["finally"](function() {
                    window.close()
                })
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/login", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        title: "Login",
        beforeModel: function(e) {
            this.get("session.isAuthenticated") && this.transitionTo("feed")
        },
        afterModel: function(e, t) {
            this.set("title", "Login - Vine"),
            this.controllerFor("application").set("mobileTitle", "Login")
        },
        setupController: function(e, t) {
            window.loginController = e,
            e.send("resetForm")
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/not-found", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        afterModel: function(e, t) {
            t.send("gaq", ["_trackPageview", "404"])
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/permalink-post/embed", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        controllerName: "permalink-post",
        setupController: function(e, t) {
            t.set("shouldOpenEmbedModal", !0)
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/permalink-post/index", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        controllerName: "permalink-post",
        afterModel: function(e) {
            e.set("shouldOpenEmbedModal", !1)
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/permalink-post", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        model: function(e) {
            return this.get("services.timeline").post(e)
        },
        serialize: function(e) {
            return {
                short_id: e.get("shortId")
            }
        },
        afterModel: function(e, t) {
            t.send("gaq", ["_setCustomVar", 1, "Posttype", "permalink"]),
            e.description ? this.set("title", "Watch " + e.username + "'s Vine, \"" + e.description + '"') : this.set("title", e.username + "'s post on Vine"),
            t.send("setAppUrl", "vine://post/" + e.postIdStr)
        },
        setupController: function(e, t) {
            this._super(e, t),
            e.set("isInitiallyFollowing", t.following)
        },
        renderTemplate: function(e, t) {
            this.controllerFor("application").get("isMobile") ? this.render("permalink-mobile") : (e.set("autoplay", !0),
            this.render("permalink-post"))
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/playlists", ["exports", "vine-ember/routes/timeline"], function(e, t) {
    var a = t["default"].extend({
        controllerName: "playlists",
        timelineName: "Playlists",
        model: function(e) {
            return this.get("services.list").editorialWithPosts(null , {
                size: 9
            })
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.list");
            e.setProperties({
                endpoint: a.editorialWithPosts.bind(a)
            })
        },
        renderTemplate: function(e, t) {
            this.render("playlists", {
                controller: this.get("controllerName")
            }),
            this.render("timelines/headers/playlists", {
                into: "playlists",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/popular-now", ["exports", "vine-ember/routes/timeline"], function(e, t) {
    var a = t["default"].extend({
        model: function(e) {
            return this.get("services.timeline").popular(null , {
                size: 18
            })
        },
        afterModel: function(e, t) {
            this.setProperties({
                timelineName: "Popular Now",
                appUrl: "vine://popular-now"
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                endpoint: a.popular.bind(a)
            }),
            "" === e.get("mode") && e.set("mode", "grid")
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/popular-now", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/post-remixes", ["exports", "vine-ember/routes/timeline"], function(e, t) {
    var a = t["default"].extend({
        controllerName: "post-remixes",
        queryParams: {
            sort: {
                refreshModel: !0
            }
        },
        beforeModel: function(e) {
            this._super(e),
            this.get("session.canViewPostSources") || this.transitionTo("permalink-post", e.params["post-remixes"].short_id)
        },
        model: function(e) {
            var t = this.get("services.timeline");
            return t.post(e).then(function(a) {
                return t.remixes({
                    post_id: a.postIdStr,
                    sort: e.sort
                }).then(function(e) {
                    return e.post = a,
                    e
                })
            })["catch"](function() {
                this.transitionTo("permalink-post", e.short_id)
            }
            .bind(this))
        },
        afterModel: function(e, t) {
            this.setProperties({
                timelineName: "Remixes of " + e.post.get("username") + "'s Vine"
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                post: t.post,
                endpoint: a.remixes.bind(a),
                params: {
                    post_id: t.post.get("postIdStr")
                },
                routeParam: t.post.get("shortId"),
                hasToggles: !0
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/post-remixes", {
                into: "timeline",
                outlet: "timelineHeader"
            }),
            this.render("timelines/toggles/top-recent", {
                into: "timeline",
                outlet: "timelineToggles"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/post-similar", ["exports", "vine-ember/routes/timeline"], function(e, t) {
    var a = t["default"].extend({
        model: function(e) {
            var t = this.get("services.timeline");
            return t.post(e).then(function(a) {
                return a.hasSimilarPosts ? t.relatedVideos({
                    post_id: a.postIdStr
                }).then(function(e) {
                    return e.post = a,
                    e
                }) : void this.transitionTo("permalink-post", e.short_id)
            })["catch"](function() {
                this.transitionTo("permalink-post", e.short_id)
            }
            .bind(this))
        },
        afterModel: function(e, t) {
            this.setProperties({
                timelineName: "People also watched"
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                post: t.post,
                endpoint: a.relatedVideos.bind(a),
                params: {
                    post_id: t.post.get("postIdStr")
                },
                routeParam: t.post.get("shortId")
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/post-similar", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/profiles", ["exports", "ember"], function(e, t) {
    var a = t["default"].Route.extend({
        beforeModel: function(e) {
            this._super(e),
            this.transitionTo("settings")
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/promo/camera", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        afterModel: function(e, t) {
            this.set("title", "The new Vine camera")
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/promo/music", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        model: function() {
            var e = ["eixJtLx7DzM", "eAtA1q1TPYH", "ejAxI3XEtDt"]
              , t = ["OwVaeKHeFq9", "egHqOiHz6MQ", "MnnabV7LujY"]
              , a = ["MtD0JpBA6dL", "O6XhriMBAZU", "Oz3V0VMtnDI"]
              , n = [e[0], t[0], a[0]].map(function(e) {
                return this.get("services.timeline").post({
                    short_id: e
                })
            }
            .bind(this));
            return Ember.RSVP.all(n).then(function(n) {
                return {
                    shmoney: {
                        embedUrls: e.map(this.getEmbedUrl),
                        mobileVine: n[0]
                    },
                    collab: {
                        embedUrls: t.map(this.getEmbedUrl),
                        mobileVine: n[1]
                    },
                    shawn: {
                        embedUrls: a.map(this.getEmbedUrl),
                        mobileVine: n[2]
                    }
                }
            }
            .bind(this))
        },
        getEmbedUrl: function(e) {
            return "https://vine.co/v/" + e + "/embed/simple?unmuteOnHover=1"
        },
        afterModel: function(e, t) {
            this.set("title", "Music on Vine")
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/search/index", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        model: function() {
            return this.modelFor("search")
        },
        setupController: function(e, t) {
            var a = this.get("services.search")
              , n = t.query;
            e.setProperties({
                users: t.users,
                tags: t.tags,
                venues: t.venues,
                model: t.posts.posts,
                pagination: t.posts.pagination,
                endpoint: a.posts.bind(a),
                params: {
                    query: n
                },
                routeParam: n
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/search/tags", ["exports", "ember", "vine-ember/routes/base"], function(e, t, a) {
    var n = a["default"].extend({
        model: function() {
            var e = this.modelFor("search").tags;
            e.query = this.modelFor("search").query;
            var a = this.get("services.timeline")
              , n = e.posts.slice(0, 2).map(function(e) {
                return a.tag({
                    tag: e.tag
                }, {
                    size: 6
                }).then(function(t) {
                    return {
                        tag: e.tag,
                        hashtag: e.get("hashtag"),
                        rows: [t.posts.slice(0, 3), t.posts.slice(3)],
                        pagination: t.pagination
                    }
                })
            });
            return t["default"].RSVP.all(n).then(function(t) {
                return e.timelines = t,
                e
            })
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.controllerFor("application").get("isMobile");
            e.set("isMobile", a)
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/search/users", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        model: function() {
            return this.modelFor("search").users
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.search");
            e.setProperties({
                endpoint: a.users.bind(a),
                params: {
                    query: this.modelFor("search").query
                }
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/search/venues", ["exports", "ember", "vine-ember/routes/base"], function(e, t, a) {
    var n = a["default"].extend({
        model: function(e) {
            var a = this.modelFor("search").venues;
            a.query = this.modelFor("search").query;
            var n = this.get("services.timeline")
              , r = a.posts.slice(0, 2).map(function(e) {
                return n.venue({
                    venue_id: e.foursquareVenueId
                }, {
                    size: 6
                }).then(function(t) {
                    return {
                        venueName: e.venueName,
                        foursquareVenueId: e.foursquareVenueId,
                        rows: [t.posts.slice(0, 3), t.posts.slice(3)],
                        pagination: t.pagination
                    }
                })
            });
            return t["default"].RSVP.all(r).then(function(e) {
                return a.timelines = e,
                a
            })
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.controllerFor("application").get("isMobile");
            e.set("isMobile", a)
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/search", ["exports", "ember", "vine-ember/routes/base"], function(e, t, a) {
    var n = a["default"].extend({
        _processQuery: function(e) {
            return e = e.replace(/\+/g, " "),
            decodeURIComponent(e)
        },
        model: function(e) {
            return e.query = this._processQuery(e.query),
            t["default"].RSVP.hash({
                posts: this.get("services.search").posts(e, {
                    size: 18
                }),
                users: this.get("services.search").users(e),
                tags: this.get("services.search").tags(e, {
                    size: 35
                }),
                venues: this.get("services.search").venues(e, {
                    size: 35
                })
            }).then(function(t) {
                return t.query = e.query,
                t
            })
        },
        afterModel: function(e, t) {
            this.set("title", 'Results for "' + e.query + '" - Vine'),
            this.controllerFor("application").set("mobileTitle", 'Results for "' + e.query + '"')
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/settings", ["exports", "vine-ember/routes/base", "vine-ember/services/authentication/mixins/authenticated_route_mixin"], function(e, t, a) {
    var n = t["default"].extend(a["default"], {
        afterModel: function(e, t) {
            t.send("setAppUrl", "vine://user/settings"),
            this.set("title", "Settings - Vine"),
            this.controllerFor("application").set("mobileTitle", "Settings")
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/tag", ["exports", "vine-ember/routes/timeline", "vine-ember/services/timeline"], function(e, t, a) {
    var n = t["default"].extend({
        model: function(e) {
            return a["default"].tag(e)
        },
        afterModel: function(e, t) {
            this.setProperties({
                timelineName: "#" + e.tag.tag,
                appUrl: "vine://tag/" + e.tag.tag
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t),
            e.setProperties({
                endpoint: a["default"].tag.bind(a["default"]),
                params: {
                    tag: t.tag.tag
                },
                routeParam: t.tag.tag,
                hashtag: t.tag.get("hashtag")
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/tag", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/timeline", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        controllerName: "timeline",
        setupController: function(e, t) {
            e.setProperties({
                model: t.posts,
                pagination: t.pagination,
                timelineName: this.get("timelineName"),
                videoIndex: 0,
                hasToggles: !1,
                headerPost: null
            })
        },
        afterModel: function(e, t) {
            if (t.send("gaq", ["_setCustomVar", 1, "Posttype", "timeline"]),
            this.get("timelineName") && (this.set("title", this.get("timelineName") + " - Vine"),
            this.controllerFor("application").set("mobileTitle", this.get("timelineName"))),
            this.get("appUrl") && t.send("setAppUrl", this.get("appUrl")),
            this.get("scribeAppState")) {
                var a = this.get("scribeAppState");
                a.view = a.view || "timeline",
                this.get("scribe").setAppNavigation(a),
                this.get("scribe").scribeEvent("view_impression", this.get("scribeDetails"))
            }
        },
        renderTemplate: function(e, t) {
            this.render("timeline", {
                controller: this.get("controllerName")
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/trend", ["exports", "vine-ember/routes/list"], function(e, t) {
    var a = t["default"].extend({
        setupController: function(e, t) {
            t.list.set("isTrend", !0),
            this._super(e, t),
            e.set("headerPost", t.list.get("headerPost"))
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/footers/trend", {
                into: "timeline",
                outlet: "timelineFooter"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/trends", ["exports", "vine-ember/routes/playlists"], function(e, t) {
    var a = t["default"].extend({
        controllerName: "trends",
        timelineName: "Trends on Vine",
        queryParams: {
            sort: {
                refreshModel: !0
            }
        },
        model: function(e) {
            var t = this.get("services.list");
            return t.trendsWithPosts(e, {
                size: 9
            }).then(function(e) {
                return t.trendsHeader().then(function(t) {
                    return e.header = t,
                    e
                })
            })
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.list");
            e.setProperties({
                endpoint: a.trendsWithPosts.bind(a),
                header: t.header,
                headerPost: t.header.post,
                hasToggles: !0
            })
        },
        renderTemplate: function(e, t) {
            this.render("trends", {
                controller: this.get("controllerName")
            }),
            this.render("timelines/headers/trends", {
                into: "trends",
                outlet: "timelineHeader"
            }),
            this.render("timelines/custom-styles/trends", {
                into: "trends",
                outlet: "customStyles"
            }),
            this.render("timelines/footers/trends", {
                into: "trends",
                outlet: "timelineFooter"
            }),
            this.render("timelines/toggles/top-recent", {
                into: "trends",
                outlet: "timelineToggles"
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/unsubscribe-vm", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        model: function(e) {
            return {
                token: e.token
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/user-fallback-likes", ["exports", "vine-ember/routes/user-likes"], function(e, t) {
    e["default"] = t["default"].extend()
}),
define("vine-ember/routes/user-fallback", ["exports", "vine-ember/routes/user"], function(e, t) {
    var a = t["default"].extend();
    e["default"] = a
}),
define("vine-ember/routes/user-likes", ["exports", "vine-ember/routes/user"], function(e, t) {
    var a = t["default"].extend({
        isLikes: !0,
        model: function(e) {
            this.set("params", e);
            var t = this.get("services.timeline");
            return this.get("services.user").profile(e).then(function(e) {
                return this.hasAccess(e) ? t.userLikes({
                    user_id: e.userIdStr
                }).then(function(t) {
                    return t.user = e,
                    t
                }) : {
                    user: e
                }
            }
            .bind(this))
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                endpoint: a.userLikes.bind(a),
                isLikes: !0
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/routes/user", ["exports", "ember", "vine-ember/routes/timeline", "vine-scribe"], function(e, t, a, n) {
    var r = a["default"].extend({
        controllerName: "user",
        scribeAppState: {
            section: "",
            view: "profile"
        },
        hasAccess: function(e) {
            return e.blocked ? !1 : e["private"] ? this.get("session").isCurrentUser(e.userIdStr) || e.following && !e.followRequested : !0
        },
        model: function(e) {
            this.set("params", e);
            var t = this.get("services.timeline");
            return this.get("services.user").profile(e).then(function(e) {
                if (!this.hasAccess(e))
                    return {
                        user: e
                    };
                var a, n = {
                    user_id: e.userIdStr
                };
                return a = window.localStorage.suspended ? t.escUser(n) : t.user(n),
                a.then(function(t) {
                    return t.user = e,
                    t
                })
            }
            .bind(this))
        },
        afterModel: function(e, a) {
            var r = e.user;
            this.set("scribeAppState.timeline_api_url", "/timeline/users/" + r.userIdStr),
            this.set("scribeDetails", {
                items: [this.get("scribe").generateItem(n.values.ITEM_TYPES.USER, r)]
            }),
            this.get("session").isCurrentUser(r.userIdStr) && this.set("scribeAppState.section", "my_profile");
            var i = new t["default"].Handlebars.SafeString(t["default"].Handlebars.Utils.escapeExpression(r.username))
              , d = i;
            this.get("isLikes") && (d += "'s likes"),
            this.setProperties({
                timelineName: d,
                appUrl: "vine://tw/user/" + r.userIdStr
            }),
            this._super(e, a);
            var c = r.get("hasVanityUrls")
              , s = "replaceState"in window.history;
            if (s && c) {
                var o = r.get("vanityUrl");
                if (this.get("params").vanity !== o) {
                    var l = "/" + o;
                    this.get("isLikes") && (l += "/likes"),
                    window.history.replaceState({
                        path: l
                    }, "user", l)
                }
            }
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = t.user
              , n = this.get("services.timeline");
            a.set("hasAccess", this.hasAccess(a)),
            e.setProperties({
                user: a,
                endpoint: n.user.bind(n),
                params: {
                    user_id: a.userIdStr
                },
                routeParam: this.get("params.vanity") || this.get("params.user_id"),
                hasToggles: !0,
                isLikes: !1
            })
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/custom-styles/user", {
                into: "timeline",
                outlet: "customStyles"
            }),
            this.render("timelines/headers/user", {
                into: "timeline",
                outlet: "timelineHeader"
            }),
            this.render("timelines/toggles/user", {
                into: "timeline",
                outlet: "timelineToggles"
            });
            var a = this.get("session").isCurrentUser(t.user.userIdStr) && (this.get("session.suspended") || this.get("session.isEscUser"));
            a && this.render("timelines/sidebars/suspension-sidebar", {
                into: "timeline",
                outlet: "timelineNotification"
            })
        }
    });
    e["default"] = r
}),
define("vine-ember/routes/venue", ["exports", "vine-ember/routes/timeline", "vine-ember/services/api"], function(e, t, a) {
    var n = t["default"].extend({
        model: function(e) {
            return this.get("services.timeline").venue(e).then(function(t) {
                return t.posts.length && (t.venueName = t.posts[0].venueName,
                t.venueId = e.venue_id),
                t
            }).then(function(t) {
                return a["default"].ajax("/foursquare/venues/" + e.venue_id, "get").then(function(e) {
                    return t.lat = e.lat,
                    t.lng = e.lng,
                    t
                })["catch"](function() {
                    return t
                })
            })
        },
        afterModel: function(e, t) {
            this.setProperties({
                timelineName: e.venueName,
                appUrl: "vine://venue/" + e.venueId
            }),
            this._super(e, t)
        },
        setupController: function(e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                venue: t.venueName,
                endpoint: a.venue.bind(a),
                params: {
                    venue_id: t.venueId
                },
                routeParam: t.venueId
            }),
            this.controllerFor("timelines/headers/venue").set("model", t)
        },
        renderTemplate: function(e, t) {
            this._super(e, t),
            this.render("timelines/headers/venue", {
                into: "timeline",
                outlet: "timelineHeader",
                controller: "timelines/headers/venue"
            })
        }
    });
    e["default"] = n
}),
define("vine-ember/routes/vm-post", ["exports", "vine-ember/routes/base"], function(e, t) {
    var a = t["default"].extend({
        model: function(e) {
            return this.set("token", e.token),
            this.get("services.conversation").conversation(e.token)
        },
        afterModel: function(e, t) {
            t.send("gaq", ["_setCustomVar", 1, "Posttype", "vm-landing"]),
            e.conversationIdStr && t.send("setAppUrl", "vine://conversations/" + e.conversationIdStr)
        },
        setupController: function(e, t) {
            this._super(e, t),
            e.setProperties({
                token: this.get("token"),
                playing: !1,
                expired: !!t.expired
            })
        }
    });
    e["default"] = a
}),
define("vine-ember/services/api", ["exports", "ember"], function(e, t) {
    var a = t["default"].Object.extend({
        host: "/api",
        request: function(e, t, a, n) {
            var r = this.host
              , i = r + t;
            return n = n || {},
            n.data = a,
            this.ajax(i, e, n)
        },
        cachedRequest: function(e, a, n, r, i) {
            if (void 0 === i && (i = !0),
            i) {
                var d = !!window.localStorage.authToken;
                if (!d && r)
                    return t["default"].RSVP.resolve({
                        data: r
                    })
            } else if (r)
                return t["default"].RSVP.resolve({
                    data: r
                });
            return this.request(e, a, n)
        },
        ajax: function(e, a, n) {
            return new t["default"].RSVP.Promise(function(r, i) {
                n = n || {},
                n.url = e,
                n.type = a,
                n.dataType = n.dataType || "json",
                n.success = function(e) {
                    t["default"].run(null , r, e)
                }
                ,
                n.error = function(e, a, n) {
                    var r = {};
                    if (e.responseText)
                        try {
                            r = JSON.parse(e.responseText)
                        } catch (d) {
                            r = {
                                error: d
                            }
                        }
                    var c = {
                        xhr: e,
                        status: a,
                        error: n,
                        response: r
                    };
                    t["default"].run(null , i, c)
                }
                ,
                t["default"].$.ajax(n)
            }
            )
        }
    })
      , n = a.create();
    e["default"] = n
}),
define("vine-ember/services/authentication/core", ["exports", "ember"], function(e, t) {
    var a = {};
    a.setup = function(e, a, n) {
        n = n || {},
        this.routeAfterLogin = n.routeAfterLogin || "index",
        this.routeAfterLogout = n.routeAfterLogout || "index",
        this.loginRoute = n.loginRoute || "login",
        this.serverTokenEndpoint = n.serverTokenEndpoint || "/token",
        this.autoRefreshToken = t["default"].isEmpty(n.autoRefreshToken) ? !0 : !!n.autoRefreshToken;
        var r = this.Session.create();
        return a.register("simple_auth:session", r, {
            instantiate: !1,
            singleton: !0
        }),
        t["default"].$.each(["controller", "view", "route", "component"], function(e, t) {
            a.inject(t, "session", "simple_auth:session")
        }),
        t["default"].$.ajaxPrefilter(function(e, a, n) {
            var i = /^\/api\//;
            e.url.match(i) && (n.setRequestHeader("x-vine-client", window.APP_CONFIG.VINE_CLIENT),
            window.APP_CONFIG.VINE_CLIENT_IP && n.setRequestHeader("x-vine-client-ip", window.APP_CONFIG.VINE_CLIENT_IP),
            t["default"].isEmpty(r.get("authToken")) || n.setRequestHeader("vine-session-id", r.get("authToken")),
            t["default"].isEmpty(r.get("guestId")) || n.setRequestHeader("vine-guest-id", r.get("guestId")))
        }),
        r.fetchFlags()
    }
    ,
    e["default"] = a
}),
define("vine-ember/services/authentication/main", ["exports", "vine-ember/services/authentication/core", "vine-ember/services/authentication/session", "vine-ember/services/authentication/mixins/authenticated_route_mixin", "vine-ember/services/authentication/mixins/application_route_mixin"], function(e, t, a, n, r) {
    var i = t["default"];
    i.Session = a["default"],
    i.AuthenticatedRouteMixin = n["default"],
    i.ApplicationRouteMixin = r["default"],
    e["default"] = i
}),
define("vine-ember/services/authentication/mixins/application_route_mixin", ["exports", "ember", "vine-ember/services/authentication/core"], function(e, t, a) {
    var n = t["default"].Mixin.create({
        actions: {
            login: function() {
                this.transitionTo(a["default"].loginRoute)
            },
            loginSucceeded: function() {
                this.send("gaq", ["_trackEvent", "Login", "success"]);
                var e = this.get("session.attemptedTransition");
                this.get("session.suspended") || this.get("session.isEscUser") ? this.transitionTo("user-fallback", this.get("session.userId")) : e ? (e.retry(),
                this.set("session.attemptedTransition", void 0)) : this.controllerFor("application").get("modal.login") ? this.send("hideModal") : this.transitionTo(a["default"].routeAfterLogin),
                this.controllerFor("modal/login").send("doSuccessEvent")
            },
            loginFailed: function(e) {
                var t;
                "object" == typeof e ? t = e.response.error : e && (t = e),
                this.send("gaq", ["_trackEvent", "Login", "error", t])
            },
            logout: function(e) {
                this.get("services.user").unauthenticate()["finally"](function() {
                    this.get("session").destroy();
                    var t = e || a["default"].routeAfterLogout;
                    this.transitionTo(t)
                }
                .bind(this)),
                this.send("gaq", ["_trackEvent", "Login", "logout"])
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/services/authentication/mixins/authenticated_route_mixin", ["exports", "ember"], function(e, t) {
    var a = t["default"].Mixin.create({
        beforeModel: function(e) {
            this._super(e),
            this.get("session.isAuthenticated") || this.triggerLogin(e)
        },
        triggerLogin: function(e) {
            this.set("session.attemptedTransition", e),
            e.send("login")
        }
    });
    e["default"] = a
}),
define("vine-ember/services/authentication/session", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/user", "vine-ember/services/errors"], function(e, t, a, n, r) {
    var i = t["default"].Object.extend({
        init: function() {
            this._super(),
            this.setProperties({
                authToken: localStorage.authToken,
                userId: localStorage.userId,
                suspended: localStorage.suspended,
                isEscUser: localStorage.isEscUser,
                guestId: localStorage.guestId,
                canViewPostSources: localStorage.canViewPostSources
            }),
            this.logAuthentication()
        },
        _doSetup: function(e, t) {
            this.setProperties({
                authToken: e.key,
                userId: e.userIdStr,
                suspended: e.suspended,
                isEscUser: e.isEscUser
            }),
            this.fetchFlags(),
            this.logAuthentication(),
            t.resolve()
        },
        setup: function(e) {
            e = e || {};
            var a = t["default"].RSVP.defer();
            return this.get("isAuthenticated") && this.get("authToken") !== e.key ? n["default"].unauthenticate()["finally"](function() {
                this._doSetup(e, a)
            }
            .bind(this)) : this._doSetup(e, a),
            a.promise
        },
        setupFlags: function(e) {
            e = e || {};
            var t = ["showLongform", "enableWebLongformUpload", "maxLongformDuration", "guestId", "canViewPostSources", "enableHellban"]
              , a = {};
            t.forEach(function(t) {
                e.hasOwnProperty(t) && (a[t] = e[t])
            }),
            this.setProperties(a)
        },
        destroy: function() {
            return this.setProperties({
                authToken: void 0,
                userId: void 0,
                suspended: void 0,
                isEscUser: void 0
            }),
            this.fetchFlags()
        },
        isCurrentUser: function(e) {
            return this.get("userId") ? e === this.get("userId") : !1
        },
        isAuthenticated: t["default"].computed("authToken", function() {
            return !t["default"].isEmpty(this.get("authToken"))
        }),
        handlePropertyChange: function(e) {
            var a = this.get(e);
            t["default"].isEmpty(a) ? delete localStorage[e] : localStorage[e] = a
        },
        fetchFlags: function() {
            return a["default"].request("get", "/clientflags").then(function(e) {
                this.setupFlags(e.data)
            }
            .bind(this))["catch"](function(e) {
                var a = e && e.response && e.response.code
                  , n = [r["default"].REQUIRES_LOGIN, r["default"].INVALID_SESSION];
                return a && this.get("isAuthenticated") && n.contains(a) ? this.destroy() : t["default"].RSVP.reject(e)
            }
            .bind(this))
        },
        logAuthentication: function() {
            var e = this.get("isAuthenticated") ? "logged_in" : "logged_out";
            window._gaq && window._gaq.push(["_setCustomVar", 3, "authentication", e])
        },
        authTokenObserver: t["default"].observer(function() {
            this.handlePropertyChange("authToken")
        }, "authToken"),
        userIdObserver: t["default"].observer(function() {
            this.handlePropertyChange("userId")
        }, "userId"),
        suspendedObserver: t["default"].observer(function() {
            this.handlePropertyChange("suspended")
        }, "suspended"),
        isEscUserObserver: t["default"].observer(function() {
            this.handlePropertyChange("isEscUser")
        }, "isEscUser"),
        guestIdObserver: t["default"].observer(function() {
            this.handlePropertyChange("guestId")
        }, "guestId"),
        canViewPostSourcesObserver: t["default"].observer(function() {
            this.handlePropertyChange("canViewPostSources")
        }, "canViewPostSources")
    });
    e["default"] = i
}),
define("vine-ember/services/channels", ["exports", "ember", "vine-ember/services/api", "vine-ember/models/channel"], function(e, t, a, n) {
    var r = t["default"].Object.extend({
        setup: function() {
            if (this.get("channels"))
                return t["default"].RSVP.resolve();
            var e;
            window.CHANNELS_DATA && (e = window.CHANNELS_DATA,
            delete window.CHANNELS_DATA);
            var r = {
                all: 1,
                size: 50
            };
            return t["default"].RSVP.hash({
                channels: a["default"].cachedRequest("get", "/channels/featured", r, e, !1),
                featuredTimelines: a["default"].request("get", "/timelines/lists/featured")
            }).then(function(e) {
                var t = e.channels.data.records
                  , a = e.featuredTimelines.data.records
                  , r = t.concat(a).map(function(e) {
                    return n["default"].create(e)
                });
                return this.set("channels", r),
                r
            }
            .bind(this))
        },
        findAll: function() {
            return this.get("channels") ? t["default"].RSVP.resolve(this.get("channels")) : this.setup()
        },
        findById: function(e) {
            return this.findAll().then(function(t) {
                return t.findBy("channelIdStr", e)
            })
        },
        findByVanityUrl: function(e) {
            return a["default"].request("get", "/timelines/channels/vanity/" + e).then(function(e) {
                return n["default"].create(e.data.channel)
            })
        }
    })
      , i = r.create();
    e["default"] = i
}),
define("vine-ember/services/complaint", ["exports", "ember", "vine-ember/services/api"], function(e, t, a) {
    var n = t["default"].Object.extend({
        complaintData: void 0,
        setup: function() {
            return a["default"].request("get", "/complaints/menu").then(function(e) {
                return this.set("complaintData", e.data),
                e.data
            }
            .bind(this))["catch"](function() {
                return {}
            })
        },
        getCategory: function(e) {
            return this.get("complaintData") ? t["default"].RSVP.resolve(this.get("complaintData")[e] || {}) : this.setup().then(function(t) {
                return t[e] || {}
            })
        }
    })
      , r = n.create();
    e["default"] = r
}),
define("vine-ember/services/conversation", ["exports", "ember", "vine-ember/services/api", "vine-ember/models/post", "vine-ember/models/user", "vine-ember/services/pagination"], function(e, t, a, n, r, i) {
    var d = t["default"].Object.extend({
        conversation: function(e) {
            return a["default"].request("get", "/conversations/messages/" + e).then(function(e) {
                var t = n["default"].create(e.data)
                  , a = r["default"].create(t.user);
                return t.set("user", a),
                t.get("post") && t.setProperties(n["default"].create(t.get("post"))),
                t
            }, function(e) {
                if (e && e.response) {
                    var t = e.response.code;
                    switch (t) {
                    case 605:
                        return {
                            confirmation: {
                                error: {
                                    message: e.response.error
                                }
                            }
                        };
                    case 606:
                        return {
                            expired: !0,
                            expiredMessage: e.response.error,
                            resendable: !1
                        };
                    case 607:
                        return {
                            expired: !0,
                            maxLoops: !0,
                            expiredMessage: e.response.error
                        };
                    case 619:
                        return {
                            expired: !0,
                            expiredMessage: e.response.error,
                            resendable: !0
                        };
                    default:
                        return {
                            confirmation: {
                                error: !0
                            }
                        }
                    }
                }
            })
        },
        refreshToken: function(e) {
            return a["default"].request("get", "/conversations/tokens/" + e + "/resend")
        },
        unsubscribeEmail: function(e) {
            return a["default"].request("get", "/conversations/messages/" + e + "/unsubscribe")
        },
        vmPost: function(e, t) {
            var n = {
                postId: e,
                to: t.map(function(e) {
                    return {
                        userId: e
                    }
                }),
                created: moment().format()
            };
            return a["default"].request("post", "/conversations", JSON.stringify(n), {
                contentType: "application/json; charset=utf-8"
            })
        },
        searchRecipients: function(e, t) {
            var n = {};
            return t && (t.nextPage && (n.page = t.nextPage),
            t.anchorStr && (n.anchor = t.anchorStr)),
            n.st = "mention",
            a["default"].request("get", "/users/search/" + e, n).then(function(e) {
                return i["default"](e, r["default"])
            })
        }
    });
    e["default"] = d.create()
}),
define("vine-ember/services/errors", ["exports"], function(e) {
    e["default"] = {
        REQUIRES_LOGIN: 100,
        INVALID_SESSION: 103,
        DOES_NOT_EXIST: 900,
        DELETED: 903,
        DMCA: 904
    }
}),
define("vine-ember/services/jobs", ["exports", "ember", "vine-ember/services/api"], function(e, t, a) {
    var n = t["default"].Object.extend({
        jobPromise: null ,
        jobs: [],
        allJobs: function() {
            if (!t["default"].isEmpty(this.get("jobs")))
                return t["default"].RSVP.resolve(this.get("jobs"));
            var e = this.get("jobPromise");
            return e || (e = a["default"].ajax("/jobsApi/all").then(function(e) {
                var t = e.jobs;
                return t = t.map(function(e) {
                    return e.name = $("<span />").html(e.name).text(),
                    e
                }),
                this.set("jobs", t),
                t
            }
            .bind(this)),
            this.set("jobPromise", e)),
            e
        },
        job: function(e) {
            return this.allJobs().then(function(t) {
                return t.findBy("id", e)
            })
        }
    })
      , r = n.create();
    e["default"] = r
}),
define("vine-ember/services/list", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/timeline", "vine-ember/services/channels", "vine-ember/services/pagination", "vine-ember/models/list", "vine-ember/models/post"], function(e, t, a, n, r, i, d, c) {
    var s = 0
      , o = t["default"].Object.extend({
        list: function(e) {
            return a["default"].request("get", "/timelines/lists/" + e.list_id).then(function(e) {
                return d["default"].create(e.data)
            })
        },
        listPosts: function(e, t, a) {
            var r;
            return window.TIMELINES_DATA && window.TIMELINES_DATA[e.list_id] && (r = window.TIMELINES_DATA[e.list_id],
            delete window.TIMELINES_DATA[e.list_id]),
            n["default"]._getWithUrl("/timelines/lists/" + e.list_id + "/posts", t, r, a)
        },
        listVanity: function(e) {
            return a["default"].request("get", "/timelines/lists/vanity/" + e.vanity).then(function(e) {
                return e.data.headerPost && (e.data.headerPost = c["default"].create(e.data.headerPost)),
                d["default"].create(e.data)
            })
        },
        listVanityPosts: function(e, t) {
            return n["default"]._getWithUrl("/timelines/lists/vanity/" + e.vanity + "/posts", t)
        },
        pinnedBindings: function() {
            var e;
            return window.PINNED_BINDINGS_DATA && (e = window.PINNED_BINDINGS_DATA,
            delete window.PINNED_BINDINGS_DATA),
            a["default"].cachedRequest("get", "/timelines/lists/pinned", null , e, !1)
        },
        pinned: function(e, n, i) {
            var d, c = this, s = i.timelineSize || 3, o = this.pinnedBindings().then(function(e) {
                var t = {}
                  , a = e.data.channels;
                return Object.keys(a).forEach(function(e) {
                    t[a[e].timelineIdStr] = a[e].channelIdStr
                }),
                t
            });
            window.PINNED_LISTS_DATA && (d = window.PINNED_LISTS_DATA,
            delete window.PINNED_LISTS_DATA);
            var l = a["default"].cachedRequest("get", "/timelines/lists/web", n, d, !1).then(function(e) {
                return e.data.records
            });
            return t["default"].RSVP.hash({
                channelBindings: o,
                pinnedLists: l
            }).then(function(e) {
                return t["default"].RSVP.all(e.pinnedLists.map(function(a) {
                    return t["default"].RSVP.hash({
                        channel: r["default"].findById(e.channelBindings[a.timelineIdStr]),
                        posts: c.listPosts({
                            list_id: a.timelineIdStr
                        }, {
                            size: 2 * s
                        }).then(function(e) {
                            return e.posts.slice(0, s)
                        })
                    })
                }))
            })
        },
        editorial: function(e, t) {
            var n;
            return window.EDITORIAL_LISTS_DATA && (n = window.EDITORIAL_LISTS_DATA,
            s += 1,
            2 === s && (delete window.EDITORIAL_LISTS_DATA,
            s = 0)),
            a["default"].cachedRequest("get", "/timelines/lists/editorial", t, n, !1).then(function(e) {
                return i["default"](e, d["default"])
            })
        },
        editorialWithPosts: function(e, a, n) {
            a = a || {};
            var r = this;
            return this.editorial(e, a).then(function(e) {
                return e.posts = e.posts.slice(n || 0, a.size),
                e.pagination.size = a.size,
                e.posts = t["default"].RSVP.all(e.posts.map(function(e) {
                    return r.listPosts({
                        list_id: e.timelineIdStr
                    }).then(function(t) {
                        var a = t.posts;
                        return a.pagination = t.pagination,
                        a.list = e,
                        a
                    }, function() {
                        return {
                            list: e
                        }
                    })
                })),
                t["default"].RSVP.hash({
                    posts: e.posts,
                    pagination: e.pagination
                })
            })
        },
        trends: function(e, t) {
            var n = "/timelines/lists/categories/trends";
            return e.sort && (n += "?sort=" + e.sort),
            a["default"].request("get", n, t).then(function(e) {
                return i["default"](e, d["default"])
            })
        },
        trendsWithPosts: function(e, a) {
            a = a || {};
            var n = this;
            return this.trends(e, a).then(function(e) {
                return e.pagination.size = a.size,
                e.posts = t["default"].RSVP.all(e.posts.map(function(e) {
                    return e.set("isTrend", !0),
                    n.listPosts({
                        list_id: e.timelineIdStr
                    }).then(function(t) {
                        var a = t.posts;
                        return a.pagination = t.pagination,
                        a.list = e,
                        a
                    })["catch"](function() {
                        return {
                            list: e
                        }
                    })
                })),
                t["default"].RSVP.hash({
                    posts: e.posts,
                    pagination: e.pagination
                })
            })
        },
        trendsHeader: function() {
            var e = "1301733212338692096"
              , t = {
                list_id: e
            };
            return this.list(t).then(function(e) {
                return this.listPosts(t).then(function(t) {
                    return t.posts.length && (e.post = c["default"].create(t.posts[0])),
                    e
                })
            }
            .bind(this))
        },
        homepage: function(e, t) {
            var a = "1026801023840313344";
            return this.listPosts({
                list_id: a
            }, t, !1).then(function(e) {
                return e.posts = e.posts.filter(function(e) {
                    return !e.get("explicitContent")
                }),
                e
            })
        }
    })
      , l = o.create();
    e["default"] = l
}),
define("vine-ember/services/loop-tracker", ["exports", "ember", "vine-ember/services/api", "vine-ember/utils/loop-incrementor", "vine-ember/config/environment"], function(e, t, a, n, r) {
    Date.now || (Date.now = function() {
        return (new Date).getTime()
    }
    );
    var i = t["default"].Object.extend({
        name: "main",
        currentLoopSet: null ,
        nextUpdateTimestamp: 0,
        enabled: !0,
        pendingLoops: [],
        init: function() {
            var e = t["default"].A(JSON.parse(window.localStorage[this.get("pendingLoopLocalStorageKey")] || "[]"));
            this.set("pendingLoops", e),
            e.length && this._flush(!0),
            $(window).unload(this._flush.bind(this, !0))
        },
        pendingLoopLocalStorageKey: function() {
            return this.get("name") + "PendingLoops"
        }
        .property("name"),
        totalPendingLoops: function() {
            var e = 0;
            return this.get("pendingLoops").forEach(function(t) {
                e += t.count
            }),
            e
        }
        .property("pendingLoops", "pendingLoops.length", "pendingLoops.@each.count"),
        startPlaying: function(e) {
            this.get("currentLoopSet") && 0 === this.get("currentLoopSet.count") && this.get("pendingLoops").popObject(),
            this.set("currentLoopSet", t["default"].Object.create({
                postId: e,
                count: 0,
                ts: 0
            })),
            this.get("pendingLoops").pushObject(this.get("currentLoopSet"))
        },
        recordLoop: function(e) {
            n["default"].addLoopTo(e);
            var t = this.get("currentLoopSet");
            if (t && this.get("enabled")) {
                var a = Date.now() / 1e3;
                if (a - t.get("ts") < 2)
                    return this.set("enabled", !1),
                    this.set("currentLoopSet", null ),
                    void this.get("pendingLoops").clear();
                t.get("count") < 25 && t.incrementProperty("count"),
                t.set("ts", a),
                this._flush()
            }
        },
        _saveLoopsToLocalStorage: function() {
            window.localStorage[this.get("pendingLoopLocalStorageKey")] = JSON.stringify(this.get("pendingLoops"))
        }
        .observes("pendingLoops"),
        _flush: function(e) {
            if (!(r["default"].LOOP_RECORDING_DISABLED || !e && this.get("nextUpdateTimestamp") && Date.now() < this.get("nextUpdateTimestamp"))) {
                var t = this.get("pendingLoops").filter(function(e) {
                    return e.count
                });
                if (t.length) {
                    this.get("pendingLoops").clear();
                    var n = this.get("currentLoopSet");
                    n && this.startPlaying(n.postId),
                    this.incrementProperty("nextUpdateTimestamp", 3e4),
                    a["default"].ajax("/api/loops", "post", {
                        async: !e,
                        headers: {
                            "X-Request-Id": this.generateRequestId()
                        },
                        contentType: "application/json",
                        data: JSON.stringify({
                            loops: t
                        })
                    }).then(function(e) {
                        this.set("nextUpdateTimestamp", Date.now() + 1e3 * (e.nextAfter || 30))
                    }
                    .bind(this))["catch"](function() {
                        this.get("pendingLoops").unshiftObjects(t)
                    }
                    .bind(this))
                }
            }
        },
        generateRequestId: function() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
                var t = 16 * Math.random() | 0
                  , a = "x" === e ? t : 3 & t | 8;
                return a.toString(16)
            })
        }
    });
    e["default"] = i
}),
define("vine-ember/services/pagination", ["exports", "ember"], function(e, t) {
    function a(e, t) {
        var a = e.data
          , r = a.records
          , i = a.context
          , d = a.title
          , c = n.create();
        c.setup(a),
        t && (r = r.map(function(e) {
            return t.create(e)
        }));
        var s = {
            posts: r,
            pagination: c
        };
        return i && (s.context = i),
        d && (s.title = d),
        s
    }
    var n = t["default"].Object.extend({
        fields: ["anchor", "anchorStr", "count", "nextPage", "previousPage", "size"],
        setup: function(e) {
            this.get("fields").forEach(function(t) {
                this.set(t, e[t])
            }
            .bind(this))
        }
    });
    e["default"] = a
}),
define("vine-ember/services/password", ["exports", "ember", "vine-ember/services/api"], function(e, t, a) {
    var n = t["default"].Object.extend({
        forgotPassword: function(e) {
            return a["default"].request("get", "/users/forgotPassword", {
                email: e
            })
        },
        resetPassword: function(e, t) {
            return a["default"].request("post", "/users/resetPassword", {
                token: e,
                password: t
            })
        }
    });
    e["default"] = n.create()
}),
define("vine-ember/services/post", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/pagination"], function(e, t, a, n) {
    var r = t["default"].Object.extend({
        like: function(e) {
            return a["default"].request("post", "/posts/" + e + "/likes")
        },
        unLike: function(e) {
            return a["default"].request("delete", "/posts/" + e + "/likes")
        },
        revine: function(e) {
            return a["default"].request("post", "/posts/" + e + "/repost").then(function(e) {
                return e.data
            })
        },
        unRevine: function(e, t) {
            return a["default"].request("delete", "/posts/" + e + "/repost/" + t)
        },
        comment: function(e, t) {
            return a["default"].request("post", "/posts/" + e + "/comments", {
                comment: t
            }).then(function(e) {
                return e.data
            })
        },
        comments: function(e, t) {
            return a["default"].request("get", "/posts/" + e + "/comments", t).then(n["default"])
        },
        report: function(e, t) {
            return a["default"].request("post", "/posts/" + e + "/complaints", t)
        },
        deletePost: function(e) {
            return a["default"].request("delete", "/posts/" + e)
        }
    });
    e["default"] = r.create()
}),
define("vine-ember/services/safety", ["exports", "ember", "vine-ember/services/api"], function(e, t, a) {
    var n = 100
      , r = t["default"].Object.extend({
        banWords: function(e, t) {
            var n = {
                userId: e,
                words: t
            };
            return a["default"].request("post", "/keywords/users/" + e, JSON.stringify(n), {
                contentType: "application/json; charset=utf-8"
            })
        },
        unbanWords: function(e, t) {
            var n = {
                userId: e,
                words: t
            };
            return a["default"].request("delete", "/keywords/users/" + e, JSON.stringify(n), {
                contentType: "application/json; charset=utf-8"
            })
        },
        getBannedWords: function(e) {
            return a["default"].request("get", "/keywords/users/" + e, {
                size: n
            })
        }
    });
    e["default"] = r.create()
}),
define("vine-ember/services/search", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/pagination", "vine-ember/models/user", "vine-ember/models/post", "vine-ember/models/tag"], function(e, t, a, n, r, i, d) {
    var c = t["default"].Object.extend({
        tags: function(e, t) {
            return a["default"].request("get", "/tags/search/" + encodeURIComponent(e.query), t).then(function(e) {
                return n["default"](e, d["default"])
            })["catch"](function() {
                return {
                    posts: []
                }
            })
        },
        users: function(e, t) {
            return a["default"].request("get", "/users/search/" + encodeURIComponent(e.query), t).then(function(e) {
                return n["default"](e, r["default"])
            })["catch"](function() {
                return {
                    posts: []
                }
            })
        },
        venues: function(e, t) {
            return a["default"].request("get", "/venues/search/" + encodeURIComponent(e.query), t).then(n["default"])["catch"](function() {
                return {
                    posts: []
                }
            })
        },
        posts: function(e, t) {
            return a["default"].request("get", "/posts/search/" + encodeURIComponent(e.query), t).then(function(e) {
                return n["default"](e, i["default"])
            })["catch"](function() {
                return {
                    posts: []
                }
            })
        }
    })
      , s = c.create();
    e["default"] = s
}),
define("vine-ember/services/timeline", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/pagination", "vine-ember/models/post", "vine-ember/models/tag"], function(e, t, a, n, r, i) {
    function d(e) {
        return n["default"](e, r["default"])
    }
    var c = t["default"].Object.extend({
        urlParser: document.createElement("a"),
        _updateUrlsForPrivateContent: function(e, a) {
            return t["default"].$.each(e.posts, function(e, t) {
                (t["private"] || a) && (["videoUrl", "videoLowURL", "thumbnailUrl", "videoDashUrl"].forEach(function(e) {
                    t[e] && this._updateKeyWithSessionId(t, e)
                }
                .bind(this)),
                t.videoUrls && (t.videoUrls = t.videoUrls.map(function(e) {
                    return this._updateKeyWithSessionId(e, "videoUrl"),
                    e
                }
                .bind(this))))
            }
            .bind(this)),
            e
        },
        _updateKeyWithSessionId: function(e, t) {
            var a = this.urlParser;
            a.href = e[t],
            "https:" === a.protocol && (a.search.length > 1 ? a.search += "&" : a.search = "?",
            a.search += "vine-session-id=" + encodeURIComponent(window.localStorage.authToken),
            e[t] = a.href)
        },
        _getWithUrl: function(e, t, n, r, i) {
            return a["default"].cachedRequest("get", e, t, n, r).then(d).then(function(e) {
                return this._updateUrlsForPrivateContent(e, i)
            }
            .bind(this))
        },
        post: function(e, t) {
            var a;
            window.POST_DATA && window.POST_DATA[e.short_id] && (a = {
                records: [window.POST_DATA[e.short_id]]
            },
            delete window.POST_DATA[e.short_id],
            0 === Object.keys(window.POST_DATA).length && delete window.POST_DATA);
            var n = "/timelines/posts/s/" + e.short_id;
            return t && (n += "?" + $.param(t)),
            this._getWithUrl(n, null , a).then(function(e) {
                return e.posts[0]
            })
        },
        relatedVideos: function(e, t) {
            return this._getWithUrl("/timelines/similar/post/" + e.post_id, t)
        },
        remixes: function(e, t) {
            var a = "/timelines/remixes/post/" + e.post_id;
            return e.sort && (a += "?sort=" + e.sort),
            this._getWithUrl(a, t)
        },
        audioTrack: function(e, t) {
            var a = "/timelines/audio/" + e.track_id;
            return e.sort && (a += "?sort=" + e.sort),
            this._getWithUrl(a, t)
        },
        graph: function(e, t) {
            return this._getWithUrl("/timelines/graph", t)
        },
        user: function(e, t) {
            return this._getWithUrl("/timelines/users/" + e.user_id, t)
        },
        escUser: function(e, t) {
            return this._getWithUrl("/timelines/users/esc/" + e.user_id, t, null , null , !0)
        },
        userLikes: function(e, t) {
            return this._getWithUrl("/timelines/users/" + e.user_id + "/likes", t)
        },
        channel: function(e, t) {
            return this._getWithUrl("/timelines/channels/" + e.channel_id + "/popular", t)
        },
        tag: function(e, t) {
            return this._getWithUrl("/timelines/tags/" + e.tag, t).then(function(t) {
                return t.tag = i["default"].create({
                    tag: decodeURIComponent(e.tag)
                }),
                t
            })
        },
        venue: function(e, t) {
            return this._getWithUrl("/timelines/venues/" + e.venue_id, t)
        },
        popular: function(e, t) {
            var a;
            return window.POPULAR_NOW_DATA && (a = window.POPULAR_NOW_DATA,
            delete window.POPULAR_NOW_DATA),
            this._getWithUrl("/timelines/popular", t, a)
        },
        promoted: function(e, t) {
            var n;
            return window.EDITORS_PICKS_DATA && (n = window.EDITORS_PICKS_DATA,
            delete window.EDITORS_PICKS_DATA),
            a["default"].cachedRequest("get", "/timelines/promoted", t, n).then(d)
        },
        trendingTags: function(e, t) {
            var r;
            return window.TRENDING_TAGS_DATA && (r = window.TRENDING_TAGS_DATA,
            delete window.TRENDING_TAGS_DATA),
            a["default"].cachedRequest("get", "/tags/trending", null , r, !1).then(function(e) {
                return n["default"](e, i["default"])
            })
        }
    })
      , s = c.create();
    e["default"] = s
}),
define("vine-ember/services/twitter", ["exports", "ember", "vine-ember/services/api"], function(e, t, a) {
    var n = t["default"].Object.extend({
        accessToken: function() {
            return a["default"].ajax("/twitter/oauth/token", "get");
        }
    })
      , r = n.create();
    e["default"] = r
}),
define("vine-ember/services/url", ["exports", "ember", "vine-ember/services/api"], function(e, t, a) {
    var n = t["default"].Object.extend({
        reserveUrl: function(e, t) {
            return a["default"].request("put", "/users/" + e + "/vanity/" + t)
        },
        checkUrl: function(e, t) {
            return a["default"].request("get", "/users/" + e + "/vanityCheck/" + encodeURIComponent(t))
        },
        suggestions: function(e) {
            return a["default"].request("get", "/users/" + e + "/vanitySuggestions").then(function(e) {
                return e.data
            })
        }
    })
      , r = n.create();
    e["default"] = r
}),
define("vine-ember/services/user", ["exports", "ember", "vine-ember/services/api", "vine-ember/models/user", "vine-ember/services/authentication/core", "vine-ember/services/pagination"], function(e, t, a, n, r, i) {
    var d = t["default"].Object.extend({
        me: function() {
            return a["default"].request("get", "/users/me").then(function(e) {
                return n["default"].create(e.data)
            })
        },
        profile: function(e) {
            return e.vanity ? this.vanityProfile(e) : a["default"].request("get", "/users/profiles/" + e.user_id).then(function(e) {
                return n["default"].create(e.data)
            })
        },
        vanityProfile: function(e) {
            return a["default"].request("get", "/users/profiles/vanity/" + e.vanity).then(function(e) {
                return n["default"].create(e.data)
            })
        },
        follow: function(e) {
            return a["default"].request("post", "/users/" + e + "/followers")
        },
        unFollow: function(e) {
            return a["default"].request("delete", "/users/" + e + "/followers")
        },
        authTwitter: function(e, t, n) {
            return n = $.extend(n || {}, {
                twitterOauthToken: e,
                twitterOauthSecret: t
            }),
            a["default"].request("post", "/users/authenticate/twitter", n)
        },
        authenticate: function(e, t, n) {
            return n = $.extend(n || {}, {
                username: e,
                password: t
            }),
            a["default"].request("post", r["default"].serverTokenEndpoint, n)
        },
        unauthenticate: function() {
            return a["default"].request("delete", r["default"].serverTokenEndpoint)
        },
        setProfile: function(e, t) {
            var n = {};
            return t.description && (n.description = t.description),
            t.location && (n.location = t.location),
            t.username && (n.username = t.username),
            a["default"].request("put", "/users/" + e, n)
        },
        setLocation: function(e, t) {
            return a["default"].request("put", "/users/" + e, {
                location: t
            })
        },
        setEmail: function(e, t) {
            return a["default"].request("put", "/users/" + e, {
                email: t
            })
        },
        setPrivate: function(e, t) {
            return a["default"].request("put", "/users/" + e, {
                "private": t
            })
        },
        verifyEmail: function(e) {
            return a["default"].request("post", "/users/verifyEmail", {
                t: e
            })
        },
        sendEmailVerification: function() {
            return a["default"].request("post", "/users/verifyEmail")
        },
        restoreAccess: function(e) {
            return a["default"].request("delete", "/users/" + e + "/escSuspend")
        },
        markCompliant: function(e) {
            return a["default"].request("delete", "/users/" + e + "/esc")
        },
        setProfileBackground: function(e, t) {
            return a["default"].request("put", "/users/" + e, {
                profileBackground: t
            })
        },
        setHiddenTwitter: function(e, t) {
            return a["default"].request("put", "/users/" + e + "/preferences", {
                hiddenTwitter: t
            })
        },
        vmRecipients: function(e) {
            e = e || {},
            e.type = "compose";
            var t = window.localStorage.userId;
            return a["default"].request("get", "/users/" + t + "/friends", e).then(function(e) {
                return i["default"](e, n["default"])
            })
        },
        blockUser: function(e, t) {
            return a["default"].request("post", "/users/" + t + "/blocked/" + e)
        },
        setRemixDisabled: function(e, t) {
            return a["default"].request("put", "/users/" + e + "/preferences", {
                remixDisabled: t
            })
        }
    })
      , c = d.create();
    e["default"] = c
}),
define("vine-ember/services/video-preload-queue", ["exports", "ember"], function(e, t) {
    var a = t["default"].Object.extend({
        queue: [],
        rates: [],
        rate: 1 / 0,
        rateBufferLength: 5,
        maxRateThreshold: 5e3,
        _alreadyPreloaded: {},
        _preloadedCount: 0,
        _queueInitialized: !1,
        _currentPlayerRequest: null ,
        _currentlyPreloading: !1,
        reset: function() {
            this.setProperties({
                canUnlockPreload: !1,
                _preloadedCount: 0,
                _queueInitialized: !1,
                queue: []
            })
        },
        queueUrl: function(e, a) {
            if (a = a || {},
            this.set("_queueInitialized", !0),
            !t["default"].isEmpty(e)) {
                var n = this.getVideoObject(e, a);
                this.get("_alreadyPreloaded")[n.url] || (this.get("_alreadyPreloaded")[n.url] = !0,
                this.get("queue").pushObject(n))
            }
        },
        getVideoData: function(e, t) {
            t = t || {},
            this.set("_queueInitialized", !0);
            var a = this.getVideoObject(e, t);
            return this.get("_alreadyPreloaded")[a.url] = !0,
            this._fetchVideo(a, {
                isPlayer: !0,
                needsUrl: !!t.needsUrl,
                forceLoad: t.forceLoad
            })["finally"](function() {
                this.set("_currentPlayerRequest", null )
            }
            .bind(this))
        },
        getVideoObject: function(e, t) {
            t = t || {};
            var a = t.isSeamless ? "dash" : "h264"
              , n = e.filterBy("format", a);
            n.sortBy("rate").reverse();
            var r;
            if (n.length)
                if (t.forceHd)
                    r = n[0].videoUrl;
                else {
                    var i = this.get("rate")
                      , d = n.find(function(e) {
                        return e.rate <= i
                    });
                    r = d.videoUrl
                }
            var c = {
                url: r,
                type: t.isSeamless ? "arraybuffer" : "blob",
                isFirstLoad: !this.get("_alreadyPreloaded")[r]
            };
            return c
        },
        _preloadChanged: function() {
            if (this.get("_queueInitialized")) {
                var e = 0 === this.get("queue").length || this.get("_preloadedCount") > 10;
                this.set("canUnlockPreload", e)
            }
        }
        .observes("queue.length", "_preloadedCount"),
        _queueChanged: function() {
            if (!this.get("_currentPlayerRequest") && !this.get("_currentlyPreloading") && 0 !== this.get("queue.length")) {
                this.set("_currentlyPreloading", !0);
                var e = this.get("queue").shiftObject();
                this._fetchVideo(e, !1)["finally"](function() {
                    this.set("_currentlyPreloading", !1)
                }
                .bind(this))
            }
        }
        .observes("queue.length", "_currentlyPreloading", "_currentPlayerRequest"),
        _logRate: function(e) {
            var t = this.get("rates");
            t.push(e),
            t.length > this.get("rateBufferLength") && t.shift();
            var a = t.slice(0);
            if (a = a.filter(function(e) {
                return e < this.get("maxRateThreshold")
            }
            .bind(this)),
            a.length) {
                var n = a.reduce(function(e, t) {
                    return e + t
                }, 0);
                this.set("rate", n / a.length)
            }
        },
        _fetchVideo: function(e, a) {
            a = a || {};
            var n = this.get("_currentPlayerRequest");
            if (a.isPlayer && n && !n.forceLoad) {
                if (n.url === e.url)
                    return n.promise;
                n.xhr && (n.xhr.abort(),
                this.set("_currentPlayerRequest", null ))
            }
            return a.needsUrl ? t["default"].RSVP.resolve(e.url) : this._requestVideoData(e, a)["finally"](function() {
                this.incrementProperty("_preloadedCount")
            }
            .bind(this))
        },
        _requestVideoData: function(e, a) {
            a = a || {};
            var n = new window.XMLHttpRequest
              , r = new t["default"].RSVP.Promise(function(a, r) {
                n.addEventListener("load", function() {
                    var d = n.response;
                    if (e.isFirstLoad) {
                        var c, s = ((new Date).getTime() - i) / 1e3, o = d instanceof Blob, l = d instanceof ArrayBuffer;
                        if (l ? c = d.byteLength : o && (c = d.size),
                        c) {
                            var h = c / 1024 / s;
                            this._logRate(h)
                        }
                    }
                    200 === n.status ? t["default"].run(null , a, d) : t["default"].run(null , r)
                }
                .bind(this)),
                n.addEventListener("error", function(e) {
                    t["default"].run(null , r, e)
                });
                var i = (new Date).getTime();
                n.open("GET", e.url, !0),
                n.responseType = e.type || "blob",
                n.send()
            }
            .bind(this));
            return a.isPlayer && this.set("_currentPlayerRequest", {
                url: e.url,
                promise: r,
                xhr: n,
                forceLoad: a.forceLoad
            }),
            r
        }
    })
      , n = a.create();
    e["default"] = n
}),
define("vine-ember/templates/application", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "render", ["current-user"], {}),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "login-link small");
                    var n = e.createTextNode("Login");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["showModal", "login"], {}),
                    d
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createElement("strong")
                              , n = e.createTextNode("Introducing Vine Messages");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n            ");
                            e.appendChild(t, a);
                            var a = e.createElement("span")
                              , n = e.createTextNode("Learn More");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createElement("strong")
                              , n = e.createTextNode("Introducing Vine Messages");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode(" Fun & easy video conversations with friends –\n            ");
                            e.appendChild(t, a);
                            var a = e.createElement("span")
                              , n = e.createTextNode("Learn More\n            ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(n.childAt(d, [3]), 1, 1);
                            return i(t, c, e, "cdn-img", [], {
                                src: "images/carrow.svg"
                            }),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "global-banner");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("h3")
                          , r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("        ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "share-close");
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block
                          , o = d.element
                          , l = d.inline;
                        i.detectNamespace(r);
                        var h;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                        this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                        this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                        var u = i.childAt(h, [1])
                          , p = i.childAt(u, [3])
                          , m = i.createMorphAt(i.childAt(u, [1]), 1, 1)
                          , v = i.createMorphAt(p, 1, 1);
                        return s(n, m, a, "if", [c(n, a, "isMobile")], {}, e, t),
                        o(n, p, a, "action", ["closeBanner", "vms"], {}),
                        l(n, v, a, "cdn-img", [], {
                            src: "images/close_x_white.svg"
                        }),
                        h
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null ),
                    r.insertBoundary(c, 0),
                    d(a, s, t, "link-to", ["promo.vm"], {}, e, null ),
                    c
                }
            }
        }()
          , n = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "render", ["modal/login"], {}),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "render", ["modal/post"], {}),
                        d
                    }
                }
            }()
              , a = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "render", ["modal/job"], {}),
                        d
                    }
                }
            }()
              , n = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "render", ["modal/embed"], {}),
                        d
                    }
                }
            }()
              , r = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "render", ["modal/flash-error"], {}),
                        d
                    }
                }
            }()
              , i = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "render", ["modal/vm"], {}),
                        d
                    }
                }
            }()
              , d = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "render", ["modal/report"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(c, s, o) {
                    var l = s.dom
                      , h = s.hooks
                      , u = h.get
                      , p = h.block;
                    l.detectNamespace(o);
                    var m;
                    s.useFragmentCache && l.canClone ? (null === this.cachedFragment && (m = this.build(l),
                    this.hasRendered ? this.cachedFragment = m : this.hasRendered = !0),
                    this.cachedFragment && (m = l.cloneNode(this.cachedFragment, !0))) : m = this.build(l);
                    var v = l.createMorphAt(m, 1, 1, o)
                      , g = l.createMorphAt(m, 3, 3, o)
                      , b = l.createMorphAt(m, 5, 5, o)
                      , C = l.createMorphAt(m, 7, 7, o)
                      , f = l.createMorphAt(m, 9, 9, o)
                      , F = l.createMorphAt(m, 11, 11, o)
                      , N = l.createMorphAt(m, 13, 13, o);
                    return p(s, v, c, "if", [u(s, c, "modal.login")], {}, e, null ),
                    p(s, g, c, "if", [u(s, c, "modal.post")], {}, t, null ),
                    p(s, b, c, "if", [u(s, c, "modal.job")], {}, a, null ),
                    p(s, C, c, "if", [u(s, c, "modal.embed")], {}, n, null ),
                    p(s, f, c, "if", [u(s, c, "modal.flash-error")], {}, r, null ),
                    p(s, F, c, "if", [u(s, c, "modal.vm")], {}, i, null ),
                    p(s, N, c, "if", [u(s, c, "modal.report")], {}, d, null ),
                    m
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "id", "fb-root"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "outer-wrapper");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "id", "main-content");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "loading-bar"),
                e.setAttribute(a, "class", "loading-bar"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(r, i, d) {
                var c = i.dom
                  , s = i.hooks
                  , o = s.inline
                  , l = s.element
                  , h = s.get
                  , u = s.block
                  , p = s.content;
                c.detectNamespace(d);
                var m;
                i.useFragmentCache && c.canClone ? (null === this.cachedFragment && (m = this.build(c),
                this.hasRendered ? this.cachedFragment = m : this.hasRendered = !0),
                this.cachedFragment && (m = c.cloneNode(this.cachedFragment, !0))) : m = this.build(c);
                var v = c.childAt(m, [4])
                  , g = c.createMorphAt(m, 2, 2, d)
                  , b = c.createMorphAt(v, 1, 1)
                  , C = c.createMorphAt(v, 3, 3)
                  , f = c.createMorphAt(v, 5, 5)
                  , F = c.createMorphAt(c.childAt(v, [7]), 1, 1)
                  , N = c.createMorphAt(v, 9, 9)
                  , T = c.createMorphAt(m, 6, 6, d)
                  , x = c.createMorphAt(m, 8, 8, d)
                  , A = c.createMorphAt(m, 10, 10, d);
                return o(i, g, r, "render", ["playing-vine"], {}),
                l(i, v, r, "bind-attr", [], {
                    "class": "routeClass session.isAuthenticated:logged-in:logged-out hasNotification isMobile:mobile isTimeline isMessageBrokerOpen:hidden"
                }),
                o(i, b, r, "partial", ["header"], {}),
                u(i, C, r, "if", [h(i, r, "session.isAuthenticated")], {}, e, t),
                u(i, f, r, "if", [h(i, r, "hasNotification")], {}, a, null ),
                p(i, F, r, "outlet"),
                o(i, N, r, "partial", ["footer"], {}),
                u(i, T, r, "if", [h(i, r, "modal")], {}, n, null ),
                o(i, x, r, "iframe-modal", [], {
                    key: "upload",
                    "start-when": h(i, r, "upload"),
                    "show-when": h(i, r, "showUpload"),
                    minimized: h(i, r, "uploadMinimized"),
                    host: h(i, r, "iFrameHost"),
                    path: "upload"
                }),
                o(i, A, r, "iframe-modal", [], {
                    key: "watching",
                    "start-when": h(i, r, "watching"),
                    "show-when": h(i, r, "showWatching"),
                    host: h(i, r, "iFrameHost"),
                    path: "watch/:longformIdStr",
                    params: h(i, r, "currentLongform")
                }),
                m
            }
        }
    }())
}),
define("vine-ember/templates/audio-attribution", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("'s Vine");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, 0),
                        i(t, c, e, "audioSource.username"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "class", "attribution-text");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "icon-music"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("Original audio from\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("span")
                      , n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.element
                      , c = i.get
                      , s = i.block;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.childAt(o, [3])
                      , h = r.createMorphAt(l, 1, 1);
                    return d(a, l, t, "action", ["logAttributionClick"], {
                        bubbles: !1
                    }),
                    s(a, h, t, "link-to", [c(a, t, "attributionRoute.name"), c(a, t, "attributionRoute.param")], {}, e, null ),
                    o
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode(" - ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a)
                              , s = n.createMorphAt(d, 2, 2, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "audioTrack.artistName"),
                            i(t, s, e, "audioTrack.trackName"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "attribution-text");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-music"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n      ");
                        e.appendChild(t, a);
                        var a = e.createElement("span")
                          , n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.element
                          , c = i.get
                          , s = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [3])
                          , h = r.createMorphAt(l, 1, 1);
                        return d(a, l, t, "action", ["logAttributionClick"], {
                            bubbles: !1
                        }),
                        s(a, h, t, "link-to", [c(a, t, "attributionRoute.name"), c(a, t, "attributionRoute.param")], {}, e, null ),
                        o
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "attribution-text");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-music"),
                        e.appendChild(a, n);
                        var n = e.createElement("span")
                          , r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode(" - ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [1, 2])
                          , s = n.createMorphAt(c, 0, 0)
                          , o = n.createMorphAt(c, 2, 2);
                        return i(t, s, e, "audioTrack.artistName"),
                        i(t, o, e, "audioTrack.trackName"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "audioTrack.hasAudioTrackTimeline")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "audio-attribution");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(i.childAt(o, [0]), 1, 1);
                return s(n, l, a, "if", [c(n, a, "audioSource")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/components/animated-button", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("span");
                e.appendChild(t, a);
                var a = e.createElement("span");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.element
                  , c = r.content;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var o = n.childAt(s, [0])
                  , l = n.childAt(s, [1])
                  , h = n.createMorphAt(s, 3, 3, a);
                return d(t, o, e, "bind-attr", [], {
                    "class": i(t, e, "iconClass")
                }),
                d(t, l, e, "bind-attr", [], {
                    "class": i(t, e, "iconClass")
                }),
                c(t, h, e, "yield"),
                s
            }
        }
    }())
}),
define("vine-ember/templates/components/attribution-icon", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("div");
                        return e.setAttribute(a, "class", "icon-music"),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [0]);
                        return i(t, c, e, "action", ["logAttributionClick"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 1, 1, n);
                    return c(a, o, t, "link-to", [d(a, t, "link.name"), d(a, t, "link.param")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-music"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "link")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/components/banned-word", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("span");
                e.setAttribute(a, "class", "censored");
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.content;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var c = n.createMorphAt(n.childAt(d, [0]), 0, 0);
                return i(t, c, e, "censored"),
                d
            }
        }
    }())
}),
define("vine-ember/templates/components/banned-words-editor", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.inline;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.createMorphAt(c, 0, 0, a);
                return n.insertBoundary(c, 0),
                d(t, s, e, "textarea", [], {
                    value: i(t, e, "value"),
                    placeholder: i(t, e, "placeholder"),
                    id: "banned-words__editor"
                }),
                c
            }
        }
    }())
}),
define("vine-ember/templates/components/banned-words", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 0, 0, a);
                    return n.insertBoundary(c, null ),
                    n.insertBoundary(c, 0),
                    d(t, s, e, "banned-word", [], {
                        select: "select",
                        unselect: "unselect",
                        unban: "unban",
                        hoverOn: "hoverOn",
                        hoverOff: "hoverOff",
                        isSelected: i(t, e, "isSelected"),
                        body: i(t, e, "body"),
                        width: i(t, e, "width"),
                        hovering: i(t, e, "hovering")
                    }),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "id", "banned-words");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("span")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block
                  , s = i.inline
                  , o = i.element
                  , l = i.content;
                r.detectNamespace(n);
                var h;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (h = this.build(r),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = r.cloneNode(this.cachedFragment, !0))) : h = this.build(r);
                var u = r.childAt(h, [0])
                  , p = r.childAt(h, [2])
                  , m = r.createMorphAt(u, 1, 1)
                  , v = r.createMorphAt(u, 3, 3)
                  , g = r.createMorphAt(p, 1, 1);
                return c(a, m, t, "each", [d(a, t, "words")], {}, e, null ),
                s(a, v, t, "banned-words-editor", [], {
                    ban: "ban",
                    unselectAll: "unselectAll",
                    toggleSelectHelper: "toggleSelectHelper",
                    toggleHelpers: "toggleHelpers",
                    toggleWarning: "toggleWarning",
                    placeholder: d(a, t, "placeholder"),
                    selected: d(a, t, "selected")
                }),
                o(a, p, t, "bind-attr", [], {
                    "class": ":helper message::hidden"
                }),
                l(a, g, t, "message"),
                h
            }
        }
    }())
}),
define("vine-ember/templates/components/channel-badge", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "secure-img", [], {
                        "class": "icon",
                        src: i(t, e, "iconUrl"),
                        title: i(t, e, "channel")
                    }),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "if", [d(a, t, "iconUrl")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/components/comment-form", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.inline;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.createMorphAt(c, 0, 0, a);
                return n.insertBoundary(c, 0),
                d(t, s, e, "my-input", [], {
                    name: "comment",
                    value: i(t, e, "value"),
                    placeholder: "Say something nice",
                    maxlength: "140"
                }),
                c
            }
        }
    }())
}),
define("vine-ember/templates/components/custom-styles", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "custom-styles");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.content;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var c = n.createMorphAt(n.childAt(d, [0]), 1, 1);
                return i(t, c, e, "yield"),
                d
            }
        }
    }())
}),
define("vine-ember/templates/components/download-buttons", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "download-button"),
                e.setAttribute(a, "data-device", "apple");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-apple"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("span");
                e.setAttribute(n, "class", "download-text");
                var r = e.createTextNode("Get it for ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "client-name");
                var i = e.createTextNode("iOS");
                e.appendChild(r, i),
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "download-button"),
                e.setAttribute(a, "data-device", "android");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-android"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("span");
                e.setAttribute(n, "class", "download-text");
                var r = e.createTextNode("Get it for ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "client-name");
                var i = e.createTextNode("Android");
                e.appendChild(r, i),
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "download-button"),
                e.setAttribute(a, "data-device", "windows");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-windows_phone"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("span");
                e.setAttribute(n, "class", "download-text");
                var r = e.createTextNode("Get it for ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "client-name");
                var i = e.createTextNode("Windows");
                e.appendChild(r, i),
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.element;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var c = n.childAt(d, [0])
                  , s = n.childAt(d, [2])
                  , o = n.childAt(d, [4]);
                return i(t, c, e, "action", ["goToStore", "apple"], {}),
                i(t, s, e, "action", ["goToStore", "android"], {}),
                i(t, o, e, "action", ["goToStore", "windows"], {}),
                d
            }
        }
    }())
}),
define("vine-ember/templates/components/follow-button", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "button-icon");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-profile"),
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-check_mark"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n    Follow Requested\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "button-icon");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("span");
                            e.setAttribute(n, "class", "icon-profile"),
                            e.appendChild(a, n);
                            var n = e.createElement("span");
                            e.setAttribute(n, "class", "icon-check_mark"),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n      Following\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "button-icon");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("span");
                            e.setAttribute(n, "class", "icon-plus"),
                            e.appendChild(a, n);
                            var n = e.createElement("span");
                            e.setAttribute(n, "class", "icon-profile"),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n      Follow\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null ),
                        i.insertBoundary(o, 0),
                        s(n, l, a, "if", [c(n, a, "following")], {}, e, t),
                        o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "followRequested")], {}, e, t),
                    o
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "icon-plus"),
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "icon-profile"),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "icon-profile"),
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "icon-check_mark"),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "unless", [c(n, a, "following")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isLarge")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/components/header-logo", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("strong")
                          , n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                        return i(t, c, e, "mobileTitle"),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "icon-vine_logo"),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "clear logo");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                    return s(n, l, a, "if", [c(n, a, "mobileTitle")], {}, e, t),
                    o
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("div");
                        e.setAttribute(a, "class", "logo");
                        var n = e.createElement("div");
                        return e.setAttribute(n, "class", "icon-vine_logo"),
                        e.appendChild(a, n),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(c, 1, 1, n);
                    return d(a, s, t, "link-to", ["index"], {}, e, null ),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/components/iframe-modal", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("iframe");
                    e.setAttribute(n, "allowfullscreen", ""),
                    e.setAttribute(n, "webkitallowfullscreen", ""),
                    e.setAttribute(n, "mozallowfullscreen", ""),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.concat
                      , s = r.attribute;
                    n.detectNamespace(a);
                    var o;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (o = this.build(n),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = n.cloneNode(this.cachedFragment, !0))) : o = this.build(n);
                    var l = n.childAt(o, [1])
                      , h = n.childAt(l, [1])
                      , u = n.createAttrMorph(h, "class")
                      , p = n.createAttrMorph(h, "src");
                    return i(t, l, e, "bind-attr", [], {
                        "class": "start-when:iframe-modal show-when:show-iframe-modal minimized:minimized-iframe-modal"
                    }),
                    s(t, u, h, "class", c(t, ["iframe-modal-", d(t, e, "key")])),
                    s(t, p, h, "src", d(t, e, "modalSrc")),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "if", [d(a, t, "start-when")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/components/link-user", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 0, 0, a);
                    return n.insertBoundary(d, null ),
                    n.insertBoundary(d, 0),
                    i(t, c, e, "yield"),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "link-to", [d(a, t, "routeInfo.name"), d(a, t, "routeInfo.param")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/components/linkify-entities", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "title"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 1, 1, n);
                        return c(a, o, t, "link-to", [d(a, t, "route"), d(a, t, "param")], {}, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "this"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "route")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "each", [d(a, t, "linkifiedEntities")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/components/loop-count", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "class", "icon-fire"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "class", "loops-extra");
                    var n = e.createTextNode("+");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "counter seeded");
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("span");
                e.setAttribute(a, "class", "loops-label");
                var n = e.createTextNode("Loops");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block
                  , o = d.inline;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.createMorphAt(l, 0, 0, r)
                  , u = i.createMorphAt(i.childAt(l, [1]), 0, 0)
                  , p = i.createMorphAt(l, 3, 3, r);
                return i.insertBoundary(l, 0),
                s(n, h, a, "if", [c(n, a, "loops.onFire")], {}, e, null ),
                o(n, u, a, "unbound", [c(n, a, "formattedCount")], {}),
                s(n, p, a, "if", [c(n, a, "couldHaveUnrecordedLoops")], {}, t, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/components/mobile-interstitial", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "mobile-interstitial");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("img");
                e.setAttribute(n, "class", "thumbnail"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "mobile-interstitial-inner");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "mobile-interstitial-controls");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("p")
                  , d = e.createTextNode("\n        You must download the app to view longer videos!\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "class", "overlay-download-vine");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "vine-app-icon");
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "icon-v_logo logo"),
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span")
                  , c = e.createTextNode("Download Vine");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a")
                  , d = e.createTextNode("Open in app");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "class", "cancel");
                var d = e.createTextNode("Cancel");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.element;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.childAt(c, [0])
                  , o = n.childAt(s, [1])
                  , l = n.childAt(s, [3])
                  , h = n.childAt(l, [1])
                  , u = n.childAt(l, [3])
                  , p = n.childAt(u, [1])
                  , m = n.childAt(u, [3])
                  , v = n.childAt(u, [5])
                  , g = n.childAt(u, [7]);
                return d(t, o, e, "bind-attr", [], {
                    src: i(t, e, "secureThumbnailUrl")
                }),
                d(t, h, e, "bind-attr", [], {
                    "class": ":play isLongform:hidden"
                }),
                d(t, h, e, "action", ["hideMobileInterstitial"], {
                    target: "view"
                }),
                d(t, p, e, "bind-attr", [], {
                    "class": ":overlay-longform-prompt isLongform::hidden"
                }),
                d(t, m, e, "action", ["downloadVine"], {
                    bubbles: !1
                }),
                d(t, v, e, "action", ["openPostInApp"], {
                    bubbles: !1
                }),
                d(t, v, e, "bind-attr", [], {
                    "class": ":open-in-app showOpenInApp::hidden"
                }),
                d(t, g, e, "action", ["hideMobileInterstitial"], {}),
                c
            }
        }
    }())
}),
define("vine-ember/templates/components/modal-post-context", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var c = n.createMorphAt(d, 1, 1, a);
                                return i(t, c, e, "featuredTitle"),
                                d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n      ");
                            e.appendChild(t, a);
                            var a = e.createElement("h3");
                            e.setAttribute(a, "class", "module-title");
                            var n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.inline
                              , s = i.block;
                            r.detectNamespace(n);
                            var o;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                            this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                            this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                            var l = r.createMorphAt(o, 1, 1, n)
                              , h = r.createMorphAt(r.childAt(o, [3]), 1, 1);
                            return c(a, l, t, "channel-badge", [], {
                                backgroundStyle: d(a, t, "backgroundColorStyle"),
                                iconUrl: d(a, t, "channelIconUrl"),
                                channel: d(a, t, "channel")
                            }),
                            s(a, h, t, "channel-hover", [], {
                                color: d(a, t, "backgroundColor")
                            }, e, null ),
                            o
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "link-to", ["channel", d(a, t, "vanityUrl")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "with", [d(a, t, "postContext.channel")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "module-title");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element
                          , d = r.content;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1])
                          , o = n.createMorphAt(n.childAt(c, [3]), 0, 0);
                        return i(t, s, e, "bind-attr", [], {
                            "class": ":module-icon channel-badge custom.icon",
                            style: "custom.iconStyle"
                        }),
                        d(t, o, e, "custom.title"),
                        c
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "icon-popular_now module-icon"),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n        ");
                                e.appendChild(t, a);
                                var a = e.createElement("h3");
                                e.setAttribute(a, "class", "module-title");
                                var n = e.createTextNode("Popular Now");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                                r
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var s = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null ),
                            r.insertBoundary(c, 0),
                            d(a, s, t, "link-to", ["popular-now"], {}, e, null ),
                            c
                        }
                    }
                }()
                  , t = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "channel-badge editors-pick"),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n        ");
                                e.appendChild(t, a);
                                var a = e.createElement("h3");
                                e.setAttribute(a, "class", "module-title");
                                var n = e.createTextNode("Editor's Pick");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                                r
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var s = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null ),
                            r.insertBoundary(c, 0),
                            d(a, s, t, "link-to", ["editors-picks"], {}, e, null ),
                            c
                        }
                    }
                }()
                  , a = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "icon-list module-icon"),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n        ");
                                e.appendChild(t, a);
                                var a = e.createElement("h3");
                                e.setAttribute(a, "class", "module-title");
                                var n = e.createComment("");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n        ");
                                e.appendChild(t, a);
                                var a = e.createElement("h5");
                                e.setAttribute(a, "class", "post-position");
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode(" of ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.content
                                  , d = r.get
                                  , c = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var o = n.childAt(s, [5])
                                  , l = n.createMorphAt(n.childAt(s, [3]), 0, 0)
                                  , h = n.createMorphAt(o, 0, 0)
                                  , u = n.createMorphAt(o, 2, 2);
                                return i(t, l, e, "list.title"),
                                c(t, h, e, "format-count", [d(t, e, "positionIndex")], {}),
                                c(t, u, e, "format-count", [d(t, e, "listLength")], {}),
                                s
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                            this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var o = r.createMorphAt(s, 0, 0, n);
                            return r.insertBoundary(s, null ),
                            r.insertBoundary(s, 0),
                            c(a, o, t, "link-to", ["list", d(a, t, "list.vanityUrl")], {}, e, null ),
                            s
                        }
                    }
                }()
                  , n = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "icon-profile module-icon"),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n        ");
                                e.appendChild(t, a);
                                var a = e.createElement("h3");
                                e.setAttribute(a, "class", "module-title");
                                var n = e.createComment("");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var c = n.createMorphAt(n.childAt(d, [3]), 0, 0);
                                return i(t, c, e, "user.username"),
                                d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                            this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var o = r.createMorphAt(s, 0, 0, n);
                            return r.insertBoundary(s, null ),
                            r.insertBoundary(s, 0),
                            c(a, o, t, "link-user", [], {
                                user: d(a, t, "user")
                            }, e, null ),
                            s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(r, i, d) {
                        var c = i.dom
                          , s = i.hooks
                          , o = s.get
                          , l = s.block;
                        c.detectNamespace(d);
                        var h;
                        i.useFragmentCache && c.canClone ? (null === this.cachedFragment && (h = this.build(c),
                        this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                        this.cachedFragment && (h = c.cloneNode(this.cachedFragment, !0))) : h = this.build(c);
                        var u = c.createMorphAt(h, 0, 0, d)
                          , p = c.createMorphAt(h, 1, 1, d)
                          , m = c.createMorphAt(h, 2, 2, d)
                          , v = c.createMorphAt(h, 3, 3, d);
                        return c.insertBoundary(h, null ),
                        c.insertBoundary(h, 0),
                        l(i, u, r, "if", [o(i, r, "popularNow")], {}, e, null ),
                        l(i, p, r, "if", [o(i, r, "editorsPick")], {}, t, null ),
                        l(i, m, r, "if", [o(i, r, "list")], {}, a, null ),
                        l(i, v, r, "if", [o(i, r, "user")], {}, n, null ),
                        h
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "custom")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r)
                  , h = i.createMorphAt(o, 2, 2, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "postContext.channel")], {}, e, null ),
                s(n, h, a, "with", [c(n, a, "postContext")], {}, t, null ),
                o
            }
        }
    }())
}),
define("vine-ember/templates/components/module-block", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 0, 0, a);
                        return n.insertBoundary(c, null ),
                        n.insertBoundary(c, 0),
                        d(t, s, e, "secure-img", [], {
                            "class": "icon",
                            src: i(t, e, "iconUrl")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.element
                      , s = i.block;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.childAt(o, [1])
                      , h = r.createMorphAt(l, 1, 1);
                    return c(a, l, t, "bind-attr", [], {
                        "class": ":module-icon iconClass",
                        style: d(a, t, "backgroundStyle")
                    }),
                    s(a, h, t, "if", [d(a, t, "iconUrl")], {}, e, null ),
                    o
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("h3");
                            e.setAttribute(a, "class", "module-title");
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode(" ");
                            e.appendChild(a, n);
                            var n = e.createElement("span");
                            e.setAttribute(n, "class", "icon-carrow"),
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                            return i(t, c, e, "title"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "link-to", [d(a, t, "route"), d(a, t, "routeParams")], {}, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("h3");
                            e.setAttribute(a, "class", "module-title");
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode(" ");
                            e.appendChild(a, n);
                            var n = e.createElement("span");
                            e.setAttribute(n, "class", "icon-carrow"),
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                            return i(t, c, e, "title"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "link-to", [d(a, t, "route")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "routeParams")], {}, e, t),
                    o
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "module-title");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                    return i(t, c, e, "title"),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "module-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block
                  , l = c.content;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.createMorphAt(h, 0, 0, i)
                  , p = d.createMorphAt(h, 1, 1, i)
                  , m = d.createMorphAt(d.childAt(h, [2]), 1, 1);
                return d.insertBoundary(h, 0),
                o(r, u, n, "if", [s(r, n, "iconClass")], {}, e, null ),
                o(r, p, n, "if", [s(r, n, "route")], {}, t, a),
                l(r, m, n, "yield"),
                h
            }
        }
    }())
}),
define("vine-ember/templates/components/mouseover-video", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("span")
                      , n = e.createTextNode("\n      click to enlarge →\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "bind-attr", [], {
                        "class": ":clickToEnlargeText showClickToEnlargeText:slideIn"
                    }),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "watch-more", [], {
                        mini: !0,
                        post: i(t, e, "post")
                    }),
                    c
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["explicit-content"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "video-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "loading-bar"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.element
                  , l = c.block
                  , h = c.content;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0])
                  , m = d.createMorphAt(p, 3, 3)
                  , v = d.createMorphAt(p, 5, 5)
                  , g = d.createMorphAt(p, 7, 7)
                  , b = d.createMorphAt(u, 2, 2, i);
                return o(r, p, n, "bind-attr", [], {
                    style: s(r, n, "post.backgroundImageStyle")
                }),
                l(r, m, n, "if", [s(r, n, "clickToEnlarge")], {}, e, null ),
                l(r, v, n, "if", [s(r, n, "showLongform")], {}, t, null ),
                l(r, g, n, "if", [s(r, n, "post.explicitContent")], {}, a, null ),
                h(r, b, n, "yield"),
                u
            }
        }
    }())
}),
define("vine-ember/templates/components/nav-button", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("button")
                      , n = e.createElement("div");
                    return e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [0])
                      , o = n.childAt(s, [0]);
                    return i(t, s, e, "bind-attr", [], {
                        "class": ":clear :icon route"
                    }),
                    i(t, o, e, "bind-attr", [], {
                        "class": d(t, e, "iconClass")
                    }),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "link-to", [d(a, t, "route")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/components/paginated-comments", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("span");
                    e.setAttribute(a, "class", "dot");
                    var n = e.createTextNode("· ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("Load previous");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("strong")
                          , n = e.createComment("");
                        return e.appendChild(a, n),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(n.childAt(c, [0]), 0, 0);
                        return d(t, s, e, "replace-emoji", [i(t, e, "username")], {}),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("li")
                      , n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "comment-text");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.inline
                      , s = i.block;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.childAt(o, [1])
                      , h = r.childAt(l, [3])
                      , u = r.createMorphAt(l, 1, 1)
                      , p = r.createMorphAt(h, 1, 1)
                      , m = r.createMorphAt(h, 3, 3);
                    return c(a, u, t, "secure-img", [], {
                        src: d(a, t, "avatarUrl"),
                        "class": "avatar"
                    }),
                    s(a, p, t, "link-user", [], {
                        user: d(a, t, "this")
                    }, e, null ),
                    c(a, m, t, "linkify-entities", [], {
                        text: d(a, t, "comment"),
                        entities: d(a, t, "entities")
                    }),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("span");
                e.setAttribute(n, "class", "pagination-text");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "comment-count");
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode(" Comments");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.get
                  , o = d.inline
                  , l = d.block;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0])
                  , p = i.childAt(u, [1])
                  , m = i.createMorphAt(i.childAt(p, [1]), 0, 0)
                  , v = i.createMorphAt(p, 3, 3)
                  , g = i.createMorphAt(h, 2, 2, r);
                return i.insertBoundary(h, null ),
                c(n, u, a, "bind-attr", [], {
                    "class": ":comments-pagination hasMorePosts::disabled"
                }),
                c(n, u, a, "action", ["authenticatedNextPage"], {}),
                o(n, m, a, "format-count", [s(n, a, "pagination.count")], {}),
                l(n, v, a, "if", [s(n, a, "hasMoreComments")], {}, e, null ),
                l(n, g, a, "each", [s(n, a, "posts")], {}, t, null ),
                h
            }
        }
    }())
}),
define("vine-ember/templates/components/profile-background", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("span");
                return e.setAttribute(a, "class", "icon-smiley"),
                e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom;
                n.detectNamespace(a);
                var r;
                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                r
            }
        }
    }())
}),
define("vine-ember/templates/components/related-videos", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("img");
                    e.setAttribute(a, "class", "selected-post thumbnail"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1]);
                    return d(t, s, e, "bind-attr", [], {
                        src: i(t, e, "selectedPost")
                    }),
                    c
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "view", ["related-videos/post"], {}),
                        d
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("span");
                            return e.setAttribute(a, "class", "icon-plus"),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("See More");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "type", "button");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.element
                          , o = d.block;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.childAt(l, [1])
                          , u = i.createMorphAt(h, 1, 1);
                        return s(n, h, a, "bind-attr", [], {
                            disabled: c(n, a, "paginationLoading")
                        }),
                        s(n, h, a, "action", ["seeMore"], {}),
                        o(n, u, a, "if", [c(n, a, "isMobile")], {}, e, t),
                        l
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "related-title");
                    var n = e.createTextNode("\n    People also watched\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "posts");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(i.childAt(o, [3]), 1, 1)
                      , h = i.createMorphAt(o, 5, 5, r);
                    return i.insertBoundary(o, null ),
                    s(n, l, a, "each", [c(n, a, "postsToDisplay")], {}, e, null ),
                    s(n, h, a, "link-to", ["post-similar", c(n, a, "shortId")], {}, t, null ),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "selected-container");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(i.childAt(o, [0]), 1, 1)
                  , h = i.createMorphAt(o, 2, 2, r);
                return i.insertBoundary(o, null ),
                s(n, l, a, "if", [c(n, a, "selectedPost")], {}, e, null ),
                s(n, h, a, "if", [c(n, a, "hasPosts")], {}, t, null ),
                o
            }
        }
    }())
}),
define("vine-ember/templates/components/search-autocomplete", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "all-results");
                        var n = e.createTextNode("\n          See all results for ");
                        e.appendChild(a, n);
                        var n = e.createElement("strong")
                          , r = e.createComment("");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(n.childAt(d, [1, 1]), 0, 0);
                        return i(t, c, e, "query"),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "partial", ["search/autocomplete-results"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "autocomplete");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("      ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "results");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("      ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.childAt(o, [1])
                      , h = i.createMorphAt(l, 1, 1)
                      , u = i.createMorphAt(i.childAt(l, [3]), 1, 1);
                    return s(n, h, a, "link-to", ["search", c(n, a, "query")], {}, e, null ),
                    s(n, u, a, "each", [c(n, a, "results")], {}, t, null ),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("form");
                e.setAttribute(a, "class", "search");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "type", "submit"),
                e.setAttribute(n, "class", "clear icon-search"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "type", "submit"),
                e.setAttribute(n, "class", "clear icon-carrow"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.element
                  , c = i.get
                  , s = i.inline
                  , o = i.block;
                r.detectNamespace(n);
                var l;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                var h = r.childAt(l, [0])
                  , u = r.createMorphAt(h, 1, 1)
                  , p = r.createMorphAt(h, 7, 7);
                return d(a, h, t, "action", ["search"], {
                    on: "submit"
                }),
                s(a, u, t, "view", ["search-input"], {
                    placeholder: "Search",
                    queryChanged: "queryChanged",
                    value: c(a, t, "query"),
                    autofocus: c(a, t, "autofocus")
                }),
                o(a, p, t, "if", [c(a, t, "results")], {}, e, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/components/share-post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.createMorphAt(n.childAt(o, [3]), 1, 1);
                    return i(t, o, e, "bind-attr", [], {
                        "class": ":share-badge :like post.liked:active"
                    }),
                    i(t, o, e, "action", ["like"], {}),
                    c(t, l, e, "format-count", [d(t, e, "post.likes.count")], {
                        zerotext: "Like"
                    }),
                    s
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "revine-underlay"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-revine"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.createMorphAt(n.childAt(o, [3]), 1, 1);
                    return i(t, o, e, "bind-attr", [], {
                        "class": ":share-badge :revine isCurrentUser:hidden post.myRepostId:active"
                    }),
                    i(t, o, e, "action", ["revine"], {}),
                    c(t, l, e, "format-count", [d(t, e, "post.reposts.count")], {
                        zerotext: "Revine"
                    }),
                    s
                }
            }
        }()
          , a = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "format-count", [i(t, e, "tweetCount")], {}),
                        c
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        Tweet\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "share-badge twitter");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.element
                      , s = d.get
                      , o = d.block;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.childAt(l, [1])
                      , u = i.createMorphAt(i.childAt(h, [3]), 1, 1);
                    return c(n, h, a, "action", ["tweet"], {}),
                    o(n, u, a, "if", [s(n, a, "tweetCount")], {}, e, t),
                    l
                }
            }
        }()
          , n = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "format-count", [i(t, e, "facebookCount")], {}),
                        c
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        Share\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "share-badge facebook");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.element
                      , s = d.get
                      , o = d.block;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.childAt(l, [1])
                      , u = i.createMorphAt(i.childAt(h, [3]), 1, 1);
                    return c(n, h, a, "action", ["facebookShare"], {}),
                    o(n, u, a, "if", [s(n, a, "facebookCount")], {}, e, t),
                    l
                }
            }
        }()
          , r = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("a");
                    e.setAttribute(a, "target", "_blank"),
                    e.setAttribute(a, "class", "email-button");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "share-badge email");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("p")
                      , i = e.createTextNode("Email");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1]);
                    return d(t, s, e, "bind-attr", [], {
                        href: i(t, e, "post.emailUrl")
                    }),
                    c
                }
            }
        }()
          , i = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "share-badge tumblr");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("Share");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["tumblrShare"], {}),
                    d
                }
            }
        }()
          , d = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "share-badge pinterest");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("Pin");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["pinterestShare"], {}),
                    d
                }
            }
        }()
          , c = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("a");
                    e.setAttribute(a, "target", "_blank");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "share-badge stumbleupon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("p")
                      , i = e.createTextNode("Share");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1]);
                    return d(t, s, e, "bind-attr", [], {
                        href: i(t, e, "stumbleuponUrl")
                    }),
                    c
                }
            }
        }()
          , s = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("a");
                        e.setAttribute(a, "target", "_blank");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "share-badge permalink");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "icon icon-copy_url"),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("p")
                          , i = e.createTextNode("Link");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1]);
                        return d(t, s, e, "bind-attr", [], {
                            href: i(t, e, "post.permalinkUrl")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "if", [d(a, t, "post.permalinkUrl")], {}, e, null ),
                    s
                }
            }
        }()
          , o = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "share-badge vm");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("VM");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["vm"], {}),
                    d
                }
            }
        }()
          , l = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "share-badge embed");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "icon"),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("p")
                              , r = e.createTextNode("Embed");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "link-to", ["permalink-post.embed", d(a, t, "post.shortId")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "if", [d(a, t, "embed_enabled")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(h, u, p) {
                var m = u.dom
                  , v = u.hooks
                  , g = v.get
                  , b = v.block;
                m.detectNamespace(p);
                var C;
                u.useFragmentCache && m.canClone ? (null === this.cachedFragment && (C = this.build(m),
                this.hasRendered ? this.cachedFragment = C : this.hasRendered = !0),
                this.cachedFragment && (C = m.cloneNode(this.cachedFragment, !0))) : C = this.build(m);
                var f = m.createMorphAt(C, 0, 0, p)
                  , F = m.createMorphAt(C, 1, 1, p)
                  , N = m.createMorphAt(C, 2, 2, p)
                  , T = m.createMorphAt(C, 3, 3, p)
                  , x = m.createMorphAt(C, 4, 4, p)
                  , A = m.createMorphAt(C, 5, 5, p)
                  , k = m.createMorphAt(C, 6, 6, p)
                  , E = m.createMorphAt(C, 7, 7, p)
                  , R = m.createMorphAt(C, 8, 8, p)
                  , M = m.createMorphAt(C, 9, 9, p)
                  , y = m.createMorphAt(C, 10, 10, p);
                return m.insertBoundary(C, null ),
                m.insertBoundary(C, 0),
                b(u, f, h, "if", [g(u, h, "like_enabled")], {}, e, null ),
                b(u, F, h, "if", [g(u, h, "revine_enabled")], {}, t, null ),
                b(u, N, h, "if", [g(u, h, "twitter_enabled")], {}, a, null ),
                b(u, T, h, "if", [g(u, h, "facebook_enabled")], {}, n, null ),
                b(u, x, h, "if", [g(u, h, "email_enabled")], {}, r, null ),
                b(u, A, h, "if", [g(u, h, "tumblr_enabled")], {}, i, null ),
                b(u, k, h, "if", [g(u, h, "pinterest_enabled")], {}, d, null ),
                b(u, E, h, "if", [g(u, h, "stumbleupon_enabled")], {}, c, null ),
                b(u, R, h, "if", [g(u, h, "view_enabled")], {}, s, null ),
                b(u, M, h, "if", [g(u, h, "vm_enabled")], {}, o, null ),
                b(u, y, h, "unless", [g(u, h, "post.longform")], {}, l, null ),
                C
            }
        }
    }())
}),
define("vine-ember/templates/components/share-widgets", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("span")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("a");
                e.setAttribute(n, "class", "twitter-share-button"),
                e.setAttribute(n, "data-lang", "en");
                var r = e.createTextNode("Tweet");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.element
                  , d = r.get;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.childAt(c, [0])
                  , o = n.childAt(s, [1])
                  , l = n.childAt(c, [2]);
                return i(t, s, e, "bind-attr", [], {
                    "class": "twitterInit::hidden :twitter-share"
                }),
                i(t, o, e, "bind-attr", [], {
                    href: d(t, e, "finalTweetUrl"),
                    "data-count": d(t, e, "tweetLayout"),
                    "data-text": d(t, e, "tweetText")
                }),
                i(t, l, e, "bind-attr", [], {
                    "class": ":fb-share-button fbInit::hidden",
                    "data-href": d(t, e, "finalFbUrl"),
                    "data-type": d(t, e, "fbLayout")
                }),
                c
            }
        }
    }())
}),
define("vine-ember/templates/components/suspension-sidebar", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "id", "suspension-notification-bar");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("h4")
                      , r = e.createTextNode("Your account is currently suspended.");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      Please review the ");
                    e.appendChild(n, r);
                    var r = e.createElement("a");
                    e.setAttribute(r, "href", "/rules"),
                    e.setAttribute(r, "target", "_blank");
                    var i = e.createTextNode("Vine Rules");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      and the ");
                    e.appendChild(n, r);
                    var r = e.createElement("a");
                    e.setAttribute(r, "href", "/terms"),
                    e.setAttribute(r, "target", "_blank");
                    var i = e.createTextNode("terms of service");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode(" to ensure you are up-to-date with our current\n      content policies.\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      In order to release your account from suspension, you must remove violating content by\n      clicking [");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("] and then ");
                    e.appendChild(n, r);
                    var r = e.createElement("strong")
                      , i = e.createTextNode("Delete");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode(".\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      If you would like to save your content before deleting, right click on a post and select\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("strong")
                      , i = e.createTextNode("Save Video As.");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      Please note that failure to take appropriate action or future violations may result in acacount suspension.\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p");
                    e.setAttribute(n, "class", "esc-checkbox");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode(" I confirm that my account is now in compliance with Vine's\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("a");
                    e.setAttribute(r, "href", "/rules"),
                    e.setAttribute(r, "target", "_blank");
                    var i = e.createTextNode("current content policy");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "esc-policy");
                    var n = e.createTextNode("Restore Access\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.inline
                      , c = r.get;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.childAt(s, [3])
                      , h = n.createMorphAt(o, 1, 1)
                      , u = n.createMorphAt(n.childAt(o, [7]), 1, 1)
                      , p = n.createMorphAt(n.childAt(o, [13]), 1, 1);
                    return i(t, o, e, "bind-attr", [], {
                        "class": ":esc-policy"
                    }),
                    d(t, h, e, "cdn-img", [], {
                        src: "images/user/alert_icon.svg",
                        width: "40",
                        height: "40",
                        "class": "alert"
                    }),
                    d(t, u, e, "cdn-img", [], {
                        src: "images/post/more_actions_dark.svg",
                        width: "20",
                        height: "5"
                    }),
                    d(t, p, e, "input", [], {
                        type: "checkbox",
                        checked: c(t, e, "confirmedCompliance")
                    }),
                    i(t, l, e, "bind-attr", [], {
                        disabled: c(t, e, "restoreBtnDisabled")
                    }),
                    i(t, l, e, "action", ["restoreAccess"], {}),
                    s
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "id", "grace-notification-bar");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("h4")
                      , r = e.createTextNode("Your account is currently suspended.");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      Please review the ");
                    e.appendChild(n, r);
                    var r = e.createElement("a");
                    e.setAttribute(r, "href", "/rules"),
                    e.setAttribute(r, "target", "_blank");
                    var i = e.createTextNode("Vine rules");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode(" to make sure your account complies with our current content policies.\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      In order to release your account from suspension, you must remove violating content by clicking [");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("] and then ");
                    e.appendChild(n, r);
                    var r = e.createElement("strong")
                      , i = e.createTextNode("Delete");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode(". Profile pictures and revines must also be compliant with Vine's content policies.\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p")
                      , r = e.createTextNode("\n      Further failure to adhere to these rules may result in permanent account suspension.\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("p");
                    e.setAttribute(n, "class", "esc-checkbox");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode(" I confirm that my account is now in compliance with Vine's\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("a");
                    e.setAttribute(r, "href", "/rules"),
                    e.setAttribute(r, "target", "_blank");
                    var i = e.createTextNode("current content policy");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "esc-policy");
                    var n = e.createTextNode("Restore Profile");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.inline
                      , c = r.get;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.childAt(s, [3])
                      , h = n.createMorphAt(o, 1, 1)
                      , u = n.createMorphAt(n.childAt(o, [7]), 1, 1)
                      , p = n.createMorphAt(n.childAt(o, [11]), 1, 1);
                    return i(t, o, e, "bind-attr", [], {
                        "class": ":esc-policy"
                    }),
                    d(t, h, e, "cdn-img", [], {
                        src: "images/user/alert_icon.svg",
                        width: "40",
                        height: "40",
                        "class": "alert"
                    }),
                    d(t, u, e, "cdn-img", [], {
                        src: "images/post/more_actions_dark.svg",
                        width: "20",
                        height: "5"
                    }),
                    d(t, p, e, "input", [], {
                        type: "checkbox",
                        checked: c(t, e, "confirmedCompliance")
                    }),
                    i(t, l, e, "bind-attr", [], {
                        disabled: c(t, e, "restoreBtnDisabled")
                    }),
                    i(t, l, e, "action", ["markCompliant"], {}),
                    s
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h4")
                      , n = e.createTextNode("\n    Thank you!\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "bind-attr", [], {
                        "class": ":esc-confirmation-message :esc-grace-message"
                    }),
                    d
                }
            }
        }()
          , n = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h4")
                      , n = e.createTextNode("\n     Your account is now un-suspended. Please note that further violations may result in permanent suspension.\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "bind-attr", [], {
                        "class": ":esc-confirmation-message :esc-grace-message"
                    }),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(r, i, d) {
                var c = i.dom
                  , s = i.hooks
                  , o = s.get
                  , l = s.block;
                c.detectNamespace(d);
                var h;
                i.useFragmentCache && c.canClone ? (null === this.cachedFragment && (h = this.build(c),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = c.cloneNode(this.cachedFragment, !0))) : h = this.build(c);
                var u = c.createMorphAt(h, 0, 0, d)
                  , p = c.createMorphAt(h, 2, 2, d)
                  , m = c.createMorphAt(h, 4, 4, d)
                  , v = c.createMorphAt(h, 6, 6, d);
                return c.insertBoundary(h, null ),
                c.insertBoundary(h, 0),
                l(i, u, r, "if", [o(i, r, "session.suspended")], {}, e, null ),
                l(i, p, r, "if", [o(i, r, "session.isEscUser")], {}, t, null ),
                l(i, m, r, "if", [o(i, r, "showNormalAccessMessage")], {}, a, null ),
                l(i, v, r, "if", [o(i, r, "showUnsuspensionMessage")], {}, n, null ),
                h
            }
        }
    }())
}),
define("vine-ember/templates/components/timeline-header", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "background-image-container"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1]);
                    return d(t, s, e, "bind-attr", [], {
                        style: i(t, e, "model.backgroundImageStyle")
                    }),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "timeline-header-content");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block
                  , s = i.element
                  , o = i.content;
                r.detectNamespace(n);
                var l;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                var h = r.childAt(l, [1])
                  , u = r.createMorphAt(l, 0, 0, n)
                  , p = r.createMorphAt(h, 1, 1);
                return r.insertBoundary(l, 0),
                c(a, u, t, "if", [d(a, t, "model.backgroundImageStyle")], {}, e, null ),
                s(a, h, t, "bind-attr", [], {
                    style: d(a, t, "headerContentStyle")
                }),
                o(a, p, t, "yield"),
                l
            }
        }
    }())
}),
define("vine-ember/templates/components/tv-link", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment();
                    return t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 0, 0, a);
                    return n.insertBoundary(d, null ),
                    n.insertBoundary(d, 0),
                    i(t, c, e, "text"),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.subexpr
                  , s = d.get
                  , o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.createMorphAt(l, 0, 0, r)
                  , u = i.createMorphAt(l, 1, 1, r);
                return i.insertBoundary(l, 0),
                o(n, h, a, "link-to", [s(n, a, "route"), s(n, a, "routeParam"), c(n, a, "query-params", [], {
                    mode: "tv"
                })], {
                    "class": "tv-route-link icon-tv"
                }, e, null ),
                o(n, u, a, "link-to", [s(n, a, "route"), s(n, a, "routeParam")], {}, t, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/components/user-info", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "avatar-new");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "username");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline
                      , c = r.element;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [2])
                      , l = n.createMorphAt(n.childAt(s, [1]), 1, 1)
                      , h = n.createMorphAt(o, 1, 1);
                    return d(t, l, e, "secure-img", [], {
                        src: i(t, e, "data.avatarUrl")
                    }),
                    c(t, o, e, "bind-attr", [], {
                        style: i(t, e, "textColorStyle")
                    }),
                    d(t, h, e, "replace-emoji", [i(t, e, "data.username")], {}),
                    s
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "secure-img", [], {
                            src: i(t, e, "data.avatarUrl")
                        }),
                        c
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "replace-emoji", [i(t, e, "data.username")], {}),
                        c
                    }
                }
            }()
              , a = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("span");
                        return e.setAttribute(a, "class", "icon-verified"),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "avatar-new");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "username");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(n, r, i) {
                    var d = r.dom
                      , c = r.hooks
                      , s = c.get
                      , o = c.block
                      , l = c.element;
                    d.detectNamespace(i);
                    var h;
                    r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                    this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                    this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                    var u = d.childAt(h, [2])
                      , p = d.createMorphAt(d.childAt(h, [1]), 1, 1)
                      , m = d.createMorphAt(u, 1, 1)
                      , v = d.createMorphAt(u, 2, 2);
                    return o(r, p, n, "link-user", [], {
                        user: s(r, n, "data")
                    }, e, null ),
                    l(r, u, n, "bind-attr", [], {
                        style: s(r, n, "textColorStyle")
                    }),
                    o(r, m, n, "link-user", [], {
                        user: s(r, n, "data")
                    }, t, null ),
                    o(r, v, n, "if", [s(r, n, "data.verified")], {}, a, null ),
                    h
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "post-metadata");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                    return i(t, c, e, "partial", ["time-and-location"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.createMorphAt(l, 0, 0, i)
                  , u = d.createMorphAt(l, 1, 1, i);
                return d.insertBoundary(l, null ),
                d.insertBoundary(l, 0),
                o(r, h, n, "if", [s(r, n, "delinkify")], {}, e, t),
                o(r, u, n, "with", [s(r, n, "data")], {}, a, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/components/view-mode-toggles", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("i");
                    e.setAttribute(a, "title", "Grid mode"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [0]);
                    return i(t, c, e, "bind-attr", [], {
                        "class": ":icon-grid isGridMode:active"
                    }),
                    i(t, c, e, "action", ["trackViewMode", "grid"], {}),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("i");
                    e.setAttribute(a, "title", "Timeline mode"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "bind-attr", [], {
                        "class": ":icon-menu isListMode:active"
                    }),
                    i(t, c, e, "action", ["trackViewMode", "list"], {}),
                    d
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("i");
                    e.setAttribute(a, "title", "TV mode"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "bind-attr", [], {
                        "class": ":icon-tv isTvMode:active"
                    }),
                    i(t, c, e, "action", ["trackViewMode", "tv"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.subexpr
                  , o = c.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.createMorphAt(l, 0, 0, i)
                  , u = d.createMorphAt(l, 1, 1, i)
                  , p = d.createMorphAt(l, 2, 2, i);
                return d.insertBoundary(l, null ),
                d.insertBoundary(l, 0),
                o(r, h, n, "link-to", [s(r, n, "query-params", [], {
                    mode: "grid"
                })], {}, e, null ),
                o(r, u, n, "link-to", [s(r, n, "query-params", [], {
                    mode: "list"
                })], {}, t, null ),
                o(r, p, n, "link-to", [s(r, n, "query-params", [], {
                    mode: "tv"
                })], {}, a, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/components/vine-spinner", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment();
                e.setNamespace("http://www.w3.org/2000/svg");
                var a = e.createElement("svg");
                e.setAttribute(a, "version", "1.1"),
                e.setAttribute(a, "xmlns", "http://www.w3.org/2000/svg"),
                e.setAttribute(a, "style", "transform:rotate(-90deg);");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("style")
                  , r = e.createTextNode("\n    @keyframes swipe {\n      from {\n        stroke-dashoffset: 0\n      }\n      to {\n        stroke-dashoffset: 201.06\n      }\n    }\n    #circ {\n      animation-duration: 1800ms;\n      animation-name: swipe;\n      animation-iteration-count: infinite;\n      animation-timing-function: linear;\n    }\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("circle");
                e.setAttribute(n, "id", "circ"),
                e.setAttribute(n, "stroke-width", "32"),
                e.setAttribute(n, "stroke-miterlimit", "10"),
                e.setAttribute(n, "stroke-dasharray", "100.53"),
                e.setAttribute(n, "stroke-dashoffset", "0"),
                e.setAttribute(n, "cx", "50"),
                e.setAttribute(n, "cy", "50"),
                e.setAttribute(n, "r", "16"),
                e.setAttribute(n, "fill", "transparent"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.concat
                  , c = r.attribute;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var o = n.childAt(s, [0])
                  , l = n.childAt(o, [3])
                  , h = n.createAttrMorph(o, "width")
                  , u = n.createAttrMorph(o, "height")
                  , p = n.createAttrMorph(l, "stroke")
                  , m = n.createAttrMorph(l, "style");
                return c(t, h, o, "width", d(t, [i(t, e, "size")])),
                c(t, u, o, "height", d(t, [i(t, e, "size")])),
                c(t, p, l, "stroke", d(t, [i(t, e, "color")])),
                c(t, m, l, "style", d(t, ["transform:scale(", i(t, e, "scale"), ");"])),
                s
            }
        }
    }())
}),
define("vine-ember/templates/components/watch-more", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "vine-spinner", [], {
                                color: "white",
                                size: "18",
                                "class": "loading-watchmore"
                            }),
                            d
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "cdn-img", [], {
                                src: "images/loading_white-3fcec36654ac22d5facfa58ed4fc5c16.gif",
                                height: "16",
                                width: "16"
                            }),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "watch-more-text");
                        var n = e.createTextNode("\n          LOADING...\n        ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, 0),
                        s(n, l, a, "if", [c(n, a, "post.canAnimateSVG")], {}, e, t),
                        o
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "icon-loops_icon"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "cdn-img", [], {
                                src: "images/post/watch_more_icon.svg",
                                height: "16",
                                width: "16"
                            }),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "watch-more-text");
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n        ");
                        e.appendChild(t, a);
                        var a = e.createElement("time")
                          , n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block
                          , o = d.content;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.createMorphAt(l, 0, 0, r)
                          , u = i.createMorphAt(i.childAt(l, [2]), 1, 1)
                          , p = i.createMorphAt(i.childAt(l, [4]), 0, 0);
                        return i.insertBoundary(l, 0),
                        s(n, h, a, "if", [c(n, a, "post.isReplay")], {}, e, t),
                        o(n, u, a, "buttonText"),
                        o(n, p, a, "duration"),
                        l
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "watch-more");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "watch-more-inner-container");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.element
                      , s = d.get
                      , o = d.block;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.childAt(l, [1])
                      , u = i.createMorphAt(i.childAt(h, [1]), 1, 1);
                    return c(n, h, a, "action", ["sendWatchMoreAction"], {
                        bubbles: !1
                    }),
                    o(n, u, a, "if", [s(n, a, "post.loadingBroker")], {}, e, t),
                    l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "if", [d(a, t, "hasLongform")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/confirm-email", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "message");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                        return i(t, c, e, "error.error"),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "message");
                        var n = e.createTextNode("Oops.  Looks like something went wrong.");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-frowny"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("button")
                      , n = e.createTextNode("Resend Link");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block
                      , o = d.element;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.childAt(l, [5])
                      , u = i.createMorphAt(l, 3, 3, r);
                    return s(n, u, a, "if", [c(n, a, "error.code")], {}, e, t),
                    o(n, h, a, "action", ["resendEmail"], {}),
                    l
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          Please check your email for instructions.\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          Your email has been confirmed.\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-check_mark"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "message");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(i.childAt(o, [3]), 1, 1);
                    return s(n, l, a, "if", [c(n, a, "emailResent")], {}, e, t),
                    o
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("button")
                              , n = e.createTextNode("Continue");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "link-to", ["feed"], {}, e, null ),
                        c
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("button")
                              , n = e.createTextNode("Continue");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "link-to", ["index"], {}, e, null ),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "session.isAuthenticated")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "login-page");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "login-container");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.childAt(l, [0, 1])
                  , u = d.createMorphAt(h, 1, 1)
                  , p = d.createMorphAt(h, 3, 3);
                return o(r, u, n, "if", [s(r, n, "error")], {}, e, t),
                o(r, p, n, "if", [s(r, n, "showContinue")], {}, a, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/current-user", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "secure-img", [], {
                        src: i(t, e, "avatarUrl"),
                        "class": "avatar"
                    }),
                    c
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("View Profile");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("Settings");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "id", "current-user");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("  ");
                e.appendChild(a, n);
                var n = e.createElement("ul");
                e.setAttribute(n, "class", "user menu");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li")
                  , i = e.createComment("");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li")
                  , i = e.createComment("");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li")
                  , i = e.createElement("a");
                e.setAttribute(i, "href", "#");
                var d = e.createTextNode("Logout");
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                return e.appendChild(a, n),
                e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block
                  , l = c.element;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0])
                  , p = d.childAt(u, [3])
                  , m = d.childAt(p, [5, 0])
                  , v = d.createMorphAt(u, 1, 1)
                  , g = d.createMorphAt(d.childAt(p, [1]), 0, 0)
                  , b = d.createMorphAt(d.childAt(p, [3]), 0, 0);
                return o(r, v, n, "link-user", [], {
                    user: s(r, n, "this")
                }, e, null ),
                o(r, g, n, "link-user", [], {
                    user: s(r, n, "this")
                }, t, null ),
                o(r, b, n, "link-to", ["settings"], {}, a, null ),
                l(r, m, n, "action", ["logout"], {}),
                h
            }
        }
    }())
}),
define("vine-ember/templates/custom-url/reserve-form", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "cdn-img", [], {
                        "class": "confirm",
                        src: "images/check_mark.svg",
                        width: "16",
                        height: "16"
                    }),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "cdn-img", [], {
                            "class": "confirm",
                            src: "images/x_mark.svg",
                            width: "16",
                            height: "16"
                        }),
                        d
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "cdn-img", [], {
                                "class": "confirm loading",
                                src: "images/loading_black-7c085c338e536db4bfda65ee05c48f37.gif",
                                width: "25",
                                height: "25"
                            }),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "if", [d(a, t, "typing")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "error")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "url-reserve-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("form");
                e.setAttribute(n, "id", "url-reserve");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "confirm-container");
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "url-container");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "url-prefix");
                var d = e.createTextNode("http://vine.co/");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "buttons");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "type", "submit");
                var d = e.createTextNode("Confirm");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "class", "cancel"),
                e.setAttribute(i, "type", "button");
                var d = e.createTextNode("Cancel");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.get
                  , o = d.block
                  , l = d.inline;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0, 1])
                  , p = i.childAt(u, [5])
                  , m = i.childAt(p, [1])
                  , v = i.childAt(p, [3])
                  , g = i.createMorphAt(i.childAt(u, [1]), 1, 1)
                  , b = i.createMorphAt(i.childAt(u, [3]), 3, 3);
                return c(n, u, a, "action", ["reserveUrl"], {
                    on: "submit"
                }),
                o(n, g, a, "if", [s(n, a, "available")], {}, e, t),
                l(n, b, a, "view", ["custom-url-input"], {
                    value: s(n, a, "url"),
                    errorState: s(n, a, "error"),
                    availableState: s(n, a, "available"),
                    reset: "resetMessages",
                    available: "urlAvailable",
                    error: "reserveUrlError",
                    typing: "setTyping"
                }),
                c(n, m, a, "bind-attr", [], {
                    disabed: s(n, a, "urlNotReady"),
                    "class": s(n, a, "urlNotReady")
                }),
                c(n, v, a, "action", ["hideUrlForm"], {}),
                h
            }
        }
    }())
}),
define("vine-ember/templates/custom-url/reserve-messages", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5");
                        e.setAttribute(a, "class", "error");
                        var n = e.createTextNode("Please see the ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "href", "https://support.twitter.com/articles/20170806-vine-profile-urls"),
                        e.setAttribute(n, "target", "_blank");
                        var r = e.createTextNode("FAQ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode(" for more information.");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h5");
                    e.setAttribute(a, "class", "error");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.content
                      , c = i.get
                      , s = i.block;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.createMorphAt(r.childAt(o, [1]), 0, 0)
                      , h = r.createMorphAt(o, 3, 3, n);
                    return r.insertBoundary(o, null ),
                    d(a, l, t, "error"),
                    s(a, h, t, "if", [c(a, t, "needsFaq")], {}, e, null ),
                    o
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "suggestion");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element
                          , c = r.content;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var o = n.childAt(s, [1])
                          , l = n.createMorphAt(o, 0, 0);
                        return d(t, o, e, "action", ["loadSuggestion", i(t, e, "this")], {}),
                        c(t, l, e, "this"),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h5")
                      , n = e.createTextNode("\n      The following URLs have been pre-reserved for you!");
                    e.appendChild(a, n);
                    var n = e.createElement("br");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      Choose one below or try your own above.\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 3, 3, n);
                    return r.insertBoundary(s, null ),
                    c(a, o, t, "each", [d(a, t, "reservations")], {}, e, null ),
                    s
                }
            }
        }()
          , a = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "suggestion");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element
                          , c = r.content;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var o = n.childAt(s, [1])
                          , l = n.createMorphAt(o, 0, 0);
                        return d(t, o, e, "action", ["loadSuggestion", i(t, e, "this")], {}),
                        c(t, l, e, "this"),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "each", [d(a, t, "suggestions")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "url-reserve-messages");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                return e.appendChild(a, n),
                e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.childAt(l, [0])
                  , u = d.createMorphAt(h, 1, 1)
                  , p = d.createMorphAt(h, 3, 3);
                return o(r, u, n, "if", [s(r, n, "error")], {}, e, null ),
                o(r, p, n, "if", [s(r, n, "reservations")], {}, t, a),
                l
            }
        }
    }())
}),
define("vine-ember/templates/deleted-post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("button")
                      , n = e.createTextNode("Go to your profile");
                    return e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "deleted-outer-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "deleted-inner-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "check_mark-container");
                var i = e.createElement("span");
                e.setAttribute(i, "class", "icon-check_mark"),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "deleted-text");
                var i = e.createTextNode("\n      Vine deleted.\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(r.childAt(s, [0, 1]), 5, 5);
                return c(a, o, t, "link-user", [], {
                    user: d(a, t, "currentUser")
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/error", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("p")
                  , n = e.createTextNode("Uh oh! We’re having technical difficulties.");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "debug-info");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.inline
                  , d = r.content;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.createMorphAt(c, 0, 0, a)
                  , o = n.createMorphAt(n.childAt(c, [4]), 1, 1);
                return n.insertBoundary(c, 0),
                i(t, s, e, "cdn-img", [], {
                    src: "images/frowny.svg",
                    width: "298",
                    height: "235"
                }),
                d(t, o, e, "content"),
                c
            }
        }
    }())
}),
define("vine-ember/templates/explicit-content", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "warning-overlay");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "warning-content");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("p");
                e.setAttribute(r, "class", "title");
                var i = e.createTextNode("Warning");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("p");
                e.setAttribute(r, "class", "warning-text");
                var i = e.createTextNode("This post may contain sensitive content.");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button")
                  , i = e.createTextNode("View this post");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "class", "small");
                var i = e.createTextNode("View");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.element;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.childAt(c, [0, 1])
                  , o = n.childAt(s, [5])
                  , l = n.childAt(s, [7]);
                return d(t, o, e, "action", ["viewExplicit", i(t, e, "target")], {}),
                d(t, l, e, "action", ["viewExplicit", i(t, e, "target")], {}),
                c
            }
        }
    }())
}),
define("vine-ember/templates/explore/channels", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "channel-badge", [], {
                                backgroundStyle: i(t, e, "backgroundColorStyle"),
                                iconUrl: i(t, e, "channelIconUrl"),
                                channel: i(t, e, "channel")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "link-to", ["list", d(a, t, "vanityUrl")], {}, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "channel-badge", [], {
                                backgroundStyle: i(t, e, "backgroundColorStyle"),
                                iconUrl: i(t, e, "channelIconUrl"),
                                channel: i(t, e, "channel")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "link-to", ["channel", d(a, t, "vanityUrl")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "featured")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("h3");
                e.setAttribute(a, "class", "channel-module-name module-title");
                var n = e.createTextNode("Channels");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "channels-container");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(r.childAt(c, [2]), 1, 1);
                return d(a, s, t, "each", [], {}, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/explore/featured-users", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "user-info", [], {
                            data: i(t, e, "this"),
                            cssClass: "user-info-hide-metadata"
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "user-hover", [], {
                        color: d(a, t, "backgroundColor"),
                        userId: d(a, t, "userIdStr")
                    }, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "each", [d(a, t, "users")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/explore/list", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "posts-container grid");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "grid-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1, 1]), 1, 1);
                    return i(t, c, e, "view", ["playlists/grid-list"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createElement("h2");
                                e.setAttribute(a, "class", "title");
                                var n = e.createComment("");
                                return e.appendChild(a, n),
                                e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var s = n.createMorphAt(n.childAt(c, [0]), 0, 0);
                                return d(t, s, e, "html-linebreak", [i(t, e, "list.title")], {}),
                                c
                            }
                        }
                    }()
                      , t = function() {
                        var e = function() {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(e, t, a) {
                                    var n = t.dom
                                      , r = t.hooks
                                      , i = r.get
                                      , d = r.inline
                                      , c = r.content;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var o = n.createMorphAt(s, 0, 0, a)
                                      , l = n.createMorphAt(s, 1, 1, a);
                                    return n.insertBoundary(s, null ),
                                    n.insertBoundary(s, 0),
                                    d(t, o, e, "secure-img", [], {
                                        src: i(t, e, "avatarUrl"),
                                        "class": "avatar"
                                    }),
                                    c(t, l, e, "username"),
                                    s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "author");
                                var n = e.createTextNode("\n            by");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n          ");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(t, a, n) {
                                var r = a.dom
                                  , i = a.hooks
                                  , d = i.get
                                  , c = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                                return c(a, o, t, "link-user", [], {
                                    user: d(a, t, "this")
                                }, e, null ),
                                s
                            }
                        }
                    }()
                      , a = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var s = n.createMorphAt(c, 1, 1, a);
                                return d(t, s, e, "loop-count", [], {
                                    postId: i(t, e, "currentPost.postIdStr"),
                                    loops: i(t, e, "currentPost.loops"),
                                    postDate: i(t, e, "currentPost.created")
                                }),
                                c
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "info");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "post-position");
                            var r = e.createComment("");
                            e.appendChild(n, r);
                            var r = e.createTextNode(" of ");
                            e.appendChild(n, r);
                            var r = e.createComment("");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "post-actions");
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createElement("button");
                            e.setAttribute(r, "class", "clear twitter");
                            var i = e.createTextNode("\n            ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "icon-twitter"),
                            e.appendChild(r, i);
                            var i = e.createTextNode("\n          ");
                            e.appendChild(r, i),
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createElement("button");
                            e.setAttribute(r, "class", "clear facebook");
                            var i = e.createTextNode("\n            ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "icon-facebook"),
                            e.appendChild(r, i);
                            var i = e.createTextNode("\n          ");
                            e.appendChild(r, i),
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(n, r, i) {
                            var d = r.dom
                              , c = r.hooks
                              , s = c.get
                              , o = c.block
                              , l = c.inline
                              , h = c.element;
                            d.detectNamespace(i);
                            var u;
                            r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                            this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                            this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                            var p = d.childAt(u, [1])
                              , m = d.childAt(p, [5])
                              , v = d.childAt(p, [7])
                              , g = d.childAt(v, [1])
                              , b = d.childAt(v, [3])
                              , C = d.createMorphAt(p, 1, 1)
                              , f = d.createMorphAt(p, 3, 3)
                              , F = d.createMorphAt(m, 0, 0)
                              , N = d.createMorphAt(m, 2, 2)
                              , T = d.createMorphAt(p, 9, 9);
                            return o(r, C, n, "link-to", ["list", s(r, n, "list.vanityUrl")], {}, e, null ),
                            o(r, f, n, "with", [s(r, n, "list.createdByUser")], {}, t, null ),
                            l(r, F, n, "format-count", [s(r, n, "positionIndex")], {}),
                            l(r, N, n, "format-count", [s(r, n, "content.length")], {}),
                            h(r, g, n, "action", ["tweet"], {}),
                            h(r, b, n, "action", ["facebookShare"], {}),
                            o(r, T, n, "if", [s(r, n, "currentPost.loops")], {}, a, null ),
                            u
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "mouseover-video", [], {
                            post: d(a, t, "currentPost"),
                            mouseEntered: "bindFullscreenListener",
                            mouseLeft: "unbindFullscreenListener"
                        }, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "if", [d(a, t, "currentPost")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/explore/lists", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "view", ["explore/sidebar-list"], {}),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "module-pagination");
                        var n = e.createTextNode("Load more...");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [1]);
                        return i(t, c, e, "action", ["nextPage"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.block
                      , s = d.get;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r)
                      , h = i.createMorphAt(o, 2, 2, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    c(n, l, a, "each", [], {}, e, null ),
                    c(n, h, a, "if", [s(n, a, "pagination.nextPage")], {}, t, null ),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "module-block", [], {
                    tagName: "section",
                    id: "edited-lists",
                    icon: "list",
                    route: "playlists",
                    title: "Playlists"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/explore/mobile", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "download-buttons"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "id", "splash-header");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("a");
                    e.setAttribute(n, "href", "http://get.vine.co");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "subtitle");
                    var r = e.createTextNode("Explore a world of beautiful, looping videos.");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.inline
                      , c = i.get
                      , s = i.block;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.childAt(o, [1])
                      , h = r.createMorphAt(r.childAt(l, [1]), 1, 1)
                      , u = r.createMorphAt(l, 5, 5);
                    return d(a, h, t, "cdn-img", [], {
                        src: "images/vine_logo-73a74c837b9cc00532d5e211d7db9110.png",
                        width: "355",
                        height: "130",
                        "class": "logo-image"
                    }),
                    s(a, u, t, "unless", [c(a, t, "hideDownloadButtons")], {}, e, null ),
                    o
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["explore/pinned-channel"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "module-block", [], {
                            tagName: "article",
                            className: "pinned-channel",
                            id: d(a, t, "channelIdAttr"),
                            rawIconClass: "channel-badge",
                            iconUrl: d(a, t, "channel.channelIconUrl"),
                            backgroundStyle: d(a, t, "channel.backgroundColorStyle"),
                            title: d(a, t, "channel.featuredTitle"),
                            route: "channel",
                            routeParams: d(a, t, "channel.vanityUrl")
                        }, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "partial", ["explore/featured-users"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "module-block", [], {
                            tagName: "article",
                            className: "featured-users",
                            icon: "profile",
                            title: "Featured Viners"
                        }, e, null ),
                        c
                    }
                }
            }()
              , a = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["explore/posts/one"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "module-block", [], {
                            className: "editors-pick",
                            route: "editors-picks",
                            rawIconClass: "channel-badge editors-pick",
                            title: "Editor's Pick"
                        }, e, null ),
                        c
                    }
                }
            }()
              , n = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["explore/list"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "module-block", [], {
                            className: "featured-post list",
                            route: "list",
                            routeParams: d(a, t, "list.vanityUrl"),
                            title: "Vine Playlist"
                        }, e, null ),
                        s
                    }
                }
            }()
              , r = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "render", ["explore/channels"], {}),
                        d
                    }
                }
            }()
              , i = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "render", ["explore/popular-now"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(d, c, s) {
                    var o = c.dom
                      , l = c.hooks
                      , h = l.get
                      , u = l.block;
                    o.detectNamespace(s);
                    var p;
                    c.useFragmentCache && o.canClone ? (null === this.cachedFragment && (p = this.build(o),
                    this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0),
                    this.cachedFragment && (p = o.cloneNode(this.cachedFragment, !0))) : p = this.build(o);
                    var m = o.createMorphAt(p, 0, 0, s)
                      , v = o.createMorphAt(p, 1, 1, s)
                      , g = o.createMorphAt(p, 2, 2, s)
                      , b = o.createMorphAt(p, 3, 3, s)
                      , C = o.createMorphAt(p, 4, 4, s)
                      , f = o.createMorphAt(p, 5, 5, s);
                    return o.insertBoundary(p, null ),
                    o.insertBoundary(p, 0),
                    u(c, m, d, "if", [h(c, d, "channel")], {}, e, null ),
                    u(c, v, d, "if", [h(c, d, "users")], {}, t, null ),
                    u(c, g, d, "if", [h(c, d, "postIdStr")], {}, a, null ),
                    u(c, b, d, "if", [h(c, d, "list")], {}, n, null ),
                    u(c, C, d, "if", [h(c, d, "channels")], {}, r, null ),
                    u(c, f, d, "if", [h(c, d, "popularNow")], {}, i, null ),
                    p
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "explore-content");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r)
                  , h = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                return i.insertBoundary(o, 0),
                s(n, l, a, "unless", [c(n, a, "session.isAuthenticated")], {}, e, null ),
                s(n, h, a, "each", [], {}, t, null ),
                o
            }
        }
    }())
}),
define("vine-ember/templates/explore/pinned-channel", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "view", ["explore/posts/popular"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 1, 1, n);
                    return c(a, o, t, "each", [d(a, t, "posts")], {
                        itemController: "explore/post"
                    }, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 0, 0, a);
                        return n.insertBoundary(c, null ),
                        n.insertBoundary(c, 0),
                        d(t, s, e, "render", ["explore/posts/three", i(t, e, "this")], {}),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 1, 1, n);
                    return c(a, o, t, "each", [d(a, t, "posts")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("style");
                e.setAttribute(a, "class", "pinned-channel-color");
                var n = e.createTextNode("\n  .[[channelId]] .post-container .action.like span:nth-of-type(2),\n  .[[channelId]] .post-container .action.revine span:first-of-type,\n  .[[channelId]] .description a:hover,\n  .[[channelId]] .timestamp a:hover,\n  .[[channelId]] a:hover .module-title,\n  .[[channelId]] .user-info-new .username a {\n    color: #[[backgroundColor]] !important;\n  }\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 2, 2, r);
                return i.insertBoundary(o, null ),
                s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/explore/popular-now", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "view", ["explore/posts/popular"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null ),
                    r.insertBoundary(c, 0),
                    d(a, s, t, "each", [], {}, e, null ),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "module-block", [], {
                    route: "popular-now",
                    title: "Popular Now"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/explore/posts/one-mobile", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["explicit-content"], {}),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "vine-video-container");
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r);
                    var r = e.createElement("video");
                    e.setAttribute(r, "preload", "auto");
                    var i = e.createTextNode("\n          ");
                    e.appendChild(r, i);
                    var i = e.createElement("source");
                    e.setAttribute(i, "type", "video/mp4"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("img");
                    e.setAttribute(a, "class", "thumbnail"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "play"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1])
                      , o = n.childAt(s, [1, 1, 1])
                      , l = n.childAt(c, [3])
                      , h = n.childAt(c, [5]);
                    return i(t, s, e, "bind-attr", [], {
                        "class": ":vine-player hasModal:hidden"
                    }),
                    i(t, s, e, "action", ["pause"], {
                        target: "view"
                    }),
                    i(t, o, e, "bind-attr", [], {
                        src: d(t, e, "secureVideoUrl")
                    }),
                    i(t, l, e, "bind-attr", [], {
                        src: d(t, e, "secureThumbnailUrl")
                    }),
                    i(t, h, e, "action", ["play"], {
                        target: "view"
                    }),
                    c
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "venueName"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        at ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 1, 1, n);
                        return c(a, o, t, "link-to", ["venue", d(a, t, "foursquareVenueId")], {}, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "venueName"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "foursquareVenueId")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "video-container");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "info-container post-info info");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4");
                e.setAttribute(n, "class", "description");
                var r = e.createComment("");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h5");
                e.setAttribute(n, "class", "venue");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "post-actions");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button")
                  , i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "icon-heart_icn"),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "class", "clear twitter");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "icon-twitter"),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "class", "clear facebook");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "icon-facebook"),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.element
                  , l = c.block
                  , h = c.inline;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0])
                  , m = d.childAt(u, [2])
                  , v = d.childAt(m, [7])
                  , g = d.childAt(v, [1])
                  , b = d.childAt(v, [3])
                  , C = d.childAt(v, [5])
                  , f = d.createMorphAt(p, 1, 1)
                  , F = d.createMorphAt(m, 1, 1)
                  , N = d.createMorphAt(d.childAt(m, [3]), 0, 0)
                  , T = d.createMorphAt(d.childAt(m, [5]), 1, 1)
                  , x = d.createMorphAt(g, 3, 3)
                  , A = d.createMorphAt(b, 3, 3)
                  , k = d.createMorphAt(C, 3, 3);
                return o(r, p, n, "bind-attr", [], {
                    style: s(r, n, "videoContainerStyle")
                }),
                l(r, f, n, "if", [s(r, n, "explicitContent")], {}, e, t),
                h(r, F, n, "user-info", [], {
                    data: s(r, n, "this"),
                    cssClass: "user-info-size-38 user-info-hide-metadata"
                }),
                h(r, N, n, "linkify-entities", [], {
                    text: s(r, n, "description"),
                    entities: s(r, n, "entities")
                }),
                l(r, T, n, "if", [s(r, n, "venueName")], {}, a, null ),
                o(r, g, n, "bind-attr", [], {
                    "class": ":clear :like liked:active"
                }),
                o(r, g, n, "action", ["like"], {}),
                h(r, x, n, "format-count", [s(r, n, "likes.count")], {
                    zeroText: "Like"
                }),
                o(r, b, n, "action", ["tweet"], {}),
                h(r, A, n, "format-count", [s(r, n, "tweetCount")], {
                    zeroText: "Tweet"
                }),
                o(r, C, n, "action", ["facebookShare"], {}),
                h(r, k, n, "format-count", [s(r, n, "facebookCount")], {
                    zeroText: "Share"
                }),
                u
            }
        }
    }())
}),
define("vine-ember/templates/explore/posts/one", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "view", ["explore/posts/one-mobile"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "loop-count", [], {
                                postId: i(t, e, "postIdStr"),
                                loops: i(t, e, "loops"),
                                postDate: i(t, e, "created")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "info");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "description");
                        var r = e.createComment("");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "post-actions");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("button")
                          , i = e.createTextNode("\n          ");
                        e.appendChild(r, i);
                        var i = e.createElement("span");
                        e.setAttribute(i, "class", "icon-heart_icn"),
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n        ");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "clear twitter");
                        var i = e.createTextNode("\n          ");
                        e.appendChild(r, i);
                        var i = e.createElement("span");
                        e.setAttribute(i, "class", "icon-twitter"),
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n        ");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "clear facebook");
                        var i = e.createTextNode("\n          ");
                        e.appendChild(r, i);
                        var i = e.createElement("span");
                        e.setAttribute(i, "class", "icon-facebook"),
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n        ");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.inline
                          , s = i.element
                          , o = i.block;
                        r.detectNamespace(n);
                        var l;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                        var h = r.childAt(l, [1])
                          , u = r.childAt(h, [5])
                          , p = r.childAt(u, [1])
                          , m = r.childAt(u, [3])
                          , v = r.childAt(u, [5])
                          , g = r.createMorphAt(h, 1, 1)
                          , b = r.createMorphAt(r.childAt(h, [3]), 0, 0)
                          , C = r.createMorphAt(h, 7, 7);
                        return c(a, g, t, "user-info", [], {
                            data: d(a, t, "this"),
                            cssClass: "user-info-size-38 user-info-inherit-color user-info-stacked user-info-hide-metadata"
                        }),
                        c(a, b, t, "linkify-entities", [], {
                            text: d(a, t, "description"),
                            entities: d(a, t, "entities")
                        }),
                        s(a, p, t, "bind-attr", [], {
                            "class": ":clear :like liked:active"
                        }),
                        s(a, p, t, "action", ["like"], {}),
                        s(a, m, t, "action", ["tweet"], {}),
                        s(a, v, t, "action", ["facebookShare"], {}),
                        o(a, C, t, "if", [d(a, t, "loops")], {}, e, null ),
                        l
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "mouseover-video", [], {
                        post: d(a, t, "this")
                    }, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/explore/posts/popular-mobile", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["explicit-content"], {}),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "vine-video-container");
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r);
                    var r = e.createElement("video");
                    e.setAttribute(r, "preload", "auto");
                    var i = e.createTextNode("\n          ");
                    e.appendChild(r, i);
                    var i = e.createElement("source");
                    e.setAttribute(i, "type", "video/mp4"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("img");
                    e.setAttribute(a, "class", "thumbnail"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "play"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1])
                      , o = n.childAt(s, [1, 1, 1])
                      , l = n.childAt(c, [3])
                      , h = n.childAt(c, [5]);
                    return i(t, s, e, "bind-attr", [], {
                        "class": ":vine-player hasModal:hidden"
                    }),
                    i(t, s, e, "action", ["pause"], {
                        target: "view"
                    }),
                    i(t, o, e, "bind-attr", [], {
                        src: d(t, e, "secureVideoUrl")
                    }),
                    i(t, l, e, "bind-attr", [], {
                        src: d(t, e, "secureThumbnailUrl")
                    }),
                    i(t, h, e, "action", ["play"], {
                        target: "view"
                    }),
                    c
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "username"),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "video-container");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "post-info");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h3");
                e.setAttribute(n, "class", "user");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h5");
                e.setAttribute(n, "class", "description");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.element
                  , l = c.block
                  , h = c.inline;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0])
                  , m = d.childAt(u, [2])
                  , v = d.createMorphAt(p, 1, 1)
                  , g = d.createMorphAt(d.childAt(m, [1]), 1, 1)
                  , b = d.createMorphAt(d.childAt(m, [3]), 1, 1);
                return o(r, p, n, "bind-attr", [], {
                    style: s(r, n, "backgroundImageStyle")
                }),
                l(r, v, n, "if", [s(r, n, "explicitContent")], {}, e, t),
                l(r, g, n, "link-user", [], {
                    user: s(r, n, "this")
                }, a, null ),
                h(r, b, n, "replace-emoji", [s(r, n, "description")], {}),
                u
            }
        }
    }())
}),
define("vine-ember/templates/explore/posts/popular", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "view", ["explore/posts/popular-mobile"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "username"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-info");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "description");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block
                          , s = i.inline;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [1])
                          , h = r.createMorphAt(l, 1, 1)
                          , u = r.createMorphAt(r.childAt(l, [3]), 1, 1);
                        return c(a, h, t, "link-user", [], {
                            user: d(a, t, "this"),
                            className: "user"
                        }, e, null ),
                        s(a, u, t, "replace-emoji", [d(a, t, "description")], {}),
                        o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "mouseover-video", [], {
                        post: d(a, t, "this"),
                        className: "small"
                    }, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/explore/posts/three", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "info");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "description");
                    var r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "post-actions");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear twitter");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-twitter"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear facebook");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-facebook"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.inline
                      , s = i.element
                      , o = i.block;
                    r.detectNamespace(n);
                    var l;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                    var h = r.childAt(l, [1])
                      , u = r.childAt(h, [5])
                      , p = r.childAt(u, [3])
                      , m = r.childAt(u, [5])
                      , v = r.createMorphAt(h, 1, 1)
                      , g = r.createMorphAt(r.childAt(h, [3]), 0, 0)
                      , b = r.createMorphAt(u, 1, 1)
                      , C = r.createMorphAt(h, 7, 7);
                    return c(a, v, t, "user-info", [], {
                        data: d(a, t, "this"),
                        cssClass: "user-info-size-24"
                    }),
                    c(a, g, t, "linkify-entities", [], {
                        text: d(a, t, "description"),
                        entities: d(a, t, "entities")
                    }),
                    c(a, b, t, "animated-button", [], {
                        actionName: "like",
                        iconName: "heart_icn",
                        action: "like",
                        isActive: d(a, t, "liked")
                    }),
                    s(a, p, t, "action", ["tweet"], {}),
                    s(a, m, t, "action", ["facebookShare"], {}),
                    o(a, C, t, "if", [d(a, t, "loops")], {}, e, null ),
                    l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "mouseover-video", [], {
                    post: d(a, t, "this")
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/explore/sidebar-list", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "list.title"),
                            d
                        }
                    }
                }()
                  , t = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var c = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null ),
                                n.insertBoundary(d, 0),
                                i(t, c, e, "username"),
                                d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            by ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                            this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var o = r.createMorphAt(s, 1, 1, n);
                            return c(a, o, t, "link-user", [], {
                                user: d(a, t, "this")
                            }, e, null ),
                            s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-info");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "author");
                        var r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("        ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.childAt(o, [1])
                          , h = i.createMorphAt(l, 1, 1)
                          , u = i.createMorphAt(i.childAt(l, [3]), 1, 1);
                        return s(n, h, a, "link-to", ["list", c(n, a, "list.vanityUrl")], {
                            classNames: "user"
                        }, e, null ),
                        s(n, u, a, "with", [c(n, a, "list.createdByUser")], {}, t, null ),
                        o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "mouseover-video", [], {
                        post: d(a, t, "currentPost"),
                        className: "small",
                        mouseEntered: "bindFullscreenListener",
                        mouseLeft: "unbindFullscreenListener"
                    }, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "sidebar-video sidebar-list");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(r.childAt(s, [0]), 1, 1);
                return c(a, o, t, "if", [d(a, t, "currentPost")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/explore/tags", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 0, 0, a);
                        return n.insertBoundary(c, null ),
                        n.insertBoundary(c, 0),
                        d(t, s, e, "tv-link", [], {
                            route: "tag",
                            routeParam: i(t, e, "tag"),
                            text: i(t, e, "hashtag")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(c, 1, 1, n);
                    return d(a, s, t, "each", [], {}, e, null ),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "module-block", [], {
                    className: "trending-metadata",
                    icon: "tag",
                    title: "Trending Tags"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/explore", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["explore/pinned-channel"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "module-block", [], {
                            tagName: "article",
                            className: "pinned-channel",
                            channelIdAttr: d(a, t, "channelIdAttr"),
                            rawIconClass: "channel-badge",
                            iconUrl: d(a, t, "channel.channelIconUrl"),
                            backgroundStyle: d(a, t, "channel.backgroundColorStyle"),
                            title: d(a, t, "channel.featuredTitle"),
                            route: d(a, t, "route"),
                            routeParams: d(a, t, "channel.vanityUrl")
                        }, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "partial", ["explore/featured-users"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "module-block", [], {
                            tagName: "article",
                            className: "featured-users",
                            icon: "profile",
                            title: "Featured Viners"
                        }, e, null ),
                        c
                    }
                }
            }()
              , a = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["explore/posts/one"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "module-block", [], {
                            className: "one-up editors-pick",
                            route: "editors-picks",
                            rawIconClass: "channel-badge editors-pick",
                            title: "Editor's Pick"
                        }, e, null ),
                        c
                    }
                }
            }()
              , n = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["explore/list"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "module-block", [], {
                            className: "one-up list",
                            route: "list",
                            routeParams: d(a, t, "list.vanityUrl"),
                            title: "Vine Playlist"
                        }, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(r, i, d) {
                    var c = i.dom
                      , s = i.hooks
                      , o = s.get
                      , l = s.block;
                    c.detectNamespace(d);
                    var h;
                    i.useFragmentCache && c.canClone ? (null === this.cachedFragment && (h = this.build(c),
                    this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                    this.cachedFragment && (h = c.cloneNode(this.cachedFragment, !0))) : h = this.build(c);
                    var u = c.createMorphAt(h, 0, 0, d)
                      , p = c.createMorphAt(h, 1, 1, d)
                      , m = c.createMorphAt(h, 2, 2, d)
                      , v = c.createMorphAt(h, 3, 3, d);
                    return c.insertBoundary(h, null ),
                    c.insertBoundary(h, 0),
                    l(i, u, r, "if", [o(i, r, "channel")], {}, e, null ),
                    l(i, p, r, "if", [o(i, r, "users")], {}, t, null ),
                    l(i, m, r, "if", [o(i, r, "postIdStr")], {}, a, null ),
                    l(i, v, r, "if", [o(i, r, "list")], {}, n, null ),
                    h
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "each", [], {}, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/footer", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "footer-share");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                    return d(t, s, e, "share-post", [], {
                        post: i(t, e, "shareObject"),
                        featureSet: i(t, e, "shareFeatureSet")
                    }),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("footer")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("ul")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li");
                e.setAttribute(r, "class", "twitter");
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https:///twitter.com/vine"),
                e.setAttribute(i, "target", "_blank");
                var d = e.createElement("span");
                e.setAttribute(d, "class", "icon-twitter"),
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li");
                e.setAttribute(r, "class", "facebook");
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https://www.facebook.com/vineapp"),
                e.setAttribute(i, "target", "_blank");
                var d = e.createElement("span");
                e.setAttribute(d, "class", "icon-facebook"),
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li")
                  , i = e.createElement("a");
                e.setAttribute(i, "href", "/blog");
                var d = e.createTextNode("Blog");
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li")
                  , i = e.createElement("a");
                e.setAttribute(i, "href", "http://help.vine.co"),
                e.setAttribute(i, "target", "_blank");
                var d = e.createTextNode("Help");
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li")
                  , i = e.createElement("a");
                e.setAttribute(i, "href", "/jobs");
                var d = e.createTextNode("Jobs");
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li")
                  , i = e.createElement("a");
                e.setAttribute(i, "href", "/contact");
                var d = e.createTextNode("Contact");
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li");
                e.setAttribute(r, "class", "terms");
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/terms");
                var d = e.createTextNode("Terms");
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li");
                e.setAttribute(r, "class", "privacy");
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/privacy");
                var d = e.createTextNode("Privacy");
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li")
                  , i = e.createElement("a");
                e.setAttribute(i, "href", "/rules");
                var d = e.createTextNode("Rules");
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li");
                e.setAttribute(r, "class", "vm-faq"),
                e.setAttribute(r, "target", "_blank");
                var i = e.createElement("strong")
                  , d = e.createElement("a");
                e.setAttribute(d, "href", "https://support.twitter.com/articles/20171567");
                var c = e.createTextNode("Learn More");
                e.appendChild(d, c),
                e.appendChild(i, d),
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li");
                e.setAttribute(r, "class", "copy");
                var i = e.createTextNode("© ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode(" Vine Labs, Inc.");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block
                  , s = i.element
                  , o = i.inline;
                r.detectNamespace(n);
                var l;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                var h = r.childAt(l, [0])
                  , u = r.childAt(h, [3])
                  , p = r.createMorphAt(h, 1, 1)
                  , m = r.createMorphAt(r.childAt(u, [21]), 1, 1);
                return c(a, p, t, "if", [d(a, t, "shareObject")], {}, e, null ),
                s(a, u, t, "bind-attr", [], {
                    "class": "session.isAuthenticated:logged-in"
                }),
                o(a, m, t, "unbound", [d(a, t, "currentYear")], {}),
                l
            }
        }
    }())
}),
define("vine-ember/templates/forgot-password", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-smiley"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("button")
                          , n = e.createTextNode("Back to Sign In");
                        return e.appendChild(a, n),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(c, 1, 1, n);
                    return d(a, s, t, "link-to", ["login"], {}, e, null ),
                    c
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("form");
                    e.setAttribute(a, "id", "forgot-password");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "label-row");
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-frowny"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "message");
                    var i = e.createTextNode("Forgot your password?");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("button");
                    e.setAttribute(n, "type", "submit");
                    var r = e.createTextNode("Reset Password");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.createMorphAt(o, 3, 3);
                    return i(t, o, e, "action", ["submitEmail"], {
                        on: "submit"
                    }),
                    c(t, l, e, "my-input", [], {
                        name: "email",
                        placeholder: "Email",
                        value: d(t, e, "email")
                    }),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "login-page");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div")
                  , i = e.createComment("");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.element
                  , o = c.get
                  , l = c.block
                  , h = c.content;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0, 1])
                  , m = d.childAt(p, [3])
                  , v = d.createMorphAt(p, 1, 1)
                  , g = d.createMorphAt(m, 0, 0)
                  , b = d.createMorphAt(p, 5, 5);
                return s(r, p, n, "bind-attr", [], {
                    "class": ":login-container submitted"
                }),
                l(r, v, n, "if", [o(r, n, "submitted")], {}, e, null ),
                s(r, m, n, "bind-attr", [], {
                    "class": ":message message.type"
                }),
                h(r, g, n, "message.text"),
                l(r, b, n, "if", [o(r, n, "submitted")], {}, t, a),
                u
            }
        }
    }())
}),
define("vine-ember/templates/fullscreen-post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "partial", ["explicit-content"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "if", [d(a, t, "explicitContent")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n            ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline
                          , d = r.get;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a)
                          , o = n.createMorphAt(c, 3, 3, a);
                        return i(t, s, e, "partial", ["post-byline"], {}),
                        i(t, o, e, "user-info", [], {
                            data: d(t, e, "this"),
                            cssClass: "user-info-size-60 user-info-stacked user-info-hide-metadata user-info-inherit-color"
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "with", [d(a, t, "view.post")], {}, e, null ),
                    s
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 0, 0, a);
                            return n.insertBoundary(c, null ),
                            n.insertBoundary(c, 0),
                            d(t, s, e, "secure-img", [], {
                                src: i(t, e, "iconUrl")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("              ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "icon");
                        var n = e.createTextNode("\n                ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n              ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.element
                          , s = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [1])
                          , h = r.createMorphAt(l, 1, 1);
                        return c(a, l, t, "bind-attr", [], {
                            style: d(a, t, "iconStyle")
                        }),
                        s(a, h, t, "if", [d(a, t, "iconUrl")], {}, e, null ),
                        o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("h2");
                    e.setAttribute(a, "class", "timeline-name");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createElement("span")
                      , r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block
                      , s = i.inline;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.childAt(o, [1])
                      , h = r.createMorphAt(l, 1, 1)
                      , u = r.createMorphAt(r.childAt(l, [2]), 0, 0);
                    return c(a, h, t, "if", [d(a, t, "iconStyle")], {}, e, null ),
                    s(a, u, t, "html-linebreak", [d(a, t, "timelineName")], {}),
                    o
                }
            }
        }()
          , n = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("              ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "autoplay-on");
                    var n = e.createTextNode("\n                ON\n              ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["turnOffAutoplay"], {}),
                    d
                }
            }
        }()
          , r = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("              ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "autoplay-off");
                    var n = e.createTextNode("\n                OFF\n              ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["turnOnAutoplay"], {}),
                    d
                }
            }
        }()
          , i = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "share-widgets", [], {
                        fbUrl: i(t, e, "view.fbUrl"),
                        tweetUrl: i(t, e, "view.tweetUrl")
                    }),
                    c
                }
            }
        }()
          , d = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline
                          , d = r.get;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a)
                          , o = n.createMorphAt(c, 3, 3, a);
                        return i(t, s, e, "partial", ["post-byline"], {}),
                        i(t, o, e, "user-info", [], {
                            data: d(t, e, "this"),
                            cssClass: "user-info-size-38 user-info-hide-metadata user-info-inherit-color user-info-stacked"
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "with", [d(a, t, "view.post")], {}, e, null ),
                    s
                }
            }
        }()
          , c = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ·\n            ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }),
                        c
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div")
                          , n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element
                          , d = r.get
                          , c = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var o = n.childAt(s, [1])
                          , l = n.createMorphAt(o, 1, 1)
                          , h = n.createMorphAt(o, 2, 2);
                        return i(t, o, e, "bind-attr", [], {
                            "class": ":attribution showAttribution:attribution-visible"
                        }),
                        i(t, o, e, "action", ["hideAttribution"], {
                            on: "mouseLeave"
                        }),
                        c(t, l, e, "attribution-icon", [], {
                            cssClass: "dark",
                            active: d(t, e, "showAttribution"),
                            link: d(t, e, "attributionRoute")
                        }),
                        c(t, h, e, "partial", ["audio-attribution"], {}),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("h2");
                    e.setAttribute(a, "class", "description");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n        ");
                    e.appendChild(t, a);
                    var a = e.createElement("h5")
                      , n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.inline
                      , o = d.block;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.childAt(l, [3])
                      , u = i.createMorphAt(i.childAt(l, [1]), 0, 0)
                      , p = i.createMorphAt(h, 1, 1)
                      , m = i.createMorphAt(h, 3, 3)
                      , v = i.createMorphAt(l, 5, 5, r);
                    return i.insertBoundary(l, null ),
                    s(n, u, a, "linkify-entities", [], {
                        text: c(n, a, "description"),
                        entities: c(n, a, "entities")
                    }),
                    s(n, p, a, "partial", ["time-and-location"], {}),
                    o(n, m, a, "if", [c(n, a, "loops")], {}, e, null ),
                    o(n, v, a, "if", [c(n, a, "hasAudioAttribution")], {}, t, null ),
                    l
                }
            }
        }()
          , s = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("div");
                    e.setAttribute(a, "class", "logo");
                    var n = e.createElement("div");
                    return e.setAttribute(n, "class", "icon-vine_logo"),
                    e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "video-container continuous");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "vine-metadata");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "metadata-wrapper");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div")
                  , i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "bind-attr", ""),
                e.setAttribute(i, "class", "fullscreen-header");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "post-info");
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "loop-control");
                var s = e.createTextNode("\n            ");
                e.appendChild(c, s);
                var s = e.createElement("h5");
                e.setAttribute(s, "class", "loop-control-text");
                var o = e.createTextNode("\n              AUTOPLAY\n            ");
                e.appendChild(s, o),
                e.appendChild(c, s);
                var s = e.createTextNode("\n");
                e.appendChild(c, s);
                var s = e.createComment("");
                e.appendChild(c, s);
                var s = e.createTextNode("          ");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("h5");
                e.setAttribute(c, "class", "post-position");
                var s = e.createComment("");
                e.appendChild(c, s);
                var s = e.createTextNode(" of ");
                e.appendChild(c, s);
                var s = e.createComment("");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "share-close");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "icon-close_x"),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "fullscreen-actions");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div")
                  , d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "icon-arrow_left"),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div")
                  , d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "icon-heart_icn"),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div")
                  , d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "icon-arrow_right"),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(o, l, h) {
                var u = l.dom
                  , p = l.hooks
                  , m = p.get
                  , v = p.element
                  , g = p.inline
                  , b = p.block;
                u.detectNamespace(h);
                var C;
                l.useFragmentCache && u.canClone ? (null === this.cachedFragment && (C = this.build(u),
                this.hasRendered ? this.cachedFragment = C : this.hasRendered = !0),
                this.cachedFragment && (C = u.cloneNode(this.cachedFragment, !0))) : C = this.build(u);
                var f = u.childAt(C, [0])
                  , F = u.childAt(C, [2, 1])
                  , N = u.childAt(F, [1])
                  , T = u.childAt(N, [1])
                  , x = u.childAt(T, [3])
                  , A = u.childAt(x, [3])
                  , k = u.childAt(N, [3])
                  , E = u.childAt(F, [3])
                  , R = u.childAt(E, [1])
                  , M = u.childAt(E, [3])
                  , y = u.childAt(E, [5])
                  , w = u.createMorphAt(f, 1, 1)
                  , B = u.createMorphAt(f, 3, 3)
                  , P = u.createMorphAt(T, 1, 1)
                  , L = u.createMorphAt(u.childAt(x, [1]), 3, 3)
                  , H = u.createMorphAt(A, 0, 0)
                  , D = u.createMorphAt(A, 2, 2)
                  , S = u.createMorphAt(T, 5, 5)
                  , _ = u.createMorphAt(N, 5, 5)
                  , I = u.createMorphAt(N, 7, 7)
                  , U = u.createMorphAt(F, 5, 5);
                return v(l, f, o, "bind-attr", [], {
                    style: m(l, o, "backgroundImageStyle")
                }),
                g(l, w, o, "watch-more", [], {
                    post: m(l, o, "view.post"),
                    action: "launchLongformViewer"
                }),
                b(l, B, o, "with", [m(l, o, "view.post")], {}, e, null ),
                v(l, N, o, "bind-attr", [], {
                    "class": ":post-info-container isUserTimeline"
                }),
                b(l, P, o, "if", [m(l, o, "isUserTimeline")], {}, t, a),
                b(l, L, o, "if", [m(l, o, "autoplayOn")], {}, n, r),
                g(l, H, o, "format-count", [m(l, o, "positionIndex")], {}),
                g(l, D, o, "format-count", [m(l, o, "totalPosts")], {}),
                b(l, S, o, "if", [m(l, o, "view.shouldShowShare")], {}, i, null ),
                v(l, k, o, "action", ["closeFullscreen"], {}),
                b(l, _, o, "unless", [m(l, o, "isUserTimeline")], {}, d, null ),
                b(l, I, o, "with", [m(l, o, "view.post")], {}, c, null ),
                v(l, R, o, "bind-attr", [], {
                    "class": ":action :nav-action :left prevAvailable::disabled"
                }),
                v(l, R, o, "action", ["navLeft"], {}),
                v(l, M, o, "bind-attr", [], {
                    "class": ":action :like view.post.liked:active"
                }),
                v(l, M, o, "action", ["like"], {}),
                v(l, y, o, "bind-attr", [], {
                    "class": ":action :nav-action :right nextAvailable::disabled"
                }),
                v(l, y, o, "action", ["navRight"], {}),
                b(l, U, o, "link-to", ["index"], {}, s, null ),
                C
            }
        }
    }())
}),
define("vine-ember/templates/grid-post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment();
                        return t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "info");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("h3");
                    e.setAttribute(n, "class", "description");
                    var r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "post-actions");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear comment");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-comment"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear twitter");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-twitter"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear facebook");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-facebook"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.inline
                      , o = d.block
                      , l = d.element;
                    i.detectNamespace(r);
                    var h;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                    this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                    this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                    var u = i.childAt(h, [1])
                      , p = i.childAt(u, [5])
                      , m = i.childAt(p, [3])
                      , v = i.childAt(p, [5])
                      , g = i.childAt(p, [7])
                      , b = i.createMorphAt(u, 1, 1)
                      , C = i.createMorphAt(i.childAt(u, [3]), 0, 0)
                      , f = i.createMorphAt(p, 1, 1)
                      , F = i.createMorphAt(u, 7, 7);
                    return s(n, b, a, "user-info", [], {
                        data: c(n, a, "this"),
                        cssClass: "user-info-size-38"
                    }),
                    s(n, C, a, "linkify-entities", [], {
                        text: c(n, a, "description"),
                        entities: c(n, a, "entities")
                    }),
                    o(n, f, a, "animated-button", [], {
                        actionName: "like",
                        iconName: "heart_icn",
                        action: "like",
                        isActive: c(n, a, "liked")
                    }, e, null ),
                    l(n, m, a, "action", ["commentInListView"], {}),
                    l(n, v, a, "action", ["tweet"], {}),
                    l(n, g, a, "action", ["facebookShare"], {}),
                    o(n, F, a, "if", [c(n, a, "loops")], {}, t, null ),
                    h
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "mouseover-video", [], {
                    post: d(a, t, "this"),
                    showLongform: !0,
                    toggleMute: !0,
                    clickToEnlarge: !0
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/header", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("button")
                              , n = e.createElement("span");
                            e.setAttribute(n, "class", "icon-feed"),
                            e.appendChild(a, n);
                            var n = e.createElement("h3")
                              , r = e.createTextNode("Home Feed");
                            return e.appendChild(n, r),
                            e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "link-to", ["feed"], {}, e, null ),
                        c
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button")
                          , n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-index"),
                        e.appendChild(a, n);
                        var n = e.createElement("h3")
                          , r = e.createTextNode("Explore");
                        e.appendChild(n, r),
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , a = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button")
                          , n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-popular_now"),
                        e.appendChild(a, n);
                        var n = e.createElement("h3")
                          , r = e.createTextNode("Popular Now");
                        e.appendChild(n, r),
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , n = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button")
                          , n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-trends"),
                        e.appendChild(a, n);
                        var n = e.createElement("h3")
                          , r = e.createTextNode("Trends");
                        e.appendChild(n, r),
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , r = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createElement("button")
                              , n = e.createTextNode("\n          ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n          ");
                            e.appendChild(a, n);
                            var n = e.createElement("h3")
                              , r = e.createTextNode("Profile");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                            return d(t, s, e, "secure-img", [], {
                                src: i(t, e, "currentUser.avatarUrl"),
                                "class": "avatar",
                                style: i(t, e, "currentUser.borderColorStyle")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "link-user", [], {
                            user: d(a, t, "currentUser")
                        }, e, null ),
                        s
                    }
                }
            }()
              , i = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button")
                          , n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-logout"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("h3")
                          , r = e.createTextNode("Logout");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [1]);
                        return i(t, c, e, "action", ["logout"], {}),
                        d
                    }
                }
            }()
              , d = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button")
                          , n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-logout"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("h3")
                          , r = e.createTextNode("Login");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [1]);
                        return i(t, c, e, "action", ["login"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "mobile-menu");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "global-search");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(c, s, o) {
                    var l = s.dom
                      , h = s.hooks
                      , u = h.element
                      , p = h.get
                      , m = h.block
                      , v = h.inline;
                    l.detectNamespace(o);
                    var g;
                    s.useFragmentCache && l.canClone ? (null === this.cachedFragment && (g = this.build(l),
                    this.hasRendered ? this.cachedFragment = g : this.hasRendered = !0),
                    this.cachedFragment && (g = l.cloneNode(this.cachedFragment, !0))) : g = this.build(l);
                    var b = l.childAt(g, [1])
                      , C = l.createMorphAt(b, 1, 1)
                      , f = l.createMorphAt(b, 2, 2)
                      , F = l.createMorphAt(b, 3, 3)
                      , N = l.createMorphAt(b, 4, 4)
                      , T = l.createMorphAt(b, 5, 5)
                      , x = l.createMorphAt(b, 6, 6)
                      , A = l.createMorphAt(l.childAt(g, [3]), 0, 0);
                    return u(s, b, c, "action", ["hideMobileMenu"], {
                        target: "view"
                    }),
                    m(s, C, c, "if", [p(s, c, "session.isAuthenticated")], {}, e, null ),
                    m(s, f, c, "link-to", ["index"], {}, t, null ),
                    m(s, F, c, "link-to", ["popular-now"], {}, a, null ),
                    m(s, N, c, "link-to", ["trends"], {}, n, null ),
                    m(s, T, c, "if", [p(s, c, "currentUser")], {}, r, null ),
                    m(s, x, c, "if", [p(s, c, "session.isAuthenticated")], {}, i, d),
                    v(s, A, c, "search-autocomplete", [], {
                        tagCount: 1,
                        venueCount: 1,
                        resultOrder: p(s, c, "searchAutocompleteOrder"),
                        isMobile: p(s, c, "isMobile")
                    }),
                    g
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "clear icon icon-menu"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "clear icon icon-search"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1])
                      , s = n.childAt(d, [3]);
                    return i(t, c, e, "action", ["toggleMobileMenu"], {
                        target: "view"
                    }),
                    i(t, s, e, "action", ["toggleSearchMenu"], {
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , a = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "nav-button", [], {
                            route: "feed"
                        }),
                        d
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("            Upload\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                                r
                            }
                        }
                    }()
                      , t = function() {
                        var e = function() {
                            var e = function() {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null ,
                                    hasRendered: !1,
                                    build: function(e) {
                                        var t = e.createDocumentFragment()
                                          , a = e.createTextNode("              ");
                                        e.appendChild(t, a);
                                        var a = e.createComment("");
                                        e.appendChild(t, a);
                                        var a = e.createTextNode("\n");
                                        return e.appendChild(t, a),
                                        t
                                    },
                                    render: function(e, t, a) {
                                        var n = t.dom
                                          , r = t.hooks
                                          , i = r.inline;
                                        n.detectNamespace(a);
                                        var d;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                        var c = n.createMorphAt(d, 1, 1, a);
                                        return i(t, c, e, "vine-spinner", [], {
                                            color: "rgba(255, 255, 255, 0.3)",
                                            size: "30",
                                            "class": "loading-upload"
                                        }),
                                        d
                                    }
                                }
                            }()
                              , t = function() {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null ,
                                    hasRendered: !1,
                                    build: function(e) {
                                        var t = e.createDocumentFragment()
                                          , a = e.createTextNode("              ");
                                        e.appendChild(t, a);
                                        var a = e.createComment("");
                                        e.appendChild(t, a);
                                        var a = e.createTextNode("\n");
                                        return e.appendChild(t, a),
                                        t
                                    },
                                    render: function(e, t, a) {
                                        var n = t.dom
                                          , r = t.hooks
                                          , i = r.inline;
                                        n.detectNamespace(a);
                                        var d;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                        var c = n.createMorphAt(d, 1, 1, a);
                                        return i(t, c, e, "cdn-img", [], {
                                            src: "images/loading_white-3fcec36654ac22d5facfa58ed4fc5c16.gif",
                                            height: "30",
                                            width: "30",
                                            "class": "loading-upload"
                                        }),
                                        d
                                    }
                                }
                            }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createComment("");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(a, n, r) {
                                    var i = n.dom
                                      , d = n.hooks
                                      , c = d.get
                                      , s = d.block;
                                    i.detectNamespace(r);
                                    var o;
                                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                                    var l = i.createMorphAt(o, 0, 0, r);
                                    return i.insertBoundary(o, null ),
                                    i.insertBoundary(o, 0),
                                    s(n, l, a, "if", [c(n, a, "canAnimateSVG")], {}, e, t),
                                    o
                                }
                            }
                        }()
                          , t = function() {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createTextNode("            Upload\n          ");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                                    r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(a, n, r) {
                                var i = n.dom
                                  , d = n.hooks
                                  , c = d.get
                                  , s = d.block;
                                i.detectNamespace(r);
                                var o;
                                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                                var l = i.createMorphAt(o, 0, 0, r);
                                return i.insertBoundary(o, null ),
                                i.insertBoundary(o, 0),
                                s(n, l, a, "if", [c(n, a, "upload")], {}, e, t),
                                o
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "upload-button");
                            var n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("        ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(a, n, r) {
                            var i = n.dom
                              , d = n.hooks
                              , c = d.get
                              , s = d.attribute
                              , o = d.element
                              , l = d.block;
                            i.detectNamespace(r);
                            var h;
                            n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                            this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                            this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                            var u = i.childAt(h, [1])
                              , p = i.createMorphAt(u, 1, 1)
                              , m = i.createAttrMorph(u, "disabled");
                            return s(n, m, u, "disabled", c(n, a, "uploadMinimized")),
                            o(n, u, a, "action", ["launchUpload"], {}),
                            l(n, p, a, "if", [c(n, a, "uploadMinimized")], {}, e, t),
                            h
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "if", [d(a, t, "session.isAuthenticated")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-buttons");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "global-search");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.inline
                      , s = d.get
                      , o = d.block;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.childAt(l, [1])
                      , u = i.createMorphAt(h, 1, 1)
                      , p = i.createMorphAt(h, 3, 3)
                      , m = i.createMorphAt(h, 5, 5)
                      , v = i.createMorphAt(h, 7, 7)
                      , g = i.createMorphAt(l, 3, 3, r)
                      , b = i.createMorphAt(i.childAt(l, [5]), 0, 0);
                    return c(n, u, a, "nav-button", [], {
                        route: "index"
                    }),
                    o(n, p, a, "if", [s(n, a, "session.isAuthenticated")], {}, e, null ),
                    c(n, m, a, "nav-button", [], {
                        route: "popular-now"
                    }),
                    c(n, v, a, "nav-button", [], {
                        route: "trends"
                    }),
                    o(n, g, a, "if", [s(n, a, "hasUpload")], {}, t, null ),
                    c(n, b, a, "search-autocomplete", [], {
                        tagCount: 1,
                        venueCount: 1,
                        resultOrder: s(n, a, "searchAutocompleteOrder")
                    }),
                    l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("header")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block
                  , l = c.element
                  , h = c.inline;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [2])
                  , m = d.createMorphAt(u, 0, 0, i)
                  , v = d.createMorphAt(p, 1, 1)
                  , g = d.createMorphAt(p, 3, 3);
                return d.insertBoundary(u, 0),
                o(r, m, n, "if", [s(r, n, "isMobile")], {}, e, null ),
                l(r, p, n, "bind-attr", [], {
                    "class": "session.isAuthenticated:logged-in:logged-out hasUpload:upload-enabled"
                }),
                o(r, v, n, "if", [s(r, n, "isMobile")], {}, t, a),
                h(r, g, n, "header-logo", [], {
                    isMobile: s(r, n, "isMobile"),
                    mobileTitle: s(r, n, "mobileTitle")
                }),
                u
            }
        }
    }())
}),
define("vine-ember/templates/index", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "render", ["explore/mobile"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "partial", ["timelines/fullscreen"], {}),
                        d
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "fullscreen offset");
                            var n = e.createTextNode("\n          ");
                            e.appendChild(a, n);
                            var n = e.createElement("h3")
                              , r = e.createTextNode("TV Mode");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n          ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "icon-tv"),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.element;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.childAt(d, [1]);
                            return i(t, c, e, "action", ["openFullscreen"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("section");
                        e.setAttribute(a, "id", "explore-header");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "id", "search-input");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("section");
                        e.setAttribute(a, "id", "explore-content");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("      ");
                        e.appendChild(a, n);
                        var n = e.createElement("section");
                        e.setAttribute(n, "id", "explore-sidebar");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("section");
                        e.setAttribute(n, "id", "explore-timeline");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.inline
                          , c = i.get
                          , s = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [5])
                          , h = r.childAt(l, [3])
                          , u = r.createMorphAt(r.childAt(o, [1]), 1, 1)
                          , p = r.createMorphAt(r.childAt(o, [3]), 0, 0)
                          , m = r.createMorphAt(l, 1, 1)
                          , v = r.createMorphAt(h, 1, 1)
                          , g = r.createMorphAt(h, 3, 3)
                          , b = r.createMorphAt(h, 5, 5)
                          , C = r.createMorphAt(h, 7, 7)
                          , f = r.createMorphAt(r.childAt(l, [5]), 1, 1);
                        return d(a, u, t, "render", ["splash"], {}),
                        d(a, p, t, "search-autocomplete", [], {
                            autofocus: !0,
                            columnSize: 3
                        }),
                        s(a, m, t, "if", [c(a, t, "fullscreenAvailable")], {}, e, null ),
                        d(a, v, t, "render", ["explore/channels"], {}),
                        d(a, g, t, "render", ["explore/popular-now"], {}),
                        d(a, b, t, "render", ["explore/lists"], {}),
                        d(a, C, t, "render", ["explore/tags"], {}),
                        d(a, f, t, "render", ["explore"], {}),
                        o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "isTvMode")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/jobs", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "name"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("              ");
                        e.appendChild(t, a);
                        var a = e.createElement("li")
                          , n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(r.childAt(s, [1]), 0, 0);
                        return c(a, o, t, "link-to", ["jobs.job", d(a, t, "id")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("ul");
                    e.setAttribute(a, "class", "position-list");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                    return d(a, s, t, "each", [], {}, e, null ),
                    c
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("img");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.element;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.childAt(c, [1]);
                            return d(t, s, e, "bind-attr", [], {
                                src: i(t, e, "gif")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("li")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                        return c(a, o, t, "link-to", ["permalink-post", d(a, t, "source")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "each", [d(a, t, "employeeVines")], {}, e, null ),
                    s
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("video");
                            e.setAttribute(a, "width", "100%"),
                            e.setAttribute(a, "muted", ""),
                            e.setAttribute(a, "loop", ""),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.element;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.childAt(c, [1]);
                            return d(t, s, e, "bind-attr", [], {
                                src: i(t, e, "mp4")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("li")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                        return c(a, o, t, "link-to", ["permalink-post", d(a, t, "source")], {
                            target: "_blank"
                        }, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "each", [d(a, t, "employeeVines")], {}, e, null ),
                    s
                }
            }
        }()
          , n = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("li")
                      , n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "perk-icon");
                    var r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "perk-title");
                    var r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "perk-description");
                    var r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline
                      , s = r.content;
                    n.detectNamespace(a);
                    var o;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (o = this.build(n),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = n.cloneNode(this.cachedFragment, !0))) : o = this.build(n);
                    var l = n.childAt(o, [1])
                      , h = n.createMorphAt(n.childAt(l, [1]), 0, 0)
                      , u = n.createMorphAt(n.childAt(l, [3]), 0, 0)
                      , p = n.createMorphAt(n.childAt(l, [5]), 0, 0);
                    return i(t, l, e, "bind-attr", [], {
                        "class": "className"
                    }),
                    c(t, h, e, "cdn-img", [], {
                        src: d(t, e, "img"),
                        width: "200",
                        height: "200"
                    }),
                    s(t, u, e, "name"),
                    s(t, p, e, "description"),
                    o
                }
            }
        }()
          , r = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("·");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , i = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "name"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("            ");
                    e.appendChild(t, a);
                    var a = e.createElement("li")
                      , n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 0, 0);
                    return c(a, o, t, "link-to", ["jobs.job", d(a, t, "id")], {}, e, null ),
                    s
                }
            }
        }()
          , d = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "name"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("            ");
                    e.appendChild(t, a);
                    var a = e.createElement("li")
                      , n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 0, 0);
                    return c(a, o, t, "link-to", ["jobs.job", d(a, t, "id")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "jobs-wrapper");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "hero");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "hero-overlay");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "hero-overlay-bg"),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "class", "toggle-credits");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span")
                  , c = e.createTextNode("Show credits");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span")
                  , c = e.createTextNode("Hide credits");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h2")
                  , d = e.createTextNode("Jobs at Vine");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "hero-play-button"),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "credits");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h2")
                  , c = e.createTextNode("Thank you.");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("p")
                  , c = e.createTextNode("The following users contributed Vines for this video: ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Alesia Antonucci");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Tammara Twitty");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Bridgett Blood");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Melany Morvant");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Forest Folkers");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Kimiko Kadlec");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Alec Aldaco");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Cordia Copp");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Luigi Lavallee");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Sterling Siegmund");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Adrien Applewhite");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Otis Overholt");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Rickey Riedel");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Erwin Estell");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Anneliese Altschuler");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Kalyn Karlson");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Lottie Lipps");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Cythia Cremeans");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Hermila Heier");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Goldie Gomes");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Shannan Syverson");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Nanette Nanney");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Cherise Caba");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Cindie Crosby");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Virgie Voisin");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Dario Deschenes");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Cammy Coward");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Shannon Sautner");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Holley Hallee");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(", ");
                e.appendChild(d, c);
                var c = e.createElement("a");
                e.setAttribute(c, "href", "");
                var s = e.createTextNode("Lolita Levering");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode(".");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("video");
                e.setAttribute(r, "autoplay", ""),
                e.setAttribute(r, "preload", ""),
                e.setAttribute(r, "muted", ""),
                e.setAttribute(r, "width", "100%"),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "current-openings");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h2")
                  , d = e.createTextNode("Current openings in NYC");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "column");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "intro-text");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h2")
                  , d = e.createTextNode("Vine is the best way to see & share life in motion.");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("p")
                  , d = e.createTextNode("With Vine, you can watch, create and share short looping videos -- anytime, anywhere. Through these videos, called Vines, people now have an entirely new medium to express themselves and their creativity.  More than 200 million people enjoy Vines across the web every month, leading to more than 1.5 billion loops each day. Follow ");
                e.appendChild(i, d);
                var d = e.createElement("a");
                e.setAttribute(d, "href", "https://twitter.com/vine");
                var c = e.createTextNode("@vine");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode(" to keep up with product releases and other Vine news, and to see great Vines.");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "plants");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "vines-all-the-way-down");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("ul")
                  , i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div")
                  , i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h3")
                  , d = e.createTextNode("Our Perks");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("ul");
                e.setAttribute(i, "class", "perk-slides");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "bullets");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "next-perk");
                var d = e.createTextNode("next");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "prev-perk");
                var d = e.createTextNode("prev");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "organization-description engineering");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "top-org-section");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h3");
                e.setAttribute(d, "class", "org-title");
                var c = e.createTextNode("Engineering");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("blockquote")
                  , c = e.createTextNode("\n          We're building the future of mobile video.\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "lower-org-section");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h5");
                e.setAttribute(d, "class", "org-positions-title");
                var c = e.createTextNode("Join the team");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("ul");
                e.setAttribute(d, "class", "position-list");
                var c = e.createTextNode("\n");
                e.appendChild(d, c);
                var c = e.createComment("");
                e.appendChild(d, c);
                var c = e.createTextNode("        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "eng-blog");
                var r = e.createTextNode("\n    Vine Eng Blog");
                e.appendChild(n, r);
                var r = e.createElement("br");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("a");
                e.setAttribute(r, "href", "http://engineering.vine.co/"),
                e.setAttribute(r, "target", "_blank");
                var i = e.createTextNode("engineering.vine.co");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "organization-description design");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "top-org-section");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h3");
                e.setAttribute(d, "class", "org-title");
                var c = e.createTextNode("Product & Design");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("blockquote")
                  , c = e.createTextNode("\n          Vine starts with design. It’s in our DNA.\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "lower-org-section");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h5");
                e.setAttribute(d, "class", "org-positions-title");
                var c = e.createTextNode("Join the team");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("ul");
                e.setAttribute(d, "class", "position-list");
                var c = e.createTextNode("\n");
                e.appendChild(d, c);
                var c = e.createComment("");
                e.appendChild(d, c);
                var c = e.createTextNode("        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "footer");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("ul");
                e.setAttribute(r, "class", "social-networks");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li")
                  , d = e.createElement("a");
                e.setAttribute(d, "href", "https://vine.co/vine"),
                e.setAttribute(d, "title", "Vine on Vine"),
                e.setAttribute(d, "class", "vine"),
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li")
                  , d = e.createElement("a");
                e.setAttribute(d, "href", "https://twitter.com/vine"),
                e.setAttribute(d, "title", "Vine on Twitter"),
                e.setAttribute(d, "class", "twitter"),
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li")
                  , d = e.createElement("a");
                e.setAttribute(d, "href", "https://www.facebook.com/vineapp"),
                e.setAttribute(d, "title", "Vine on Facebook"),
                e.setAttribute(d, "class", "facebook"),
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li")
                  , d = e.createElement("a");
                e.setAttribute(d, "href", "http://www.linkedin.com/company/vine"),
                e.setAttribute(d, "title", "Vine on LinkedIn"),
                e.setAttribute(d, "class", "linked-in"),
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li")
                  , d = e.createElement("a");
                e.setAttribute(d, "href", "http://blog.vine.co"),
                e.setAttribute(d, "title", "Vine on Tumblr"),
                e.setAttribute(d, "class", "tumblr"),
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li")
                  , d = e.createElement("a");
                e.setAttribute(d, "href", "http://www.glassdoor.com/Reviews/Vine-Reviews-E785002.htm"),
                e.setAttribute(d, "title", "Vine on Glassdoor"),
                e.setAttribute(d, "class", "glassdoor"),
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li")
                  , d = e.createElement("a");
                e.setAttribute(d, "href", "https://dribbble.com/vineapp"),
                e.setAttribute(d, "title", "Vine on Dribbble"),
                e.setAttribute(d, "class", "dribbble"),
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n ");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(c, s, o) {
                var l = s.dom
                  , h = s.hooks
                  , u = h.element
                  , p = h.get
                  , m = h.block
                  , v = h.inline;
                l.detectNamespace(o);
                var g;
                s.useFragmentCache && l.canClone ? (null === this.cachedFragment && (g = this.build(l),
                this.hasRendered ? this.cachedFragment = g : this.hasRendered = !0),
                this.cachedFragment && (g = l.cloneNode(this.cachedFragment, !0))) : g = this.build(l);
                var b = l.childAt(g, [0])
                  , C = l.childAt(b, [1])
                  , f = l.childAt(C, [1])
                  , F = l.childAt(f, [3])
                  , N = l.childAt(f, [7])
                  , T = l.childAt(C, [3])
                  , x = l.childAt(b, [5])
                  , A = l.childAt(x, [7])
                  , k = l.childAt(b, [9])
                  , E = l.childAt(k, [1])
                  , R = l.childAt(E, [3])
                  , M = l.childAt(E, [7])
                  , y = l.childAt(E, [9])
                  , w = l.createMorphAt(l.childAt(b, [3, 1, 3]), 1, 1)
                  , B = l.createMorphAt(x, 3, 3)
                  , P = l.createMorphAt(x, 5, 5)
                  , L = l.createMorphAt(A, 1, 1)
                  , H = l.createMorphAt(A, 3, 3)
                  , D = l.createMorphAt(A, 5, 5)
                  , S = l.createMorphAt(A, 7, 7)
                  , _ = l.createMorphAt(A, 9, 9)
                  , I = l.createMorphAt(l.childAt(b, [7, 1]), 1, 1)
                  , U = l.createMorphAt(R, 1, 1)
                  , V = l.createMorphAt(l.childAt(E, [5]), 1, 1)
                  , $ = l.createMorphAt(l.childAt(b, [11, 1, 3, 3]), 1, 1)
                  , O = l.createMorphAt(l.childAt(b, [15, 1, 3, 3]), 1, 1);
                return u(s, F, c, "action", ["toggleCredits"], {}),
                u(s, N, c, "action", ["playHeroVideo"], {
                    target: "view"
                }),
                u(s, T, c, "bind-attr", [], {
                    src: "heroVideoUrl",
                    poster: "heroPosterUrl"
                }),
                m(s, w, c, "each", [p(s, c, "allJobsColumns")], {}, e, null ),
                v(s, B, c, "cdn-img", [], {
                    "class": "drone-1",
                    src: "images/jobs/drone-1-98cff178001bf961d544442385c9ad48.png"
                }),
                v(s, P, c, "cdn-img", [], {
                    "class": "drone-2",
                    src: "images/jobs/drone-2-b4d64fced12e1cb4f6d8e78d5167c21e.png"
                }),
                v(s, L, c, "cdn-img", [], {
                    src: "images/jobs/plant-4-adfa9fa3592e0be9409189a76b9e0d00.png",
                    alt: "a plant",
                    "class": "plant-1",
                    "data-parallax": '{"startsAtScroll":1200,"stopsAtScroll":2400,"startValue":425,"endValue":555,"property":"left"}'
                }),
                v(s, H, c, "cdn-img", [], {
                    src: "images/jobs/plant-1-a3057e7f3a2b0ea7d9f5701b834f14b6.png",
                    alt: "a plant",
                    "class": "plant-2",
                    "data-parallax": '{"startsAtScroll":1200,"stopsAtScroll":2400,"startValue":567,"endValue":617,"property":"left"}'
                }),
                v(s, D, c, "cdn-img", [], {
                    src: "images/jobs/plant-2-35f63da0a72c283340b50c4cc962ad6e.png",
                    alt: "a plant",
                    "class": "plant-3",
                    "data-parallax": '{"startsAtScroll":1200,"stopsAtScroll":2400,"startValue":622,"endValue":642,"property":"left"}'
                }),
                v(s, S, c, "cdn-img", [], {
                    src: "images/jobs/plant-3-24afcb62775273311da04ef068c235e9.png",
                    alt: "a plant",
                    "class": "plant-4",
                    "data-parallax": '{"startsAtScroll":1200,"stopsAtScroll":2400,"startValue":840,"endValue":847,"property":"left"}'
                }),
                v(s, _, c, "cdn-img", [], {
                    src: "images/jobs/plant-5-9598577d66a2585fa597e124e7c74f72.png",
                    alt: "a plant",
                    "class": "plant-5"
                }),
                m(s, I, c, "if", [p(s, c, "useEmployeeGifs")], {}, t, a),
                u(s, k, c, "bind-attr", [], {
                    "class": ":perks currentPerkClassName"
                }),
                u(s, k, c, "action", ["pausePerkAnimation"], {
                    on: "mouseEnter"
                }),
                u(s, E, c, "action", ["resumePerkAnimation"], {
                    on: "mouseLeave"
                }),
                u(s, R, c, "bind-attr", [], {
                    style: "perkSliderStyle"
                }),
                m(s, U, c, "each", [p(s, c, "perks")], {}, n, null ),
                m(s, V, c, "each", [p(s, c, "perks")], {}, r, null ),
                u(s, M, c, "action", ["nextPerk"], {}),
                u(s, y, c, "action", ["prevPerk"], {}),
                m(s, $, c, "each", [p(s, c, "engineeringJobs")], {}, i, null ),
                m(s, O, c, "each", [p(s, c, "nonEngineeringJobs")], {}, d, null ),
                g
            }
        }
    }())
}),
define("vine-ember/templates/loading-fullscreen", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "loading-fullscreen");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.inline;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var c = n.createMorphAt(n.childAt(d, [0]), 1, 1);
                return i(t, c, e, "cdn-img", [], {
                    src: "images/loading_black-7c085c338e536db4bfda65ee05c48f37.gif",
                    width: "50",
                    height: "50"
                }),
                d
            }
        }
    }())
}),
define("vine-ember/templates/loading", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "loading-fullscreen");
                var n = e.createTextNode("\n");
                return e.appendChild(a, n),
                e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom;
                n.detectNamespace(a);
                var r;
                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                r
            }
        }
    }())
}),
define("vine-ember/templates/login-form", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("Forgot your password?");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "message");
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("button");
                e.setAttribute(a, "class", "twitter-signin");
                var n = e.createTextNode("Sign in with Twitter");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("p")
                  , n = e.createTextNode("or");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("form");
                e.setAttribute(a, "id", "login");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createElement("br");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createElement("br");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "submit-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "forgot-password");
                var i = e.createComment("");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "type", "submit");
                var i = e.createTextNode("Sign In");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.content
                  , c = i.element
                  , s = i.get
                  , o = i.inline
                  , l = i.block;
                r.detectNamespace(n);
                var h;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (h = this.build(r),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = r.cloneNode(this.cachedFragment, !0))) : h = this.build(r);
                var u = r.childAt(h, [2])
                  , p = r.childAt(h, [6])
                  , m = r.createMorphAt(r.childAt(h, [0]), 0, 0)
                  , v = r.createMorphAt(p, 1, 1)
                  , g = r.createMorphAt(p, 4, 4)
                  , b = r.createMorphAt(r.childAt(p, [7, 1]), 0, 0);
                return d(a, m, t, "message.text"),
                c(a, u, t, "action", ["twitterSignin"], {}),
                c(a, p, t, "action", ["login"], {
                    on: "submit"
                }),
                o(a, v, t, "my-input", [], {
                    email: !0,
                    name: "email",
                    placeholder: "Email",
                    value: s(a, t, "identification"),
                    messageType: s(a, t, "message.type")
                }),
                o(a, g, t, "my-input", [], {
                    type: "password",
                    name: "password",
                    placeholder: "Password",
                    value: s(a, t, "password"),
                    messageType: s(a, t, "message.type")
                }),
                l(a, b, t, "link-to", ["forgot-password"], {}, e, null ),
                h
            }
        }
    }())
}),
define("vine-ember/templates/login", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "login-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "signup");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("b")
                  , i = e.createTextNode("Don't have an account?");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    Download the app to sign up!\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.inline
                  , d = r.content;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.childAt(c, [0])
                  , o = n.createMorphAt(s, 1, 1)
                  , l = n.createMorphAt(n.childAt(s, [3]), 3, 3);
                return i(t, o, e, "partial", ["login-form"], {}),
                d(t, l, e, "download-buttons"),
                c
            }
        }
    }())
}),
define("vine-ember/templates/modal/embed", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("On");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("Off");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "modal"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "content-modal embed-modal");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "embed-settings");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "embed-setting");
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("label")
                  , s = e.createTextNode("Type");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("button")
                  , s = e.createTextNode("Simple");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("button")
                  , s = e.createTextNode("Postcard");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "embed-setting");
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("label")
                  , s = e.createTextNode("Autoplay audio");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("div")
                  , s = e.createTextNode("\n            ");
                e.appendChild(c, s);
                var s = e.createComment("");
                e.appendChild(c, s);
                var s = e.createTextNode("\n            ");
                e.appendChild(c, s);
                var s = e.createElement("div");
                e.setAttribute(s, "class", "toggle"),
                e.appendChild(c, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "embed-setting");
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("label")
                  , s = e.createTextNode("Size");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("button")
                  , s = e.createTextNode("600px");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("button")
                  , s = e.createTextNode("480px");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("button")
                  , s = e.createTextNode("300px");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "embed-preview");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "footer");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h5")
                  , d = e.createTextNode("Embed code");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.get
                  , o = d.block
                  , l = d.content
                  , h = d.inline;
                i.detectNamespace(r);
                var u;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (u = this.build(i),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = i.cloneNode(this.cachedFragment, !0))) : u = this.build(i);
                var p = i.childAt(u, [2, 1])
                  , m = i.childAt(p, [1])
                  , v = i.childAt(m, [1])
                  , g = i.childAt(v, [1])
                  , b = i.childAt(g, [3])
                  , C = i.childAt(g, [5])
                  , f = i.childAt(v, [3, 3])
                  , F = i.childAt(v, [5])
                  , N = i.childAt(F, [3])
                  , T = i.childAt(F, [5])
                  , x = i.childAt(F, [7])
                  , A = i.createMorphAt(f, 1, 1)
                  , k = i.createUnsafeMorphAt(i.childAt(m, [3]), 1, 1)
                  , E = i.createMorphAt(i.childAt(p, [3]), 3, 3);
                return c(n, b, a, "bind-attr", [], {
                    "class": ":small isSimpleEmbed:active"
                }),
                c(n, b, a, "action", ["setEmbedType", "simple"], {}),
                c(n, C, a, "bind-attr", [], {
                    "class": ":small isPostcardEmbed:active"
                }),
                c(n, C, a, "action", ["setEmbedType", "postcard"], {}),
                c(n, f, a, "bind-attr", [], {
                    "class": ":switch audioEnabled:on:off"
                }),
                c(n, f, a, "action", ["toggleAudio"], {}),
                o(n, A, a, "if", [s(n, a, "audioEnabled")], {}, e, t),
                c(n, N, a, "bind-attr", [], {
                    "class": ":small isSize600:active"
                }),
                c(n, N, a, "action", ["setEmbedSize", 600], {}),
                c(n, T, a, "bind-attr", [], {
                    "class": ":small isSize480:active"
                }),
                c(n, T, a, "action", ["setEmbedSize", 480], {}),
                c(n, x, a, "bind-attr", [], {
                    "class": ":small isSize300:active"
                }),
                c(n, x, a, "action", ["setEmbedSize", 300], {}),
                l(n, k, a, "iframeHtml"),
                h(n, E, a, "textarea", [], {
                    value: s(n, a, "embedCode")
                }),
                u
            }
        }
    }())
}),
define("vine-ember/templates/modal/flash-error", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "container vertically-center");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "icon-vine_logo"),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "header");
                var i = e.createTextNode("Oops! Something went wrong!");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      For the best experience, you must install Flash.");
                e.appendChild(r, i);
                var i = e.createElement("br");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "http://get.adobe.com/flashplayer/"),
                e.setAttribute(i, "target", "_blank");
                var d = e.createElement("button")
                  , c = e.createTextNode("Install Flash");
                e.appendChild(d, c),
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom;
                n.detectNamespace(a);
                var r;
                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                r
            }
        }
    }())
}),
define("vine-ember/templates/modal/job", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "job-sharing");
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("div")
                      , r = e.createTextNode("Share this!");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("ul");
                    e.setAttribute(n, "class", "social-networks");
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r);
                    var r = e.createElement("li")
                      , i = e.createElement("a");
                    e.setAttribute(i, "target", "_blank"),
                    e.setAttribute(i, "title", "Share on Twitter"),
                    e.setAttribute(i, "class", "twitter"),
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r);
                    var r = e.createElement("li")
                      , i = e.createElement("a");
                    e.setAttribute(i, "target", "_blank"),
                    e.setAttribute(i, "title", "Share on Facebook"),
                    e.setAttribute(i, "class", "facebook"),
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r);
                    var r = e.createElement("li")
                      , i = e.createElement("a");
                    e.setAttribute(i, "target", "_blank"),
                    e.setAttribute(i, "title", "Share on LinkedIn"),
                    e.setAttribute(i, "class", "linked-in"),
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r);
                    var r = e.createElement("li")
                      , i = e.createElement("a");
                    e.setAttribute(i, "title", "Share via Email"),
                    e.setAttribute(i, "class", "email"),
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1, 3])
                      , s = n.childAt(c, [1, 0])
                      , o = n.childAt(c, [3, 0])
                      , l = n.childAt(c, [5, 0])
                      , h = n.childAt(c, [7, 0]);
                    return i(t, s, e, "bind-attr", [], {
                        href: "twitterShareUrl"
                    }),
                    i(t, o, e, "bind-attr", [], {
                        href: "facebookShareUrl"
                    }),
                    i(t, l, e, "bind-attr", [], {
                        href: "linkedInShareUrl"
                    }),
                    i(t, h, e, "bind-attr", [], {
                        href: "emailShareUrl"
                    }),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "name"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("li")
                      , n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 0, 0);
                    return c(a, o, t, "link-to", ["jobs.job", d(a, t, "id")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "modal"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "job-modal content-modal");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "header");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "close");
                var d = e.createTextNode("×");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "target", "_blank");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("button");
                e.setAttribute(d, "class", "apply-button small");
                var c = e.createTextNode("\n          Apply now\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("p")
                  , d = e.createComment("");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "target", "_blank");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("button");
                e.setAttribute(d, "class", "apply-button small");
                var c = e.createTextNode("\n          Apply now\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "footer");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h5")
                  , d = e.createTextNode("More openings at Vine");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("ul");
                e.setAttribute(i, "class", "position-list");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.content
                  , o = d.get
                  , l = d.block;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [2, 1])
                  , p = i.childAt(u, [1])
                  , m = i.childAt(p, [1])
                  , v = i.childAt(u, [3])
                  , g = i.childAt(v, [3])
                  , b = i.childAt(v, [7])
                  , C = i.createMorphAt(p, 3, 3)
                  , f = i.createMorphAt(v, 1, 1)
                  , F = i.createUnsafeMorphAt(i.childAt(v, [5]), 0, 0)
                  , N = i.createMorphAt(i.childAt(u, [5, 3]), 1, 1);
                return c(n, m, a, "action", ["hideModal"], {}),
                s(n, C, a, "job.name"),
                l(n, f, a, "unless", [o(n, a, "isMobile")], {}, e, null ),
                c(n, g, a, "bind-attr", [], {
                    href: o(n, a, "job.url")
                }),
                s(n, F, a, "job.ad"),
                c(n, b, a, "bind-attr", [], {
                    href: o(n, a, "job.url")
                }),
                l(n, N, a, "each", [o(n, a, "content")], {}, t, null ),
                h
            }
        }
    }())
}),
define("vine-ember/templates/modal/login", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      To ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode(", you must sign in.\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "attemptedAction"),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      Please sign into your Vine account.\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "container vertically-center");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "icon-vine_logo"),
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "signup");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("b")
                  , i = e.createTextNode("Don't have an account?");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    Download the app to sign up!\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block
                  , o = d.inline
                  , l = d.content;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0])
                  , p = i.childAt(u, [1])
                  , m = i.createMorphAt(p, 3, 3)
                  , v = i.createMorphAt(i.childAt(p, [5]), 1, 1)
                  , g = i.createMorphAt(i.childAt(u, [3]), 3, 3);
                return s(n, m, a, "if", [c(n, a, "attemptedAction")], {}, e, t),
                o(n, v, a, "render", ["login"], {}),
                l(n, g, a, "download-buttons"),
                h
            }
        }
    }())
}),
define("vine-ember/templates/modal/post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a)
                      , o = n.createMorphAt(c, 3, 3, a);
                    return d(t, s, e, "render", ["permalink-post", i(t, e, "currentPost")], {}),
                    d(t, o, e, "modal-post-context", [], {
                        postContext: i(t, e, "currentPost.context")
                    }),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-carrow"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-carrow_left"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block
                  , s = i.element;
                r.detectNamespace(n);
                var o;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                var l = r.childAt(o, [1])
                  , h = r.childAt(o, [3])
                  , u = r.createMorphAt(o, 0, 0, n);
                return r.insertBoundary(o, 0),
                c(a, u, t, "if", [d(a, t, "currentPost")], {}, e, null ),
                s(a, l, t, "bind-attr", [], {
                    "class": ":action :nav-action :right nextAvailable::disabled"
                }),
                s(a, l, t, "action", ["navRight"], {}),
                s(a, h, t, "bind-attr", [], {
                    "class": ":action :nav-action :left prevAvailable::disabled"
                }),
                s(a, h, t, "action", ["navLeft"], {}),
                o
            }
        }
    }())
}),
define("vine-ember/templates/modal/report", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("br");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return n.insertBoundary(d, null ),
                        i(t, c, e, "error.message"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "error");
                    var n = e.createTextNode("\n          Oops! Something went wrong.  Please try again.\n          ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                    return c(a, o, t, "if", [d(a, t, "error.message")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "confirmation");
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon-check_mark"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 3, 3);
                    return i(t, c, e, "confirmation"),
                    d
                }
            }
        }()
          , a = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "row");
                        var n = e.createTextNode("\n                  ");
                        e.appendChild(a, n);
                        var n = e.createElement("input");
                        e.setAttribute(n, "name", "reason"),
                        e.setAttribute(n, "type", "radio"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                  ");
                        e.appendChild(a, n);
                        var n = e.createElement("span")
                          , r = e.createComment("");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element
                          , c = r.content;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var o = n.childAt(s, [1])
                          , l = n.childAt(o, [1])
                          , h = n.createMorphAt(n.childAt(o, [3]), 0, 0);
                        return d(t, l, e, "bind-attr", [], {
                            value: i(t, e, "value")
                        }),
                        d(t, l, e, "action", ["selectReason", i(t, e, "value"), i(t, e, "confirmation")], {
                            preventDefault: !1
                        }),
                        c(t, h, e, "title"),
                        s
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createElement("p");
                        e.setAttribute(a, "class", "prompt");
                        var n = e.createTextNode("\n                  Where more specifically can the offense be found?\n                ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n                ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "row");
                        var n = e.createTextNode("\n                  ");
                        e.appendChild(a, n);
                        var n = e.createElement("input");
                        e.setAttribute(n, "name", "source"),
                        e.setAttribute(n, "type", "radio"),
                        e.setAttribute(n, "checked", ""),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                  ");
                        e.appendChild(a, n);
                        var n = e.createElement("span")
                          , r = e.createTextNode("On the Vine");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n                ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "row");
                        var n = e.createTextNode("\n                  ");
                        e.appendChild(a, n);
                        var n = e.createElement("input");
                        e.setAttribute(n, "name", "source"),
                        e.setAttribute(n, "type", "radio"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                  ");
                        e.appendChild(a, n);
                        var n = e.createElement("span")
                          , r = e.createTextNode("On the full length video");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n),
                        this.cachedFragment && n.repairClonedNode(n.childAt(d, [3, 1]), [], !0);
                        var c = n.childAt(d, [3, 1])
                          , s = n.childAt(d, [5, 1]);
                        return i(t, c, e, "action", ["selectSource", "vine"], {
                            preventDefault: !1
                        }),
                        i(t, s, e, "action", ["selectSource", "video"], {
                            preventDefault: !1
                        }),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("form");
                    e.setAttribute(a, "id", "report");
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "block");
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "row action selected");
                    var i = e.createTextNode("\n              ");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n              ");
                    e.appendChild(r, i);
                    var i = e.createElement("span")
                      , d = e.createTextNode("Block ");
                    e.appendChild(i, d);
                    var d = e.createComment("");
                    e.appendChild(i, d),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n            ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "report");
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "row action");
                    var i = e.createTextNode("\n              ");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n              ");
                    e.appendChild(r, i);
                    var i = e.createElement("span")
                      , d = e.createTextNode("File a report");
                    e.appendChild(i, d),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n            ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r);
                    var r = e.createElement("div")
                      , i = e.createTextNode("\n              ");
                    e.appendChild(r, i);
                    var i = e.createElement("p");
                    e.setAttribute(i, "class", "prompt");
                    var d = e.createComment("");
                    e.appendChild(i, d),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("            ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n          ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "submit");
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "small"),
                    e.setAttribute(r, "type", "submit");
                    var i = e.createTextNode("\n              ");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n            ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.element
                      , s = d.get
                      , o = d.inline
                      , l = d.content
                      , h = d.block;
                    i.detectNamespace(r);
                    var u;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (u = this.build(i),
                    this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                    this.cachedFragment && (u = i.cloneNode(this.cachedFragment, !0))) : u = this.build(i);
                    var p = i.childAt(u, [1])
                      , m = i.childAt(p, [1, 1])
                      , v = i.childAt(p, [3])
                      , g = i.childAt(v, [3])
                      , b = i.childAt(p, [5, 1])
                      , C = i.createMorphAt(m, 1, 1)
                      , f = i.createMorphAt(i.childAt(m, [3]), 1, 1)
                      , F = i.createMorphAt(i.childAt(v, [1]), 1, 1)
                      , N = i.createMorphAt(i.childAt(g, [1]), 0, 0)
                      , T = i.createMorphAt(g, 3, 3)
                      , x = i.createMorphAt(g, 4, 4)
                      , A = i.createMorphAt(b, 1, 1);
                    return c(n, p, a, "action", ["submitReport"], {
                        on: "submit"
                    }),
                    o(n, C, a, "input", [], {
                        type: "checkbox",
                        name: "block",
                        checked: s(n, a, "isBlock")
                    }),
                    o(n, f, a, "replace-emoji", [s(n, a, "username")], {}),
                    o(n, F, a, "input", [], {
                        type: "checkbox",
                        name: "report",
                        checked: s(n, a, "isReport")
                    }),
                    c(n, g, a, "bind-attr", [], {
                        "class": ":reasons isReport::hidden"
                    }),
                    l(n, N, a, "prompt"),
                    h(n, T, a, "each", [s(n, a, "choices")], {}, e, null ),
                    h(n, x, a, "if", [s(n, a, "isLongform")], {}, t, null ),
                    c(n, b, a, "bind-attr", [], {
                        disabled: s(n, a, "disableSubmit")
                    }),
                    l(n, A, a, "submitText"),
                    u
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "container vertically-center");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "icon-close_x"),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "header");
                var i = e.createTextNode("\n      Block user or report\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.element
                  , o = c.get
                  , l = c.block;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0, 1])
                  , p = d.childAt(u, [1])
                  , m = d.createMorphAt(d.childAt(u, [3]), 1, 1)
                  , v = d.createMorphAt(d.childAt(u, [5]), 1, 1);
                return s(r, p, n, "action", ["hideModal"], {}),
                l(r, m, n, "if", [o(r, n, "error")], {}, e, null ),
                l(r, v, n, "if", [o(r, n, "isConfirmation")], {}, t, a),
                h
            }
        }
    }())
}),
define("vine-ember/templates/modal/vm-user", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "checkbox selected");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("i");
                    e.setAttribute(n, "class", "icon-check_mark"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1]);
                    return d(t, s, e, "bind-attr", [], {
                        style: i(t, e, "backgroundColorStyle")
                    }),
                    c
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "checkbox");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("i");
                    e.setAttribute(n, "class", "icon-check_mark"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "row");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.element
                  , o = d.inline
                  , l = d.block;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0])
                  , p = i.createMorphAt(u, 1, 1)
                  , m = i.createMorphAt(u, 3, 3);
                return s(n, u, a, "action", ["addRecipient", c(n, a, "this")], {}),
                o(n, p, a, "user-info", [], {
                    data: c(n, a, "this"),
                    cssClass: "user-info-size-20",
                    delinkify: !0,
                    textColor: c(n, a, "textColor")
                }),
                l(n, m, a, "if", [c(n, a, "selected")], {}, e, t),
                h
            }
        }
    }())
}),
define("vine-ember/templates/modal/vm", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("div");
                    e.setAttribute(a, "class", "error");
                    var n = e.createTextNode("Oops! Something went wrong.  Please try again.");
                    e.appendChild(a, n);
                    var n = e.createElement("br");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    return e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [0]), 2, 2);
                    return i(t, c, e, "error"),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n          ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "post-thumbnail"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n          ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "description");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline
                      , c = r.element;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [3])
                      , l = n.createMorphAt(s, 1, 1, a)
                      , h = n.createMorphAt(n.childAt(s, [5]), 0, 0);
                    return d(t, l, e, "user-info", [], {
                        data: i(t, e, "this"),
                        cssClass: "user-info-size-20"
                    }),
                    c(t, o, e, "bind-attr", [], {
                        style: i(t, e, "backgroundImageStyle")
                    }),
                    d(t, h, e, "linkify-entities", [], {
                        text: i(t, e, "description"),
                        entities: i(t, e, "entities")
                    }),
                    s
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "confirmation");
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "icon-smiley"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "title");
                    var r = e.createTextNode("Message sent!");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , n = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("span");
                        e.setAttribute(a, "class", "recipient");
                        var n = e.createTextNode("\n                ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "class", "close");
                        var r = e.createTextNode("x");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n              ");
                        return e.appendChild(a, n),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element
                          , c = r.content;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var o = n.childAt(s, [0])
                          , l = n.childAt(o, [3])
                          , h = n.createMorphAt(o, 1, 1);
                        return d(t, o, e, "bind-attr", [], {
                            style: i(t, e, "backgroundColorStyle")
                        }),
                        c(t, h, e, "username"),
                        d(t, l, e, "action", ["removeRecipient", i(t, e, "this")], {}),
                        s
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("i");
                        e.setAttribute(a, "class", "close");
                        var n = e.createTextNode("x");
                        return e.appendChild(a, n),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [0]);
                        return i(t, c, e, "action", ["resetAutocomplete"], {}),
                        d
                    }
                }
            }()
              , a = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("                    ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "partial", ["modal/vm-user"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "category");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.content
                          , c = i.get
                          , s = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.createMorphAt(r.childAt(o, [1]), 0, 0)
                          , h = r.createMorphAt(o, 3, 3, n);
                        return r.insertBoundary(o, null ),
                        d(a, l, t, "category"),
                        s(a, h, t, "each", [c(a, t, "users")], {}, e, null ),
                        o
                    }
                }
            }()
              , n = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("                  ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "partial", ["modal/vm-user"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "each", [d(a, t, "autocompleteRecipients")], {}, e, null ),
                        s
                    }
                }
            }()
              , r = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "cdn-img", [], {
                            "class": "loading",
                            src: "images/loading_black-7c085c338e536db4bfda65ee05c48f37.gif",
                            width: "25",
                            height: "25"
                        }),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "recipients-label");
                    var n = e.createTextNode("To:");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n          ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "recipients");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n          ");
                    e.appendChild(t, a);
                    var a = e.createElement("form");
                    e.setAttribute(a, "id", "vm-compose");
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createElement("i");
                    e.setAttribute(n, "class", "icon-search"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n          ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "vm-recipients");
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "recipients-container");
                    var r = e.createTextNode("\n              ");
                    e.appendChild(n, r);
                    var r = e.createElement("div")
                      , i = e.createTextNode("\n");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("              ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n              ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n            ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n          ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "small");
                    var n = e.createTextNode("Share");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(i, d, c) {
                    var s = d.dom
                      , o = d.hooks
                      , l = o.get
                      , h = o.block
                      , u = o.inline
                      , p = o.element;
                    s.detectNamespace(c);
                    var m;
                    d.useFragmentCache && s.canClone ? (null === this.cachedFragment && (m = this.build(s),
                    this.hasRendered ? this.cachedFragment = m : this.hasRendered = !0),
                    this.cachedFragment && (m = s.cloneNode(this.cachedFragment, !0))) : m = this.build(s);
                    var v = s.childAt(m, [5])
                      , g = s.childAt(m, [7, 1])
                      , b = s.childAt(g, [1])
                      , C = s.childAt(m, [9])
                      , f = s.createMorphAt(s.childAt(m, [3]), 1, 1)
                      , F = s.createMorphAt(v, 3, 3)
                      , N = s.createMorphAt(v, 5, 5)
                      , T = s.createMorphAt(b, 1, 1)
                      , x = s.createMorphAt(g, 3, 3)
                      , A = s.createMorphAt(g, 5, 5);
                    return h(d, f, i, "each", [l(d, i, "recipients")], {}, e, null ),
                    u(d, F, i, "my-input", [], {
                        type: "input",
                        name: "recipient",
                        placeholder: "Who do you want to message?",
                        value: l(d, i, "recipient")
                    }),
                    h(d, N, i, "if", [l(d, i, "recipient")], {}, t, null ),
                    p(d, b, i, "bind-attr", [], {
                        "class": "recipient:hidden"
                    }),
                    h(d, T, i, "each", [l(d, i, "categorizedRecipients")], {}, a, null ),
                    h(d, x, i, "if", [l(d, i, "isAutocomplete")], {}, n, null ),
                    h(d, A, i, "if", [l(d, i, "paginating")], {}, r, null ),
                    p(d, C, i, "bind-attr", [], {
                        disabled: l(d, i, "sendDisabled")
                    }),
                    p(d, C, i, "action", ["vmShare"], {}),
                    m
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "modal"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "vm-modal");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "card");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "icon-close_x"),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "title");
                var d = e.createTextNode("\n        Share this post with a friend\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "post-preview");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "content");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(r, i, d) {
                var c = i.dom
                  , s = i.hooks
                  , o = s.element
                  , l = s.get
                  , h = s.block;
                c.detectNamespace(d);
                var u;
                i.useFragmentCache && c.canClone ? (null === this.cachedFragment && (u = this.build(c),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = c.cloneNode(this.cachedFragment, !0))) : u = this.build(c);
                var p = c.childAt(u, [2, 1, 1])
                  , m = c.childAt(p, [1])
                  , v = c.createMorphAt(c.childAt(p, [3]), 1, 1)
                  , g = c.createMorphAt(c.childAt(p, [5]), 1, 1)
                  , b = c.createMorphAt(c.childAt(p, [7]), 1, 1);
                return o(i, m, r, "action", ["hideModal"], {}),
                h(i, v, r, "if", [l(i, r, "error")], {}, e, null ),
                h(i, g, r, "with", [l(i, r, "post")], {}, t, null ),
                h(i, b, r, "if", [l(i, r, "confirmation")], {}, a, n),
                u
            }
        }
    }())
}),
define("vine-ember/templates/not-found", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("p");
                    e.setAttribute(a, "class", "reason");
                    var n = e.createComment("");
                    return e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [0]), 0, 0);
                    return i(t, c, e, "message"),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("button")
                      , n = e.createTextNode("Do it for the ");
                    e.appendChild(a, n);
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "icon-vine_logo"),
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("p")
                  , n = e.createTextNode("Oops!  Couldn't find it.");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("p")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.inline
                  , s = d.get
                  , o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.createMorphAt(l, 0, 0, r)
                  , u = i.createMorphAt(l, 4, 4, r)
                  , p = i.createMorphAt(i.childAt(l, [6]), 1, 1);
                return i.insertBoundary(l, 0),
                c(n, h, a, "cdn-img", [], {
                    src: "images/frowny.svg",
                    width: "200"
                }),
                o(n, u, a, "if", [s(n, a, "message")], {}, e, null ),
                o(n, p, a, "link-to", ["index"], {}, t, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/pagination", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "cdn-img", [], {
                            src: "images/loading_black-7c085c338e536db4bfda65ee05c48f37.gif",
                            width: "50",
                            height: "50",
                            "class": "loading"
                        }),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button")
                          , n = e.createTextNode("\n        Load more\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1]);
                        return d(t, s, e, "bind-attr", [], {
                            "class": ":pagination paginationLoading",
                            disabled: i(t, e, "paginationLoading")
                        }),
                        d(t, s, e, "action", ["nextPage"], {}),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "pagination-container");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                    return s(n, l, a, "if", [c(n, a, "paginationLoading")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "if", [d(a, t, "pagination.nextPage")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/permalink-mobile", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.inline;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var c = n.createMorphAt(d, 0, 0, a);
                return n.insertBoundary(d, 0),
                i(t, c, e, "view", ["post-mobile"], {}),
                d
            }
        }
    }())
}),
define("vine-ember/templates/permalink-post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["deleted-post"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "partial", ["explicit-content"], {}),
                        d
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "vine-player mobile");
                            var n = e.createTextNode("\n                ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "vine-video-container");
                            var r = e.createTextNode("\n                  ");
                            e.appendChild(n, r);
                            var r = e.createElement("video");
                            e.setAttribute(r, "preload", "auto");
                            var i = e.createTextNode("\n                    ");
                            e.appendChild(r, i);
                            var i = e.createElement("source");
                            e.setAttribute(i, "type", "video/mp4"),
                            e.appendChild(r, i);
                            var i = e.createTextNode("\n                  ");
                            e.appendChild(r, i),
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n                ");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n\n              ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n              ");
                            e.appendChild(t, a);
                            var a = e.createElement("img");
                            e.setAttribute(a, "class", "thumbnail"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n              ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "play"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.element
                              , d = r.get;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.childAt(c, [1])
                              , o = n.childAt(s, [1, 1, 1])
                              , l = n.childAt(c, [3])
                              , h = n.childAt(c, [5]);
                            return i(t, s, e, "action", ["pause"], {
                                target: "view"
                            }),
                            i(t, o, e, "bind-attr", [], {
                                src: d(t, e, "secureVideoUrl")
                            }),
                            i(t, l, e, "bind-attr", [], {
                                src: d(t, e, "secureThumbnailUrl")
                            }),
                            i(t, h, e, "action", ["play"], {
                                target: "view"
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "if", [d(a, t, "isMobile")], {}, e, null ),
                        s
                    }
                }
            }()
              , a = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 0, 0, a);
                        return n.insertBoundary(c, null ),
                        n.insertBoundary(c, 0),
                        d(t, s, e, "follow-button", [], {
                            user: i(t, e, "this")
                        }),
                        c
                    }
                }
            }()
              , n = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "linkify-entities", [], {
                            text: i(t, e, "description"),
                            entities: i(t, e, "entities")
                        }),
                        c
                    }
                }
            }()
              , r = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div")
                          , n = e.createTextNode("\n                    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                  ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element
                          , d = r.get
                          , c = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var o = n.childAt(s, [1])
                          , l = n.createMorphAt(o, 1, 1)
                          , h = n.createMorphAt(o, 2, 2);
                        return i(t, o, e, "bind-attr", [], {
                            "class": ":attribution showAttribution:attribution-visible"
                        }),
                        i(t, o, e, "action", ["hideAttribution"], {
                            on: "mouseLeave"
                        }),
                        c(t, l, e, "attribution-icon", [], {
                            active: d(t, e, "showAttribution"),
                            link: d(t, e, "attributionRoute")
                        }),
                        c(t, h, e, "partial", ["audio-attribution"], {}),
                        s
                    }
                }
            }()
              , i = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "animated-button", [], {
                            actionName: "revine",
                            iconName: "revine_stroked",
                            isActive: i(t, e, "myRepostId"),
                            action: "revine"
                        }),
                        c
                    }
                }
            }()
              , d = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }),
                        c
                    }
                }
            }()
              , c = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createElement("span")
                          , n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(n.childAt(c, [1]), 0, 0);
                        return d(t, s, e, "format-count", [i(t, e, "likes.count")], {
                            singleText: "Like",
                            pluralText: "Likes"
                        }),
                        c
                    }
                }
            }()
              , s = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createElement("span")
                          , n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(n.childAt(c, [1]), 0, 0);
                        return d(t, s, e, "format-count", [i(t, e, "reposts.count")], {
                            singleText: "Revine",
                            pluralText: "Revines"
                        }),
                        c
                    }
                }
            }()
              , o = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createElement("span")
                          , n = e.createElement("a")
                          , r = e.createComment("");
                        e.appendChild(n, r),
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element
                          , d = r.get
                          , c = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var o = n.childAt(s, [1, 0])
                          , l = n.createMorphAt(o, 0, 0);
                        return i(t, o, e, "action", ["toggleComments"], {
                            target: "view"
                        }),
                        c(t, l, e, "format-count", [d(t, e, "comments.count")], {
                            singleText: "Comment",
                            pluralText: "Comments"
                        }),
                        s
                    }
                }
            }()
              , l = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(" ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline
                          , d = r.get;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a)
                          , o = n.createMorphAt(c, 3, 3, a);
                        return i(t, s, e, "render", ["related-videos/playing-vine"], {}),
                        i(t, o, e, "related-videos", [], {
                            posts: d(t, e, "relatedPosts"),
                            shortId: d(t, e, "shortId"),
                            player: d(t, e, "relatedVideosPlayer"),
                            visible: d(t, e, "relatedVideosVisible")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "share-sidebar");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "permalink-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "permalink-content-wrapper");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "card");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("div");
                    e.setAttribute(i, "class", "video-container main");
                    var d = e.createTextNode("\n          ");
                    e.appendChild(i, d);
                    var d = e.createElement("div");
                    e.setAttribute(d, "class", "loading-bar"),
                    e.appendChild(i, d);
                    var d = e.createTextNode("\n          ");
                    e.appendChild(i, d);
                    var d = e.createComment("");
                    e.appendChild(i, d);
                    var d = e.createTextNode("\n");
                    e.appendChild(i, d);
                    var d = e.createComment("");
                    e.appendChild(i, d);
                    var d = e.createTextNode("        ");
                    e.appendChild(i, d),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("div");
                    e.setAttribute(i, "class", "card-content");
                    var d = e.createTextNode("\n          ");
                    e.appendChild(i, d);
                    var d = e.createElement("div");
                    e.setAttribute(d, "class", "info-row");
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createComment("");
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createComment("");
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createComment("");
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n          ");
                    e.appendChild(d, c),
                    e.appendChild(i, d);
                    var d = e.createTextNode("\n\n          ");
                    e.appendChild(i, d);
                    var d = e.createElement("div");
                    e.setAttribute(d, "class", "info-row");
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createElement("div")
                      , s = e.createTextNode("\n              ");
                    e.appendChild(c, s);
                    var s = e.createElement("div");
                    e.setAttribute(s, "class", "post-description");
                    var o = e.createTextNode("\n");
                    e.appendChild(s, o);
                    var o = e.createComment("");
                    e.appendChild(s, o);
                    var o = e.createComment("");
                    e.appendChild(s, o);
                    var o = e.createTextNode("              ");
                    e.appendChild(s, o),
                    e.appendChild(c, s);
                    var s = e.createTextNode("\n            ");
                    e.appendChild(c, s),
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n          ");
                    e.appendChild(d, c),
                    e.appendChild(i, d);
                    var d = e.createTextNode("\n\n          ");
                    e.appendChild(i, d);
                    var d = e.createElement("div");
                    e.setAttribute(d, "class", "info-row");
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createElement("div");
                    e.setAttribute(c, "class", "post-engagement");
                    var s = e.createTextNode("\n              ");
                    e.appendChild(c, s);
                    var s = e.createElement("div");
                    e.setAttribute(s, "class", "post-actions");
                    var o = e.createTextNode("\n                ");
                    e.appendChild(s, o);
                    var o = e.createComment("");
                    e.appendChild(s, o);
                    var o = e.createTextNode("\n");
                    e.appendChild(s, o);
                    var o = e.createComment("");
                    e.appendChild(s, o);
                    var o = e.createTextNode("              ");
                    e.appendChild(s, o),
                    e.appendChild(c, s);
                    var s = e.createTextNode("\n");
                    e.appendChild(c, s);
                    var s = e.createComment("");
                    e.appendChild(c, s);
                    var s = e.createTextNode("            ");
                    e.appendChild(c, s),
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createElement("hr");
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createElement("div")
                      , s = e.createTextNode("\n");
                    e.appendChild(c, s);
                    var s = e.createComment("");
                    e.appendChild(c, s);
                    var s = e.createComment("");
                    e.appendChild(c, s);
                    var s = e.createComment("");
                    e.appendChild(c, s);
                    var s = e.createTextNode("            ");
                    e.appendChild(c, s),
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createElement("ul");
                    e.setAttribute(c, "class", "comments-container");
                    var s = e.createTextNode("\n              ");
                    e.appendChild(c, s);
                    var s = e.createComment("");
                    e.appendChild(c, s);
                    var s = e.createTextNode("\n            ");
                    e.appendChild(c, s),
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n            ");
                    e.appendChild(d, c);
                    var c = e.createComment("");
                    e.appendChild(d, c);
                    var c = e.createTextNode("\n          ");
                    e.appendChild(d, c),
                    e.appendChild(i, d);
                    var d = e.createTextNode("\n        ");
                    e.appendChild(i, d),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("div");
                    e.setAttribute(i, "class", "clearfix"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(h, u, p) {
                    var m = u.dom
                      , v = u.hooks
                      , g = v.get
                      , b = v.inline
                      , C = v.element
                      , f = v.block;
                    m.detectNamespace(p);
                    var F;
                    u.useFragmentCache && m.canClone ? (null === this.cachedFragment && (F = this.build(m),
                    this.hasRendered ? this.cachedFragment = F : this.hasRendered = !0),
                    this.cachedFragment && (F = m.cloneNode(this.cachedFragment, !0))) : F = this.build(m);
                    var N = m.childAt(F, [3, 1])
                      , T = m.childAt(N, [1])
                      , x = m.childAt(T, [1])
                      , A = m.childAt(T, [3])
                      , k = m.childAt(A, [1])
                      , E = m.childAt(A, [3, 1])
                      , R = m.childAt(E, [1])
                      , M = m.childAt(A, [5])
                      , y = m.childAt(M, [1])
                      , w = m.childAt(y, [1])
                      , B = m.childAt(M, [5])
                      , P = m.createMorphAt(m.childAt(F, [1]), 1, 1)
                      , L = m.createMorphAt(x, 3, 3)
                      , H = m.createMorphAt(x, 5, 5)
                      , D = m.createMorphAt(k, 1, 1)
                      , S = m.createMorphAt(k, 3, 3)
                      , _ = m.createMorphAt(k, 5, 5)
                      , I = m.createMorphAt(R, 1, 1)
                      , U = m.createMorphAt(R, 2, 2)
                      , V = m.createMorphAt(w, 1, 1)
                      , $ = m.createMorphAt(w, 3, 3)
                      , O = m.createMorphAt(y, 3, 3)
                      , q = m.createMorphAt(B, 1, 1)
                      , j = m.createMorphAt(B, 2, 2)
                      , z = m.createMorphAt(B, 3, 3)
                      , W = m.createMorphAt(m.childAt(M, [7]), 1, 1)
                      , G = m.createMorphAt(M, 9, 9)
                      , J = m.createMorphAt(N, 3, 3);
                    return b(u, P, h, "share-post", [], {
                        post: g(u, h, "this"),
                        featureSet: "permalink",
                        onShare: g(u, h, "onShare"),
                        visible: !0,
                        location: "PermalinkPost",
                        isMobile: !1
                    }),
                    C(u, x, h, "bind-attr", [], {
                        style: g(u, h, "backgroundImageStyle")
                    }),
                    C(u, x, h, "action", ["play"], {
                        target: "view"
                    }),
                    b(u, L, h, "watch-more", [], {
                        post: g(u, h, "this"),
                        action: "launchLongformViewer",
                        fireOnInit: g(u, h, "video")
                    }),
                    f(u, H, h, "if", [g(u, h, "explicitContent")], {}, e, t),
                    b(u, D, h, "user-info", [], {
                        data: g(u, h, "this"),
                        cssClass: "user-info-size-38 user-info-stacked user-info-show-verification"
                    }),
                    f(u, S, h, "unless", [g(u, h, "isInitiallyFollowing")], {}, a, null ),
                    b(u, _, h, "view", ["post-actions-menu"], {}),
                    C(u, E, h, "bind-attr", [], {
                        "class": ":post-info-container"
                    }),
                    f(u, I, h, "if", [g(u, h, "description")], {}, n, null ),
                    f(u, U, h, "if", [g(u, h, "hasAudioAttribution")], {}, r, null ),
                    b(u, V, h, "animated-button", [], {
                        actionName: "like",
                        iconName: "heart_icn",
                        isActive: g(u, h, "liked"),
                        action: "like"
                    }),
                    f(u, $, h, "unless", [g(u, h, "isCurrentUser")], {}, i, null ),
                    f(u, O, h, "if", [g(u, h, "loops")], {}, d, null ),
                    C(u, B, h, "bind-attr", [], {
                        "class": ":post-social-metrics commentsExpanded"
                    }),
                    f(u, q, h, "if", [g(u, h, "likes.count")], {}, c, null ),
                    f(u, j, h, "if", [g(u, h, "reposts.count")], {}, s, null ),
                    f(u, z, h, "if", [g(u, h, "comments.count")], {}, o, null ),
                    b(u, W, h, "paginated-comments", [], {
                        comments: g(u, h, "paginatedComments"),
                        isVisible: g(u, h, "commentsExpanded")
                    }),
                    b(u, G, h, "comment-form", [], {
                        value: g(u, h, "commentText"),
                        target: "view",
                        action: "submitComment"
                    }),
                    f(u, J, h, "unless", [g(u, h, "isModal")], {}, l, null ),
                    F
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isDestroyed")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/playing-vine", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("video");
                e.setAttribute(n, "preload", "auto");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("source");
                e.setAttribute(r, "src", ""),
                e.setAttribute(r, "type", "video/mp4"),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("a");
                e.setAttribute(a, "href", "#"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.element;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var c = n.childAt(d, [0])
                  , s = n.childAt(d, [2]);
                return i(t, c, e, "action", ["togglePlay"], {}),
                i(t, c, e, "bind-attr", [], {
                    "class": ":vine-video-container isMobile:hidden"
                }),
                i(t, s, e, "bind-attr", [], {
                    "class": ":vine-audio displayAudio::hidden audioClass"
                }),
                i(t, s, e, "action", ["toggleMute"], {}),
                d
            }
        }
    }())
}),
define("vine-ember/templates/playlists/grid-list", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    var e = function() {
                        var e = function() {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createComment("");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(e, t, a) {
                                    var n = t.dom
                                      , r = t.hooks
                                      , i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var c = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null ),
                                    n.insertBoundary(d, 0),
                                    i(t, c, e, "truncatedTitle"),
                                    d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("            ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(t, a, n) {
                                var r = a.dom
                                  , i = a.hooks
                                  , d = i.get
                                  , c = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var o = r.createMorphAt(s, 1, 1, n);
                                return c(a, o, t, "link-to", ["trend", d(a, t, "vanityUrl")], {}, e, null ),
                                s
                            }
                        }
                    }()
                      , t = function() {
                        var e = function() {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createComment("");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(e, t, a) {
                                    var n = t.dom
                                      , r = t.hooks
                                      , i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var c = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null ),
                                    n.insertBoundary(d, 0),
                                    i(t, c, e, "truncatedTitle"),
                                    d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("            ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(t, a, n) {
                                var r = a.dom
                                  , i = a.hooks
                                  , d = i.get
                                  , c = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var o = r.createMorphAt(s, 1, 1, n);
                                return c(a, o, t, "link-to", ["list", d(a, t, "vanityUrl")], {}, e, null ),
                                s
                            }
                        }
                    }()
                      , a = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "list-description");
                                var n = e.createComment("");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                return i(t, c, e, "truncatedDescription"),
                                d
                            }
                        }
                    }()
                      , n = function() {
                        var e = function() {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createTextNode("            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("div");
                                    e.setAttribute(a, "class", "author");
                                    var n = e.createTextNode("\n              by ");
                                    e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode("\n            ");
                                    e.appendChild(a, n),
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(e, t, a) {
                                    var n = t.dom
                                      , r = t.hooks
                                      , i = r.get
                                      , d = r.inline;
                                    n.detectNamespace(a);
                                    var c;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                    var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                                    return d(t, s, e, "user-info", [], {
                                        data: i(t, e, "createdByUser"),
                                        cssClass: "user-info-inline"
                                    }),
                                    c
                                }
                            }
                        }()
                          , t = function() {
                            var e = function() {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null ,
                                    hasRendered: !1,
                                    build: function(e) {
                                        var t = e.createDocumentFragment()
                                          , a = e.createTextNode("              ");
                                        e.appendChild(t, a);
                                        var a = e.createElement("div");
                                        e.setAttribute(a, "class", "list-description");
                                        var n = e.createComment("");
                                        e.appendChild(a, n),
                                        e.appendChild(t, a);
                                        var a = e.createTextNode("\n");
                                        return e.appendChild(t, a),
                                        t
                                    },
                                    render: function(e, t, a) {
                                        var n = t.dom
                                          , r = t.hooks
                                          , i = r.content;
                                        n.detectNamespace(a);
                                        var d;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                        var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                        return i(t, c, e, "truncatedDescription"),
                                        d
                                    }
                                }
                            }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createComment("");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(t, a, n) {
                                    var r = a.dom
                                      , i = a.hooks
                                      , d = i.get
                                      , c = i.block;
                                    r.detectNamespace(n);
                                    var s;
                                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                    var o = r.createMorphAt(s, 0, 0, n);
                                    return r.insertBoundary(s, null ),
                                    r.insertBoundary(s, 0),
                                    c(a, o, t, "if", [d(a, t, "description")], {}, e, null ),
                                    s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(a, n, r) {
                                var i = n.dom
                                  , d = n.hooks
                                  , c = d.get
                                  , s = d.block;
                                i.detectNamespace(r);
                                var o;
                                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                                var l = i.createMorphAt(o, 0, 0, r);
                                return i.insertBoundary(o, null ),
                                i.insertBoundary(o, 0),
                                s(n, l, a, "if", [c(n, a, "createdByUser")], {}, e, t),
                                o
                            }
                        }
                    }()
                      , r = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var s = n.createMorphAt(c, 1, 1, a);
                                return d(t, s, e, "loop-count", [], {
                                    postId: i(t, e, "timelineIdStr"),
                                    loops: i(t, e, "loops"),
                                    postDate: i(t, e, "created")
                                }),
                                c
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "info");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "list-title");
                            var r = e.createTextNode("\n");
                            e.appendChild(n, r);
                            var r = e.createComment("");
                            e.appendChild(n, r);
                            var r = e.createTextNode("        ");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "published");
                            var r = e.createComment("");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(i, d, c) {
                            var s = d.dom
                              , o = d.hooks
                              , l = o.get
                              , h = o.block
                              , u = o.inline;
                            s.detectNamespace(c);
                            var p;
                            d.useFragmentCache && s.canClone ? (null === this.cachedFragment && (p = this.build(s),
                            this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0),
                            this.cachedFragment && (p = s.cloneNode(this.cachedFragment, !0))) : p = this.build(s);
                            var m = s.childAt(p, [1])
                              , v = s.createMorphAt(s.childAt(m, [1]), 1, 1)
                              , g = s.createMorphAt(m, 3, 3)
                              , b = s.createMorphAt(m, 5, 5)
                              , C = s.createMorphAt(s.childAt(m, [7]), 0, 0);
                            return h(d, v, i, "if", [l(d, i, "isTrend")], {}, e, t),
                            h(d, g, i, "if", [l(d, i, "isTrend")], {}, a, n),
                            h(d, b, i, "if", [l(d, i, "loops")], {}, r, null ),
                            u(d, C, i, "format-date", [l(d, i, "published")], {
                                format: "M/D/YY"
                            }),
                            p
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "with", [d(a, t, "list")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "mouseover-video", [], {
                        post: d(a, t, "currentPost")
                    }, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "if", [d(a, t, "currentPost")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/playlists/index", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-placeholder");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                    return i(t, c, e, "partial", ["timelines/placeholders/empty"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["grid-list-mobile"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "each", [], {}, e, null ),
                        c
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "render", ["playlists/grid-list", i(t, e, "timeline.posts")], {}),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "each", [], {}, e, null ),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "grid-container clearfix");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                    return s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                    o
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "fullscreen");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("h3")
                      , r = e.createTextNode("TV Mode");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon-tv"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["openFullscreen"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.element
                  , o = c.get
                  , l = c.block
                  , h = c.inline;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0])
                  , m = d.createMorphAt(p, 1, 1)
                  , v = d.createMorphAt(p, 3, 3)
                  , g = d.createMorphAt(u, 2, 2, i);
                return d.insertBoundary(u, null ),
                s(r, p, n, "bind-attr", [], {
                    "class": ":posts-container :grid pagination.nextPage::no-pagination"
                }),
                l(r, m, n, "if", [o(r, n, "isEmpty")], {}, e, t),
                h(r, v, n, "partial", ["pagination"], {}),
                l(r, g, n, "if", [o(r, n, "fullscreenAvailable")], {}, a, null ),
                u
            }
        }
    }())
}),
define("vine-ember/templates/playlists", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-placeholder");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                    return i(t, c, e, "partial", ["timelines/placeholders/empty"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    var e = function() {
                        var e = function() {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createComment("");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(e, t, a) {
                                    var n = t.dom
                                      , r = t.hooks
                                      , i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var c = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null ),
                                    n.insertBoundary(d, 0),
                                    i(t, c, e, "view", ["playlists/grid-list"], {}),
                                    d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("              ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(t, a, n) {
                                var r = a.dom
                                  , i = a.hooks
                                  , d = i.get
                                  , c = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var o = r.createMorphAt(s, 1, 1, n);
                                return c(a, o, t, "link-to", ["trend", d(a, t, "list.vanityUrl")], {}, e, null ),
                                s
                            }
                        }
                    }()
                      , t = function() {
                        var e = function() {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null ,
                                hasRendered: !1,
                                build: function(e) {
                                    var t = e.createDocumentFragment()
                                      , a = e.createComment("");
                                    return e.appendChild(t, a),
                                    t
                                },
                                render: function(e, t, a) {
                                    var n = t.dom
                                      , r = t.hooks
                                      , i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var c = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null ),
                                    n.insertBoundary(d, 0),
                                    i(t, c, e, "view", ["playlists/grid-list"], {}),
                                    d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("              ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(t, a, n) {
                                var r = a.dom
                                  , i = a.hooks
                                  , d = i.get
                                  , c = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var o = r.createMorphAt(s, 1, 1, n);
                                return c(a, o, t, "link-to", ["list", d(a, t, "list.vanityUrl")], {}, e, null ),
                                s
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(a, n, r) {
                            var i = n.dom
                              , d = n.hooks
                              , c = d.get
                              , s = d.block;
                            i.detectNamespace(r);
                            var o;
                            n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                            this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                            this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                            var l = i.createMorphAt(o, 0, 0, r);
                            return i.insertBoundary(o, null ),
                            i.insertBoundary(o, 0),
                            s(n, l, a, "if", [c(n, a, "list.isTrend")], {}, e, t),
                            o
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["playlists/grid-list"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null ),
                        i.insertBoundary(o, 0),
                        s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                        o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "grid-container clearfix");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                    return d(a, s, t, "each", [], {}, e, null ),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.inline
                  , s = d.element
                  , o = d.get
                  , l = d.block;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [4])
                  , p = i.childAt(u, [3])
                  , m = i.createMorphAt(h, 0, 0, r)
                  , v = i.createMorphAt(h, 2, 2, r)
                  , g = i.createMorphAt(u, 1, 1)
                  , b = i.createMorphAt(p, 1, 1)
                  , C = i.createMorphAt(p, 3, 3)
                  , f = i.createMorphAt(u, 5, 5)
                  , F = i.createMorphAt(u, 7, 7);
                return i.insertBoundary(h, 0),
                c(n, m, a, "outlet", ["customStyles"], {}),
                c(n, v, a, "outlet", ["timelineHeader"], {}),
                s(n, u, a, "bind-attr", [], {
                    "class": ":timeline-content hasToggles"
                }),
                c(n, g, a, "outlet", ["timelineToggles"], {}),
                s(n, p, a, "bind-attr", [], {
                    "class": ":posts-container :grid pagination.nextPage::no-pagination"
                }),
                l(n, b, a, "if", [o(n, a, "isEmpty")], {}, e, t),
                c(n, C, a, "partial", ["pagination"], {}),
                c(n, f, a, "outlet", ["timelineFooter"], {}),
                c(n, F, a, "partial", ["footer"], {}),
                h
            }
        }
    }())
}),
define("vine-ember/templates/post-actions-menu", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("View post page");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("li");
                    e.setAttribute(a, "class", "permalink");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 0, 0);
                    return c(a, o, t, "link-to", ["permalink-post", d(a, t, "shortId")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("Embed");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("li")
                      , n = e.createElement("a")
                      , r = e.createTextNode("Unfollow");
                    return e.appendChild(n, r),
                    e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [0, 0]);
                    return i(t, c, e, "action", ["unfollowUser"], {}),
                    d
                }
            }
        }()
          , n = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("li");
                    e.setAttribute(a, "class", "report");
                    var n = e.createElement("a")
                      , r = e.createTextNode("Block user or report");
                    return e.appendChild(n, r),
                    e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [0, 0]);
                    return i(t, c, e, "action", ["showReportModal"], {}),
                    d
                }
            }
        }()
          , r = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("li")
                      , n = e.createElement("a")
                      , r = e.createTextNode("Delete");
                    return e.appendChild(n, r),
                    e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [0, 0]);
                    return i(t, c, e, "action", ["deletePost"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "icon");
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-dots_v"),
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("ul")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("li");
                e.setAttribute(n, "class", "embed");
                var r = e.createComment("");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(i, d, c) {
                var s = d.dom
                  , o = d.hooks
                  , l = o.element
                  , h = o.get
                  , u = o.block;
                s.detectNamespace(c);
                var p;
                d.useFragmentCache && s.canClone ? (null === this.cachedFragment && (p = this.build(s),
                this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0),
                this.cachedFragment && (p = s.cloneNode(this.cachedFragment, !0))) : p = this.build(s);
                var m = s.childAt(p, [2])
                  , v = s.createMorphAt(m, 1, 1)
                  , g = s.createMorphAt(s.childAt(m, [3]), 0, 0)
                  , b = s.createMorphAt(m, 5, 5)
                  , C = s.createMorphAt(m, 7, 7)
                  , f = s.createMorphAt(m, 9, 9);
                return l(d, m, i, "bind-attr", [], {
                    "class": ":menu shortId::private-menu"
                }),
                u(d, v, i, "if", [h(d, i, "view.shouldShowPostLink")], {}, e, null ),
                u(d, g, i, "link-to", ["permalink-post.embed", h(d, i, "shortId")], {}, t, null ),
                u(d, b, i, "if", [h(d, i, "following")], {}, a, null ),
                u(d, C, i, "unless", [h(d, i, "isCurrentUser")], {}, n, null ),
                u(d, f, i, "if", [h(d, i, "isCurrentUser")], {}, r, null ),
                p
            }
        }
    }())
}),
define("vine-ember/templates/post-byline", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(" revined\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "replace-emoji", [i(t, e, "repost.username")], {}),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "post-byline");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "icon-revined"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "byline-text");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1, 3]), 1, 1);
                    return c(a, o, t, "link-user", [], {
                        user: d(a, t, "repost")
                    }, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-byline");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "byline-text");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1])
                          , o = n.createMorphAt(s, 1, 1)
                          , l = n.createMorphAt(n.childAt(s, [3]), 1, 1);
                        return d(t, o, e, "secure-img", [], {
                            "class": "byline-icon",
                            src: i(t, e, "iconUrl")
                        }),
                        d(t, l, e, "linkify-entities", [], {
                            text: i(t, e, "body"),
                            entities: i(t, e, "entities")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "with", [d(a, t, "byline")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "repost")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/post-mobile", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["deleted-post"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }),
                        c
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "partial", ["explicit-content"], {}),
                        d
                    }
                }
            }()
              , a = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "mobile-interstitial", [], {
                                isLongform: i(t, e, "longform"),
                                postId: i(t, e, "postIdStr")
                            }),
                            c
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createElement("img");
                            e.setAttribute(a, "class", "thumbnail"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n          ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "play"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.element;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.childAt(c, [1])
                              , o = n.childAt(c, [3]);
                            return d(t, s, e, "bind-attr", [], {
                                src: i(t, e, "secureThumbnailUrl")
                            }),
                            d(t, o, e, "action", ["play"], {
                                target: "view"
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div")
                          , n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "vine-video-container");
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("video");
                        e.setAttribute(r, "preload", "auto");
                        var i = e.createTextNode("\n              ");
                        e.appendChild(r, i);
                        var i = e.createElement("source");
                        e.setAttribute(i, "type", "video/mp4"),
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n            ");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.element
                          , s = d.get
                          , o = d.block;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.childAt(l, [1])
                          , u = i.childAt(h, [1, 1])
                          , p = i.childAt(u, [1])
                          , m = i.createMorphAt(l, 3, 3, r);
                        return i.insertBoundary(l, null ),
                        c(n, h, a, "bind-attr", [], {
                            "class": ":vine-player hasModal:hidden shouldShowMobileInterstitial:hidden"
                        }),
                        c(n, h, a, "action", ["pause"], {
                            target: "view"
                        }),
                        c(n, u, a, "bind-attr", [], {
                            controls: s(n, a, "isIos")
                        }),
                        c(n, p, a, "bind-attr", [], {
                            src: s(n, a, "secureVideoUrl")
                        }),
                        o(n, m, a, "if", [s(n, a, "shouldShowMobileInterstitial")], {}, e, t),
                        l
                    }
                }
            }()
              , n = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div")
                          , n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1])
                          , o = n.createMorphAt(s, 1, 1);
                        return i(t, s, e, "bind-attr", [], {
                            "class": ":attribution-overlay showAttribution:visible"
                        }),
                        i(t, s, e, "action", ["goToAttributionRoute"], {
                            bubbles: !1
                        }),
                        d(t, o, e, "partial", ["audio-attribution"], {}),
                        c
                    }
                }
            }()
              , r = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 0, 0, a);
                            return n.insertBoundary(c, null ),
                            n.insertBoundary(c, 0),
                            d(t, s, e, "attribution-icon", [], {
                                active: i(t, e, "showAttribution"),
                                isMobile: !0
                            }),
                            c
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "linkify-entities", [], {
                                text: i(t, e, "description"),
                                entities: i(t, e, "entities")
                            }),
                            c
                        }
                    }
                }()
                  , a = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createElement("span")
                                  , n = e.createTextNode("People also watched");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createElement("span");
                                return e.setAttribute(a, "class", "icon-carrow"),
                                e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                                r
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "similar-vines");
                            var n = e.createTextNode("\n              ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n            ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.element
                              , c = i.get
                              , s = i.block;
                            r.detectNamespace(n);
                            var o;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                            this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                            this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                            var l = r.childAt(o, [1])
                              , h = r.createMorphAt(l, 1, 1);
                            return d(a, l, t, "action", ["trackSimilarVinesEvent", "click"], {}),
                            s(a, h, t, "link-to", ["post-similar", c(a, t, "shortId")], {}, e, null ),
                            o
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-description");
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("        ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n        ");
                        e.appendChild(t, a);
                        var a = e.createElement("hr");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(n, r, i) {
                        var d = r.dom
                          , c = r.hooks
                          , s = c.get
                          , o = c.block;
                        d.detectNamespace(i);
                        var l;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                        var h = d.childAt(l, [1])
                          , u = d.createMorphAt(h, 1, 1)
                          , p = d.createMorphAt(h, 3, 3)
                          , m = d.createMorphAt(h, 4, 4);
                        return o(r, u, n, "if", [s(r, n, "hasAudioAttribution")], {}, e, null ),
                        o(r, p, n, "if", [s(r, n, "description")], {}, t, null ),
                        o(r, m, n, "if", [s(r, n, "hasSimilarPosts")], {}, a, null ),
                        l
                    }
                }
            }()
              , i = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "caption");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(n.childAt(c, [1]), 0, 0);
                        return d(t, s, e, "format-count", [i(t, e, "likes.count")], {
                            zeroText: "Like"
                        }),
                        c
                    }
                }
            }()
              , d = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "caption");
                            var n = e.createComment("");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(n.childAt(c, [1]), 0, 0);
                            return d(t, s, e, "format-count", [i(t, e, "reposts.count")], {
                                zeroText: "Revine"
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "animated-button", [], {
                            actionName: "revine",
                            iconName: "revine_stroked",
                            isActive: d(a, t, "myRepostId"),
                            action: "revine",
                            disabled: d(a, t, "isCurrentUser")
                        }, e, null ),
                        s
                    }
                }
            }()
              , c = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "caption");
                            var n = e.createTextNode("Share");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "animated-button", [], {
                            actionName: "share",
                            iconName: "share_stroked",
                            isActive: d(a, t, "shareSheetOpen"),
                            action: "expandSharePanel",
                            actionTarget: "view"
                        }, e, null ),
                        s
                    }
                }
            }()
              , s = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "caption");
                            var n = e.createTextNode("Share");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "animated-button", [], {
                            actionName: "share",
                            iconName: "share_stroked",
                            isActive: d(a, t, "shareSheetOpen"),
                            action: "share"
                        }, e, null ),
                        s
                    }
                }
            }()
              , o = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("hr");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n        ");
                        e.appendChild(t, a);
                        var a = e.createElement("ul");
                        e.setAttribute(a, "class", "comments-container");
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(n.childAt(c, [3]), 1, 1);
                        return d(t, s, e, "paginated-comments", [], {
                            comments: i(t, e, "paginatedComments")
                        }),
                        c
                    }
                }
            }()
              , l = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "share-panel");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "class", "clear icon-close_x"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      Share this\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "share-row");
                        var r = e.createComment("");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element
                          , d = r.get
                          , c = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var o = n.childAt(s, [1])
                          , l = n.childAt(o, [1])
                          , h = n.createMorphAt(n.childAt(o, [3]), 0, 0);
                        return i(t, l, e, "action", ["collapseSharePanel"], {
                            target: "view"
                        }),
                        c(t, h, e, "share-post", [], {
                            post: d(t, e, "this"),
                            featureSet: "permalink",
                            visible: d(t, e, "sharePanelExpanded"),
                            location: "PostMobile",
                            isMobile: !0
                        }),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "card");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "card-header");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "video-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "loading-bar"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div")
                      , i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("div");
                    e.setAttribute(i, "class", "share-badge-bar");
                    var d = e.createTextNode("\n          ");
                    e.appendChild(i, d);
                    var d = e.createComment("");
                    e.appendChild(i, d);
                    var d = e.createTextNode("\n        ");
                    e.appendChild(i, d),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "card-content");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "post-engagement");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("div");
                    e.setAttribute(i, "class", "post-actions with-captions");
                    var d = e.createTextNode("\n");
                    e.appendChild(i, d);
                    var d = e.createComment("");
                    e.appendChild(i, d);
                    var d = e.createComment("");
                    e.appendChild(i, d);
                    var d = e.createComment("");
                    e.appendChild(i, d);
                    var d = e.createTextNode("        ");
                    e.appendChild(i, d),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n\n        ");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(h, u, p) {
                    var m = u.dom
                      , v = u.hooks
                      , g = v.inline
                      , b = v.get
                      , C = v.block
                      , f = v.element;
                    m.detectNamespace(p);
                    var F;
                    u.useFragmentCache && m.canClone ? (null === this.cachedFragment && (F = this.build(m),
                    this.hasRendered ? this.cachedFragment = F : this.hasRendered = !0),
                    this.cachedFragment && (F = m.cloneNode(this.cachedFragment, !0))) : F = this.build(m);
                    var N = m.childAt(F, [3])
                      , T = m.childAt(N, [1])
                      , x = m.childAt(N, [3])
                      , A = m.childAt(x, [9])
                      , k = m.childAt(A, [1])
                      , E = m.childAt(N, [5])
                      , R = m.childAt(E, [3])
                      , M = m.childAt(R, [1])
                      , y = m.createMorphAt(F, 1, 1, p)
                      , w = m.createMorphAt(T, 1, 1)
                      , B = m.createMorphAt(T, 3, 3)
                      , P = m.createMorphAt(x, 3, 3)
                      , L = m.createMorphAt(x, 5, 5)
                      , H = m.createMorphAt(x, 7, 7)
                      , D = m.createMorphAt(k, 1, 1)
                      , S = m.createMorphAt(E, 1, 1)
                      , _ = m.createMorphAt(M, 1, 1)
                      , I = m.createMorphAt(M, 2, 2)
                      , U = m.createMorphAt(M, 3, 3)
                      , V = m.createMorphAt(R, 3, 3)
                      , $ = m.createMorphAt(E, 5, 5)
                      , O = m.createMorphAt(E, 7, 7)
                      , q = m.createMorphAt(F, 5, 5, p);
                    return m.insertBoundary(F, null ),
                    g(u, y, h, "partial", ["post-byline"], {}),
                    C(u, w, h, "if", [b(u, h, "loops")], {}, e, null ),
                    g(u, B, h, "user-info", [], {
                        data: b(u, h, "this"),
                        cssClass: "user-info-size-38 user-info-show-verification"
                    }),
                    f(u, x, h, "bind-attr", [], {
                        style: b(u, h, "videoContainerStyle")
                    }),
                    f(u, x, h, "action", ["play"], {
                        target: "view"
                    }),
                    g(u, P, h, "watch-more", [], {
                        post: b(u, h, "this"),
                        fireOnInit: b(u, h, "video")
                    }),
                    C(u, L, h, "if", [b(u, h, "explicitContent")], {}, t, a),
                    C(u, H, h, "if", [b(u, h, "hasAudioAttribution")], {}, n, null ),
                    f(u, A, h, "bind-attr", [], {
                        "class": ":share-overlay shareSheetOpen:open"
                    }),
                    f(u, A, h, "action", ["stopShareCloseTimer"], {
                        on: "mouseEnter"
                    }),
                    f(u, k, h, "action", ["startShareCloseTimer"], {
                        on: "mouseLeave"
                    }),
                    g(u, D, h, "share-post", [], {
                        post: b(u, h, "this"),
                        featureSet: "feed",
                        visible: b(u, h, "shareSheetOpen"),
                        location: "ShareSheet",
                        isMobile: !1
                    }),
                    C(u, S, h, "if", [b(u, h, "hasDescriptionSection")], {}, r, null ),
                    C(u, _, h, "animated-button", [], {
                        actionName: "like",
                        iconName: "heart_icn",
                        isActive: b(u, h, "liked"),
                        action: "like"
                    }, i, null ),
                    C(u, I, h, "unless", [b(u, h, "shouldHideRevine")], {}, d, null ),
                    C(u, U, h, "if", [b(u, h, "isPermalink")], {}, c, s),
                    g(u, V, h, "view", ["post-actions-menu"], {}),
                    C(u, $, h, "if", [b(u, h, "paginatedComments.pagination.count")], {}, o, null ),
                    g(u, O, h, "comment-form", [], {
                        value: b(u, h, "commentText"),
                        commentCount: b(u, h, "comments.count")
                    }),
                    C(u, q, h, "if", [b(u, h, "isPermalink")], {}, l, null ),
                    F
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isDestroyed")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("            ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["explicit-content"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("              ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "vine-player mobile");
                        var n = e.createTextNode("\n                ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "vine-video-container");
                        var r = e.createTextNode("\n                  ");
                        e.appendChild(n, r);
                        var r = e.createElement("video");
                        e.setAttribute(r, "preload", "auto");
                        var i = e.createTextNode("\n                    ");
                        e.appendChild(r, i);
                        var i = e.createElement("source");
                        e.setAttribute(i, "type", "video/mp4"),
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n                  ");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n                ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n              ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n              ");
                        e.appendChild(t, a);
                        var a = e.createElement("img");
                        e.setAttribute(a, "class", "thumbnail"),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n              ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "play"),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element
                          , d = r.get;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1])
                          , o = n.childAt(s, [1, 1, 1])
                          , l = n.childAt(c, [3])
                          , h = n.childAt(c, [5]);
                        return i(t, s, e, "action", ["pause"], {
                            target: "view"
                        }),
                        i(t, o, e, "bind-attr", [], {
                            src: d(t, e, "secureVideoUrl")
                        }),
                        i(t, l, e, "bind-attr", [], {
                            src: d(t, e, "secureThumbnailUrl")
                        }),
                        i(t, h, e, "action", ["play"], {
                            target: "view"
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("            ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n              ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "share-badge-bar");
                    var r = e.createTextNode("\n                ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n              ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.element
                      , c = i.get
                      , s = i.inline
                      , o = i.block;
                    r.detectNamespace(n);
                    var l;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                    var h = r.childAt(l, [1])
                      , u = r.childAt(h, [1])
                      , p = r.createMorphAt(u, 1, 1)
                      , m = r.createMorphAt(l, 3, 3, n);
                    return r.insertBoundary(l, null ),
                    d(a, h, t, "bind-attr", [], {
                        "class": ":share-overlay shareSheetOpen:open"
                    }),
                    d(a, h, t, "action", ["stopShareCloseTimer"], {
                        on: "mouseEnter"
                    }),
                    d(a, u, t, "action", ["startShareCloseTimer"], {
                        on: "mouseLeave"
                    }),
                    s(a, p, t, "share-post", [], {
                        post: c(a, t, "this"),
                        featureSet: "feed",
                        visible: c(a, t, "shareSheetOpen"),
                        location: "ShareSheet",
                        isMobile: !1
                    }),
                    o(a, m, t, "if", [c(a, t, "isMobile")], {}, e, null ),
                    l
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("                    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "linkify-entities", [], {
                        text: i(t, e, "description"),
                        entities: i(t, e, "entities")
                    }),
                    c
                }
            }
        }()
          , n = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("                    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n                      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n                      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n                    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.createMorphAt(o, 1, 1)
                      , h = n.createMorphAt(o, 3, 3);
                    return i(t, o, e, "bind-attr", [], {
                        "class": ":attribution showAttribution:attribution-visible"
                    }),
                    i(t, o, e, "action", ["hideAttribution"], {
                        on: "mouseLeave"
                    }),
                    c(t, l, e, "attribution-icon", [], {
                        active: d(t, e, "showAttribution"),
                        link: d(t, e, "attributionRoute")
                    }),
                    c(t, h, e, "partial", ["audio-attribution"], {}),
                    s
                }
            }
        }()
          , r = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("                    ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "class", "caption");
                    var n = e.createTextNode("\n                      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n                    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                    return d(t, s, e, "format-count", [i(t, e, "likes.count")], {
                        zeroText: "Like"
                    }),
                    c
                }
            }
        }()
          , i = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("                      ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "caption");
                        var n = e.createTextNode("\n                        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n                      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                        return d(t, s, e, "format-count", [i(t, e, "reposts.count")], {
                            zeroText: "Revine"
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "animated-button", [], {
                        actionName: "revine",
                        iconName: "revine_stroked",
                        isActive: d(a, t, "myRepostId"),
                        action: "revine",
                        disabled: d(a, t, "isCurrentUser")
                    }, e, null ),
                    s
                }
            }
        }()
          , d = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("                    ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "class", "caption");
                    var n = e.createTextNode("Share");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , c = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("                  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "loop-count", [], {
                        postId: i(t, e, "postIdStr"),
                        loops: i(t, e, "loops"),
                        postDate: i(t, e, "created")
                    }),
                    c
                }
            }
        }()
          , s = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("                  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span")
                      , n = e.createTextNode("\n                    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n                  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                    return d(t, s, e, "format-count", [i(t, e, "likes.count")], {
                        singleText: "Like",
                        pluralText: "Likes"
                    }),
                    c
                }
            }
        }()
          , o = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("                  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span")
                      , n = e.createTextNode("\n                    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n                  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                    return d(t, s, e, "format-count", [i(t, e, "reposts.count")], {
                        singleText: "Revine",
                        pluralText: "Revines"
                    }),
                    c
                }
            }
        }()
          , l = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("                  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span")
                      , n = e.createTextNode("\n                    ");
                    e.appendChild(a, n);
                    var n = e.createElement("a")
                      , r = e.createTextNode("\n                      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n                    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n                  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1, 1])
                      , l = n.createMorphAt(o, 1, 1);
                    return i(t, o, e, "action", ["toggleComments"], {
                        target: "view"
                    }),
                    c(t, l, e, "format-count", [d(t, e, "comments.count")], {
                        singleText: "Comment",
                        pluralText: "Comments"
                    }),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "post permalink-post-wrapper fauxlink");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "permalink-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "permalink-content-wrapper");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "card");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "video-container main");
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "loading-bar"),
                e.appendChild(d, c);
                var c = e.createTextNode("\n\n          ");
                e.appendChild(d, c);
                var c = e.createComment("");
                e.appendChild(d, c);
                var c = e.createTextNode("\n\n");
                e.appendChild(d, c);
                var c = e.createComment("");
                e.appendChild(d, c);
                var c = e.createTextNode("        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "card-content");
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "card-table");
                var s = e.createTextNode("\n            ");
                e.appendChild(c, s);
                var s = e.createElement("div");
                e.setAttribute(s, "class", "info-row");
                var o = e.createTextNode("\n              ");
                e.appendChild(s, o);
                var o = e.createComment("");
                e.appendChild(s, o);
                var o = e.createTextNode("\n              ");
                e.appendChild(s, o);
                var o = e.createComment("");
                e.appendChild(s, o);
                var o = e.createTextNode("\n            ");
                e.appendChild(s, o),
                e.appendChild(c, s);
                var s = e.createTextNode("\n\n            ");
                e.appendChild(c, s);
                var s = e.createElement("div");
                e.setAttribute(s, "class", "info-row");
                var o = e.createTextNode("\n              ");
                e.appendChild(s, o);
                var o = e.createElement("div")
                  , l = e.createTextNode("\n                ");
                e.appendChild(o, l);
                var l = e.createElement("div");
                e.setAttribute(l, "class", "post-description");
                var h = e.createTextNode("\n");
                e.appendChild(l, h);
                var h = e.createComment("");
                e.appendChild(l, h);
                var h = e.createTextNode("\n");
                e.appendChild(l, h);
                var h = e.createComment("");
                e.appendChild(l, h);
                var h = e.createTextNode("                ");
                e.appendChild(l, h),
                e.appendChild(o, l);
                var l = e.createTextNode("\n              ");
                e.appendChild(o, l),
                e.appendChild(s, o);
                var o = e.createTextNode("\n            ");
                e.appendChild(s, o),
                e.appendChild(c, s);
                var s = e.createTextNode("\n\n            ");
                e.appendChild(c, s);
                var s = e.createElement("div");
                e.setAttribute(s, "class", "info-row");
                var o = e.createTextNode("\n              ");
                e.appendChild(s, o);
                var o = e.createElement("div");
                e.setAttribute(o, "class", "post-engagement");
                var l = e.createTextNode("\n                ");
                e.appendChild(o, l);
                var l = e.createElement("div");
                e.setAttribute(l, "class", "post-actions");
                var h = e.createTextNode("\n");
                e.appendChild(l, h);
                var h = e.createComment("");
                e.appendChild(l, h);
                var h = e.createTextNode("\n");
                e.appendChild(l, h);
                var h = e.createComment("");
                e.appendChild(l, h);
                var h = e.createTextNode("\n");
                e.appendChild(l, h);
                var h = e.createComment("");
                e.appendChild(l, h);
                var h = e.createTextNode("                ");
                e.appendChild(l, h),
                e.appendChild(o, l);
                var l = e.createTextNode("\n\n");
                e.appendChild(o, l);
                var l = e.createComment("");
                e.appendChild(o, l);
                var l = e.createTextNode("              ");
                e.appendChild(o, l),
                e.appendChild(s, o);
                var o = e.createTextNode("\n              ");
                e.appendChild(s, o);
                var o = e.createElement("hr");
                e.appendChild(s, o);
                var o = e.createTextNode("\n              ");
                e.appendChild(s, o);
                var o = e.createElement("div")
                  , l = e.createTextNode("\n");
                e.appendChild(o, l);
                var l = e.createComment("");
                e.appendChild(o, l);
                var l = e.createTextNode("\n");
                e.appendChild(o, l);
                var l = e.createComment("");
                e.appendChild(o, l);
                var l = e.createTextNode("\n");
                e.appendChild(o, l);
                var l = e.createComment("");
                e.appendChild(o, l);
                var l = e.createTextNode("              ");
                e.appendChild(o, l),
                e.appendChild(s, o);
                var o = e.createTextNode("\n\n              ");
                e.appendChild(s, o);
                var o = e.createElement("ul");
                e.setAttribute(o, "class", "comments-container");
                var l = e.createTextNode("\n                ");
                e.appendChild(o, l);
                var l = e.createComment("");
                e.appendChild(o, l);
                var l = e.createTextNode("\n              ");
                e.appendChild(o, l),
                e.appendChild(s, o);
                var o = e.createTextNode("\n            ");
                e.appendChild(s, o),
                e.appendChild(c, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(c, s),
                e.appendChild(d, c);
                var c = e.createTextNode("\n\n          ");
                e.appendChild(d, c);
                var c = e.createComment("");
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "clearfix"),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(h, u, p) {
                var m = u.dom
                  , v = u.hooks
                  , g = v.inline
                  , b = v.get
                  , C = v.element
                  , f = v.block;
                m.detectNamespace(p);
                var F;
                u.useFragmentCache && m.canClone ? (null === this.cachedFragment && (F = this.build(m),
                this.hasRendered ? this.cachedFragment = F : this.hasRendered = !0),
                this.cachedFragment && (F = m.cloneNode(this.cachedFragment, !0))) : F = this.build(m);
                var N = m.childAt(F, [2, 1, 1, 1])
                  , T = m.childAt(N, [1])
                  , x = m.childAt(N, [3])
                  , A = m.childAt(x, [1])
                  , k = m.childAt(A, [1])
                  , E = m.childAt(A, [3, 1])
                  , R = m.childAt(E, [1])
                  , M = m.childAt(A, [5])
                  , y = m.childAt(M, [1])
                  , w = m.childAt(y, [1])
                  , B = m.childAt(M, [5])
                  , P = m.createMorphAt(F, 0, 0, p)
                  , L = m.createMorphAt(T, 3, 3)
                  , H = m.createMorphAt(T, 5, 5)
                  , D = m.createMorphAt(k, 1, 1)
                  , S = m.createMorphAt(k, 3, 3)
                  , _ = m.createMorphAt(R, 1, 1)
                  , I = m.createMorphAt(R, 3, 3)
                  , U = m.createMorphAt(w, 1, 1)
                  , V = m.createMorphAt(w, 3, 3)
                  , $ = m.createMorphAt(w, 5, 5)
                  , O = m.createMorphAt(y, 3, 3)
                  , q = m.createMorphAt(B, 1, 1)
                  , j = m.createMorphAt(B, 3, 3)
                  , z = m.createMorphAt(B, 5, 5)
                  , W = m.createMorphAt(m.childAt(M, [7]), 1, 1)
                  , G = m.createMorphAt(x, 3, 3);
                return m.insertBoundary(F, 0),
                g(u, P, h, "partial", ["post-byline"], {}),
                C(u, T, h, "bind-attr", [], {
                    style: b(u, h, "backgroundImageStyle")
                }),
                C(u, T, h, "action", ["play"], {
                    target: "view"
                }),
                g(u, L, h, "watch-more", [], {
                    post: b(u, h, "this"),
                    action: "launchLongformViewer",
                    fireOnInit: b(u, h, "video"),
                    hoisted: b(u, h, "shareSheetOpen")
                }),
                f(u, H, h, "if", [b(u, h, "explicitContent")], {}, e, t),
                g(u, D, h, "user-info", [], {
                    data: b(u, h, "this"),
                    cssClass: "user-info-size-38 user-info-show-verification"
                }),
                g(u, S, h, "view", ["post-actions-menu"], {}),
                C(u, E, h, "bind-attr", [], {
                    "class": ":post-info-container"
                }),
                f(u, _, h, "if", [b(u, h, "description")], {}, a, null ),
                f(u, I, h, "if", [b(u, h, "hasAudioAttribution")], {}, n, null ),
                f(u, U, h, "animated-button", [], {
                    actionName: "like",
                    iconName: "heart_icn",
                    isActive: b(u, h, "liked"),
                    action: "like"
                }, r, null ),
                f(u, V, h, "unless", [b(u, h, "shouldHideRevine")], {}, i, null ),
                f(u, $, h, "animated-button", [], {
                    actionName: "share",
                    iconName: "share_stroked",
                    isActive: b(u, h, "shareSheetOpen"),
                    action: "share"
                }, d, null ),
                f(u, O, h, "if", [b(u, h, "loops")], {}, c, null ),
                C(u, B, h, "bind-attr", [], {
                    "class": ":post-social-metrics commentsExpanded"
                }),
                f(u, q, h, "if", [b(u, h, "likes.count")], {}, s, null ),
                f(u, j, h, "if", [b(u, h, "reposts.count")], {}, o, null ),
                f(u, z, h, "if", [b(u, h, "comments.count")], {}, l, null ),
                g(u, W, h, "paginated-comments", [], {
                    comments: b(u, h, "paginatedComments"),
                    isVisible: b(u, h, "commentsExpanded")
                }),
                g(u, G, h, "comment-form", [], {
                    value: b(u, h, "commentText"),
                    target: "view",
                    action: "submitComment"
                }),
                F
            }
        }
    }())
}),
define("vine-ember/templates/promo/camera", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "iframe-container");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("iframe");
                    e.setAttribute(n, "src", "//player.vimeo.com/video/103853748?title=0&byline=0&portrait=0&color=ffffff&autoplay=1&api=1"),
                    e.setAttribute(n, "frameborder", "0"),
                    e.setAttribute(n, "width", "1280"),
                    e.setAttribute(n, "height", "640"),
                    e.setAttribute(n, "webkitallowfullscreen", ""),
                    e.setAttribute(n, "mozallowfullscreen", ""),
                    e.setAttribute(n, "allowfullscreen", ""),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon-close_x"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1, 3]);
                    return i(t, c, e, "action", ["stopVideo"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "hero"),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "icon-vine_logo"),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "header-content");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "overlay"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("      ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "messaging");
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "play"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n\n        ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "promo-title");
                    var i = e.createTextNode("The new Vine camera");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "promo-subtitle");
                    var i = e.createTextNode("Shoot, import, edit and share — fast.");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n\n        ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block
                      , o = d.element
                      , l = d.content;
                    i.detectNamespace(r);
                    var h;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                    this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                    this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                    var u = i.childAt(h, [1])
                      , p = i.childAt(u, [7])
                      , m = i.childAt(p, [1])
                      , v = i.createMorphAt(u, 1, 1)
                      , g = i.createMorphAt(u, 5, 5)
                      , b = i.createMorphAt(p, 7, 7);
                    return s(n, v, a, "each", [c(n, a, "heros")], {}, e, null ),
                    s(n, g, a, "link-to", ["index"], {}, t, null ),
                    o(n, m, a, "action", ["playVideo"], {
                        target: "view"
                    }),
                    l(n, b, a, "download-buttons"),
                    h
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("section");
                e.setAttribute(a, "id", "promo-header");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("section");
                e.setAttribute(a, "id", "promo-content");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("article")
                  , i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-title");
                var d = e.createTextNode("Import existing videos from your phone");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-subtitle");
                var d = e.createTextNode("\n        In addition to your phone’s front- and rear-facing camera, you now have another source for your video. From the capture screen, you can choose to import a video from your phone.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createElement("article")
                  , i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-title");
                var d = e.createTextNode("New edit mode");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-subtitle");
                var d = e.createTextNode("\n        The new edit and preview screens help you get your video just the way you want it. To edit your Vine, tap the scissors from the preview screen.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("article")
                  , i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-title");
                var d = e.createTextNode("Advanced camera tools");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-subtitle");
                var d = e.createTextNode("\n        For those who want more advanced ways to shoot Vines, we’ve added a new button that displays a second layer of tools: grid and level, front- and rear-facing focus lock, ghost mode and torch.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createElement("article")
                  , i = e.createTextNode("\n    ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-title");
                var d = e.createTextNode("Undo and quick preview");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-subtitle");
                var d = e.createTextNode("\n        With one tap, you can now preview your last clip right from the capture screen. If you feel it isn’t quite right and you don’t want to use it, simply tap the button again to undo it.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "id", "promo-footer");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("h2")
                  , i = e.createTextNode("For more information, visit our ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "http://blog.vine.co/post/95288683756/new-vine-camera-shoot-import-edit-and-share-fast"),
                e.setAttribute(i, "target", "_blank");
                var d = e.createTextNode("blog");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode(".");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block
                  , o = d.inline
                  , l = d.content;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [2])
                  , p = i.childAt(u, [1])
                  , m = i.childAt(u, [3])
                  , v = i.childAt(u, [5])
                  , g = i.createMorphAt(i.childAt(h, [0]), 1, 1)
                  , b = i.createMorphAt(i.childAt(p, [1]), 1, 1)
                  , C = i.createMorphAt(i.childAt(p, [2]), 1, 1)
                  , f = i.createMorphAt(i.childAt(m, [1]), 1, 1)
                  , F = i.createMorphAt(i.childAt(m, [2]), 1, 1)
                  , N = i.createMorphAt(v, 3, 3)
                  , T = i.createMorphAt(v, 5, 5);
                return s(n, g, a, "if", [c(n, a, "isPlaying")], {}, e, t),
                o(n, b, a, "cdn-img", [], {
                    src: "images/promo/camera/vine_camera_roll-3b407ae7094fd4a718e716fb8fe126a2.jpg"
                }),
                o(n, C, a, "cdn-img", [], {
                    src: "images/promo/camera/vine_camera_edit-561483f426d50ae815ce3032a558e1e2.jpg"
                }),
                o(n, f, a, "cdn-img", [], {
                    src: "images/promo/camera/vine_camera_tools-c5ceb5f0a0627903e2bf9e6a1c997f3e.jpg"
                }),
                o(n, F, a, "cdn-img", [], {
                    src: "images/promo/camera/vine_camera_undo-d5ee99ec15608b59450b656828d74ba5.jpg"
                }),
                l(n, N, a, "share-widgets"),
                l(n, T, a, "download-buttons"),
                h
            }
        }
    }())
}),
define("vine-ember/templates/promo/music", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "mobile-background"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "mobile-background blur"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "video-container main");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("video");
                    e.setAttribute(n, "loop", ""),
                    e.setAttribute(n, "autoplay", ""),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "video-container blur");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("video");
                    e.setAttribute(n, "loop", ""),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1])
                      , o = n.childAt(s, [1])
                      , l = n.childAt(c, [3, 1]);
                    return d(t, s, e, "bind-attr", [], {
                        style: i(t, e, "backgroundImageStyle")
                    }),
                    d(t, o, e, "bind-attr", [], {
                        src: i(t, e, "videoUrl")
                    }),
                    d(t, l, e, "bind-attr", [], {
                        src: i(t, e, "videoBlurUrl")
                    }),
                    c
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("span")
                      , r = e.createTextNode("Learn More");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , n = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , r = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "mobile-screenshot");
                    var n = e.createElement("img");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1, 0]);
                    return d(t, s, e, "bind-attr", [], {
                        src: i(t, e, "mobileScreenshot1")
                    }),
                    c
                }
            }
        }()
          , i = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "phone sticky");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "screenshot");
                    var r = e.createElement("video");
                    e.setAttribute(r, "loop", ""),
                    e.setAttribute(r, "autoplay", ""),
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "screenshot");
                    var r = e.createElement("video");
                    e.setAttribute(r, "loop", ""),
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "screenshot");
                    var r = e.createElement("video");
                    e.setAttribute(r, "loop", ""),
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "screenshot");
                    var r = e.createElement("video");
                    e.setAttribute(r, "loop", ""),
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.childAt(o, [1, 0])
                      , h = n.childAt(o, [3, 0])
                      , u = n.childAt(o, [5, 0])
                      , p = n.childAt(o, [7, 0])
                      , m = n.createMorphAt(o, 9, 9);
                    return d(t, l, e, "bind-attr", [], {
                        src: i(t, e, "screenshot1")
                    }),
                    d(t, h, e, "bind-attr", [], {
                        src: i(t, e, "screenshot2")
                    }),
                    d(t, u, e, "bind-attr", [], {
                        src: i(t, e, "screenshot3")
                    }),
                    d(t, p, e, "bind-attr", [], {
                        src: i(t, e, "screenshot4")
                    }),
                    c(t, m, e, "cdn-img", [], {
                        src: "images/promo/music/iphone_frame-d1407cc25983b1861b839be74cd11832.png"
                    }),
                    s
                }
            }
        }()
          , d = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , c = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "mobile-screenshot");
                    var n = e.createElement("img");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1, 0]);
                    return d(t, s, e, "bind-attr", [], {
                        src: i(t, e, "mobileScreenshot2")
                    }),
                    c
                }
            }
        }()
          , s = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , o = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "mobile-screenshot");
                    var n = e.createElement("img");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1, 0]);
                    return d(t, s, e, "bind-attr", [], {
                        src: i(t, e, "mobileScreenshot3")
                    }),
                    c
                }
            }
        }()
          , l = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , h = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "mobile-screenshot");
                    var n = e.createElement("img");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1, 0]);
                    return d(t, s, e, "bind-attr", [], {
                        src: i(t, e, "mobileScreenshot4")
                    }),
                    c
                }
            }
        }()
          , u = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "phone anchor");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "screenshot");
                    var r = e.createElement("video");
                    e.setAttribute(r, "loop", ""),
                    e.setAttribute(r, "controls", ""),
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.childAt(o, [1, 0])
                      , h = n.createMorphAt(o, 3, 3);
                    return d(t, l, e, "bind-attr", [], {
                        src: i(t, e, "screenshot4")
                    }),
                    c(t, h, e, "cdn-img", [], {
                        src: "images/promo/music/iphone_frame-d1407cc25983b1861b839be74cd11832.png"
                    }),
                    s
                }
            }
        }()
          , p = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , m = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , v = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "vine-iframe-container shmoney");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "mobile-video-container");
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("video");
                    e.setAttribute(r, "loop", ""),
                    e.setAttribute(r, "controls", ""),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "vine-iframe-overlay");
                    var i = e.createTextNode("\n            ");
                    e.appendChild(r, i);
                    var i = e.createElement("button");
                    e.setAttribute(i, "class", "play"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n          ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1, 1])
                      , o = n.childAt(s, [1])
                      , l = n.childAt(s, [3])
                      , h = n.childAt(l, [1]);
                    return d(t, o, e, "bind-attr", [], {
                        src: i(t, e, "shmoney.mobileVine.secureSDVideoUrl")
                    }),
                    d(t, l, e, "bind-attr", [], {
                        style: i(t, e, "shmoney.mobileVine.backgroundImageStyle")
                    }),
                    d(t, h, e, "action", ["playMobileVine", "shmoney"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    c
                }
            }
        }()
          , g = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "vine-iframe-container");
                        var n = e.createTextNode("\n              ");
                        e.appendChild(a, n);
                        var n = e.createElement("iframe");
                        e.setAttribute(n, "width", "300"),
                        e.setAttribute(n, "height", "300"),
                        e.setAttribute(n, "frameborder", "0"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1, 1]);
                        return d(t, s, e, "bind-attr", [], {
                            src: i(t, e, "this")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "vines");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                    return c(a, o, t, "each", [d(a, t, "shmoney.embedUrls")], {}, e, null ),
                    s
                }
            }
        }()
          , b = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , C = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "vine-iframe-container collab");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "mobile-video-container");
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("video");
                    e.setAttribute(r, "loop", ""),
                    e.setAttribute(r, "controls", ""),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "vine-iframe-overlay");
                    var i = e.createTextNode("\n            ");
                    e.appendChild(r, i);
                    var i = e.createElement("button");
                    e.setAttribute(i, "class", "play"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n          ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1, 1])
                      , o = n.childAt(s, [1])
                      , l = n.childAt(s, [3])
                      , h = n.childAt(l, [1]);
                    return d(t, o, e, "bind-attr", [], {
                        src: i(t, e, "collab.mobileVine.secureSDVideoUrl")
                    }),
                    d(t, l, e, "bind-attr", [], {
                        style: i(t, e, "collab.mobileVine.backgroundImageStyle")
                    }),
                    d(t, h, e, "action", ["playMobileVine", "collab"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    c
                }
            }
        }()
          , f = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "vine-iframe-container");
                        var n = e.createTextNode("\n              ");
                        e.appendChild(a, n);
                        var n = e.createElement("iframe");
                        e.setAttribute(n, "width", "300"),
                        e.setAttribute(n, "height", "300"),
                        e.setAttribute(n, "frameborder", "0"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1, 1]);
                        return d(t, s, e, "bind-attr", [], {
                            src: i(t, e, "this")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "vines");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                    return c(a, o, t, "each", [d(a, t, "collab.embedUrls")], {}, e, null ),
                    s
                }
            }
        }()
          , F = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , N = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "vine-iframe-container shawn");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "mobile-video-container");
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("video");
                    e.setAttribute(r, "loop", ""),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "vine-iframe-overlay");
                    var i = e.createTextNode("\n            ");
                    e.appendChild(r, i);
                    var i = e.createElement("button");
                    e.setAttribute(i, "class", "play"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n          ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1, 1])
                      , o = n.childAt(s, [1])
                      , l = n.childAt(s, [3])
                      , h = n.childAt(l, [1]);
                    return d(t, o, e, "bind-attr", [], {
                        src: i(t, e, "shawn.mobileVine.secureSDVideoUrl")
                    }),
                    d(t, l, e, "bind-attr", [], {
                        style: i(t, e, "shawn.mobileVine.backgroundImageStyle")
                    }),
                    d(t, h, e, "action", ["playMobileVine", "shawn"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    c
                }
            }
        }()
          , T = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "vine-iframe-container");
                        var n = e.createTextNode("\n              ");
                        e.appendChild(a, n);
                        var n = e.createElement("iframe");
                        e.setAttribute(n, "width", "300"),
                        e.setAttribute(n, "height", "300"),
                        e.setAttribute(n, "frameborder", "0"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.element;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1, 1]);
                        return d(t, s, e, "bind-attr", [], {
                            src: i(t, e, "this")
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "vines");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("        ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                    return c(a, o, t, "each", [d(a, t, "shawn.embedUrls")], {}, e, null ),
                    s
                }
            }
        }()
          , x = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , A = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down footer");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }()
          , k = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "nav-down");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "down-arrow"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["navDown"], {
                        on: "touchStart",
                        target: "view"
                    }),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("section");
                e.setAttribute(a, "id", "promo-header");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "header-content");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("section");
                e.setAttribute(a, "id", "promo-content");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "title-screen");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize text");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        Music has been part of Vine’s culture since the beginning. Now, we’re connecting you to the music you love, starting with new ways to discover and create with music on Vine.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize tutorial");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "article-title");
                var c = e.createTextNode("Discover music on Vine");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        Explore the new Featured Tracks section. Choose a song to add to your Vine, or check out what’s been recently added.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize tutorial");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "article-title");
                var c = e.createTextNode("Discover music on Vine");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        Find out what you’re listening to. When you see the music note on a Vine, tap it to see the track info.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize tutorial");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "article-title");
                var c = e.createTextNode("Create with music on Vine");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        Make better Vines. Use Snap to Beat to add music loops — they sound like they never end, feel like magic and are only possible on Vine.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize tutorial");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "article-title");
                var c = e.createTextNode("Create with music on Vine");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n        Edit audio with even more control. Turning off Snap to Beat lets you add a song or sound to any part of your Vine.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize text");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        As artists turn Vine into their stage —from rising musicians who entertain us to creators who remix and hypnotize us through collaborations — their talent reaches far beyond the app.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("script");
                e.setAttribute(n, "src", "https://platform.vine.co/static/scripts/embed.js"),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize has-vines");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        When trends like the Shmoney Dance and The Whip make their way off of Vine and take on a life of their own, the songs used in those Vines soon climb the charts.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize has-vines");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        Artists use Vine to make music together, and they extend their collaborations beyond Vine, forming bands, releasing remixes and playing together in person.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize has-vines");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        And artists like Shawn Mendes show how quickly undiscovered talent can go from making Vines in a basement to stardom.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "class", "colorize text");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-text");
                var d = e.createTextNode("\n        These stories, and so many others, inspire us. We can't wait to hear what you think.\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("article");
                e.setAttribute(n, "id", "promo-footer"),
                e.setAttribute(n, "class", "text");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "gradient"),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "article-content");
                var i = e.createTextNode("\n      For more information, visit our ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "http://blog.vine.co/post/127753663631/music-on-vine"),
                e.setAttribute(i, "target", "_blank");
                var d = e.createTextNode("blog");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode(".\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(E, R, M) {
                var y = R.dom
                  , w = R.hooks
                  , B = w.get
                  , P = w.block
                  , L = w.inline;
                y.detectNamespace(M);
                var H;
                R.useFragmentCache && y.canClone ? (null === this.cachedFragment && (H = this.build(y),
                this.hasRendered ? this.cachedFragment = H : this.hasRendered = !0),
                this.cachedFragment && (H = y.cloneNode(this.cachedFragment, !0))) : H = this.build(y);
                var D = y.childAt(H, [2])
                  , S = y.childAt(D, [1])
                  , _ = y.childAt(D, [5])
                  , I = y.childAt(D, [7])
                  , U = y.childAt(D, [9])
                  , V = y.childAt(D, [11])
                  , $ = y.childAt(D, [17])
                  , O = y.childAt(D, [19])
                  , q = y.childAt(D, [21])
                  , j = y.childAt(D, [25])
                  , z = y.createMorphAt(y.childAt(H, [0, 1]), 1, 1)
                  , W = y.createMorphAt(y.childAt(S, [1]), 1, 1)
                  , G = y.createMorphAt(S, 3, 3)
                  , J = y.createMorphAt(S, 5, 5)
                  , Y = y.createMorphAt(y.childAt(D, [3]), 3, 3)
                  , K = y.createMorphAt(_, 1, 1)
                  , X = y.createMorphAt(_, 5, 5)
                  , Q = y.createMorphAt(_, 7, 7)
                  , Z = y.createMorphAt(I, 1, 1)
                  , ee = y.createMorphAt(I, 5, 5)
                  , te = y.createMorphAt(U, 1, 1)
                  , ae = y.createMorphAt(U, 5, 5)
                  , ne = y.createMorphAt(V, 1, 1)
                  , re = y.createMorphAt(V, 5, 5)
                  , ie = y.createMorphAt(V, 7, 7)
                  , de = y.createMorphAt(y.childAt(D, [13]), 3, 3)
                  , ce = y.createMorphAt($, 1, 1)
                  , se = y.createMorphAt(y.childAt($, [3]), 3, 3)
                  , oe = y.createMorphAt($, 5, 5)
                  , le = y.createMorphAt(O, 1, 1)
                  , he = y.createMorphAt(y.childAt(O, [3]), 3, 3)
                  , ue = y.createMorphAt(O, 5, 5)
                  , pe = y.createMorphAt(q, 1, 1)
                  , me = y.createMorphAt(y.childAt(q, [3]), 3, 3)
                  , ve = y.createMorphAt(q, 5, 5)
                  , ge = y.createMorphAt(y.childAt(D, [23]), 3, 3)
                  , be = y.createMorphAt(y.childAt(j, [3]), 3, 3)
                  , Ce = y.createMorphAt(j, 5, 5);
                return P(R, z, E, "if", [B(R, E, "isMobile")], {}, e, t),
                L(R, W, E, "cdn-img", [], {
                    src: "images/promo/music/header_title.svg"
                }),
                L(R, G, E, "download-buttons", [], {
                    cssClass: "white large",
                    storeOverrides: B(R, E, "storeOverrides")
                }),
                P(R, J, E, "if", [B(R, E, "isMobile")], {}, a, null ),
                P(R, Y, E, "if", [B(R, E, "isMobile")], {}, n, null ),
                P(R, K, E, "if", [B(R, E, "isMobile")], {}, r, null ),
                P(R, X, E, "unless", [B(R, E, "isMobile")], {}, i, null ),
                P(R, Q, E, "if", [B(R, E, "isMobile")], {}, d, null ),
                P(R, Z, E, "if", [B(R, E, "isMobile")], {}, c, null ),
                P(R, ee, E, "if", [B(R, E, "isMobile")], {}, s, null ),
                P(R, te, E, "if", [B(R, E, "isMobile")], {}, o, null ),
                P(R, ae, E, "if", [B(R, E, "isMobile")], {}, l, null ),
                P(R, ne, E, "if", [B(R, E, "isMobile")], {}, h, null ),
                P(R, re, E, "unless", [B(R, E, "isMobile")], {}, u, null ),
                P(R, ie, E, "if", [B(R, E, "isMobile")], {}, p, null ),
                P(R, de, E, "if", [B(R, E, "isMobile")], {}, m, null ),
                P(R, ce, E, "if", [B(R, E, "isMobile")], {}, v, null ),
                P(R, se, E, "unless", [B(R, E, "isMobile")], {}, g, null ),
                P(R, oe, E, "if", [B(R, E, "isMobile")], {}, b, null ),
                P(R, le, E, "if", [B(R, E, "isMobile")], {}, C, null ),
                P(R, he, E, "unless", [B(R, E, "isMobile")], {}, f, null ),
                P(R, ue, E, "if", [B(R, E, "isMobile")], {}, F, null ),
                P(R, pe, E, "if", [B(R, E, "isMobile")], {}, N, null ),
                P(R, me, E, "unless", [B(R, E, "isMobile")], {}, T, null ),
                P(R, ve, E, "if", [B(R, E, "isMobile")], {}, x, null ),
                P(R, ge, E, "if", [B(R, E, "isMobile")], {}, A, null ),
                L(R, be, E, "download-buttons", [], {
                    cssClass: "white large",
                    storeOverrides: B(R, E, "storeOverrides")
                }),
                P(R, Ce, E, "if", [B(R, E, "isMobile")], {}, k, null ),
                H
            }
        }
    }())
}),
define("vine-ember/templates/related-videos/post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "video-container"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.element;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1]);
                    return d(t, s, e, "bind-attr", [], {
                        style: i(t, e, "backgroundImageStyle")
                    }),
                    c
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-info");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "info-container");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "description");
                        var i = e.createTextNode("\n          ");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n        ");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.childAt(c, [1, 1])
                          , o = n.createMorphAt(s, 1, 1)
                          , l = n.createMorphAt(n.childAt(s, [3]), 1, 1);
                        return d(t, o, e, "user-info", [], {
                            data: i(t, e, "this"),
                            cssClass: "user-info-size-24 user-info-inherit-color"
                        }),
                        d(t, l, e, "replace-emoji", [i(t, e, "description")], {}),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "mouseover-video", [], {
                        post: d(a, t, "this"),
                        player: d(a, t, "controller.player"),
                        className: "medium"
                    }, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "view.isMobile")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/reset-password", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-smiley"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-lock"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , a = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("button")
                          , n = e.createTextNode("Continue");
                        return e.appendChild(a, n),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(c, 1, 1, n);
                    return d(a, s, t, "link-to", ["login"], {}, e, null ),
                    c
                }
            }
        }()
          , n = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("form");
                    e.setAttribute(a, "id", "reset-password");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createElement("br");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createElement("br");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("button");
                    e.setAttribute(n, "type", "submit");
                    var r = e.createTextNode("Submit");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.createMorphAt(o, 1, 1)
                      , h = n.createMorphAt(o, 4, 4);
                    return i(t, o, e, "action", ["resetPassword"], {
                        on: "submit"
                    }),
                    c(t, l, e, "my-input", [], {
                        type: "password",
                        name: "password1",
                        placeholder: "New Password",
                        value: d(t, e, "password1"),
                        messageType: d(t, e, "message.type")
                    }),
                    c(t, h, e, "my-input", [], {
                        type: "password",
                        name: "password2",
                        placeholder: "Confirm Password",
                        value: d(t, e, "password2"),
                        messageType: d(t, e, "message.type")
                    }),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "login-page");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "message");
                var i = e.createComment("");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(r, i, d) {
                var c = i.dom
                  , s = i.hooks
                  , o = s.element
                  , l = s.get
                  , h = s.block
                  , u = s.content;
                c.detectNamespace(d);
                var p;
                i.useFragmentCache && c.canClone ? (null === this.cachedFragment && (p = this.build(c),
                this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0),
                this.cachedFragment && (p = c.cloneNode(this.cachedFragment, !0))) : p = this.build(c);
                var m = c.childAt(p, [0, 1])
                  , v = c.createMorphAt(m, 1, 1)
                  , g = c.createMorphAt(c.childAt(m, [3]), 0, 0)
                  , b = c.createMorphAt(m, 5, 5);
                return o(i, m, r, "bind-attr", [], {
                    "class": ":login-container submitted"
                }),
                h(i, v, r, "if", [l(i, r, "submitted")], {}, e, t),
                u(i, g, r, "message.text"),
                h(i, b, r, "if", [l(i, r, "submitted")], {}, a, n),
                p
            }
        }
    }())
}),
define("vine-ember/templates/search/autocomplete-results", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createElement("span");
                                e.setAttribute(a, "class", "icon-tag"),
                                e.appendChild(t, a);
                                var a = e.createTextNode("#");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var c = n.createMorphAt(d, 2, 2, a);
                                return n.insertBoundary(d, null ),
                                i(t, c, e, "tag"),
                                d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("li")
                              , n = e.createComment("");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                            this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var o = r.createMorphAt(r.childAt(s, [0]), 0, 0);
                            return c(a, o, t, "link-to", ["tag", d(a, t, "tag")], {}, e, null ),
                            s
                        }
                    }
                }()
                  , t = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline
                                  , c = r.content;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                                this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var o = n.createMorphAt(s, 0, 0, a)
                                  , l = n.createMorphAt(s, 1, 1, a);
                                return n.insertBoundary(s, null ),
                                n.insertBoundary(s, 0),
                                d(t, o, e, "secure-img", [], {
                                    src: i(t, e, "avatarUrl"),
                                    "class": "avatar",
                                    style: i(t, e, "borderColorStyle")
                                }),
                                c(t, l, e, "username"),
                                s
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("li")
                              , n = e.createComment("");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                            this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var o = r.createMorphAt(r.childAt(s, [0]), 0, 0);
                            return c(a, o, t, "link-user", [], {
                                user: d(a, t, "this")
                            }, e, null ),
                            s
                        }
                    }
                }()
                  , a = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createElement("span");
                                e.setAttribute(a, "class", "icon-venue"),
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var c = n.createMorphAt(d, 1, 1, a);
                                return n.insertBoundary(d, null ),
                                i(t, c, e, "venueName"),
                                d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("li")
                              , n = e.createComment("");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                            this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var o = r.createMorphAt(r.childAt(s, [0]), 0, 0);
                            return c(a, o, t, "link-to", ["venue", d(a, t, "foursquareVenueIdStr")], {}, e, null ),
                            s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(n, r, i) {
                        var d = r.dom
                          , c = r.hooks
                          , s = c.get
                          , o = c.block;
                        d.detectNamespace(i);
                        var l;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                        var h = d.createMorphAt(l, 1, 1, i)
                          , u = d.createMorphAt(l, 3, 3, i)
                          , p = d.createMorphAt(l, 5, 5, i);
                        return o(r, h, n, "if", [s(r, n, "tag")], {}, e, null ),
                        o(r, u, n, "if", [s(r, n, "userIdStr")], {}, t, null ),
                        o(r, p, n, "if", [s(r, n, "venueName")], {}, a, null ),
                        l
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "each", [d(a, t, "items")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("span");
                        return e.setAttribute(a, "class", "icon-tag"),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("span");
                        return e.setAttribute(a, "class", "icon-profile"),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , a = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("span");
                        return e.setAttribute(a, "class", "icon-venue"),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("li");
                    e.setAttribute(a, "class", "empty-result");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      No results found.\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(n, r, i) {
                    var d = r.dom
                      , c = r.hooks
                      , s = c.get
                      , o = c.block;
                    d.detectNamespace(i);
                    var l;
                    r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                    var h = d.childAt(l, [1])
                      , u = d.createMorphAt(h, 1, 1)
                      , p = d.createMorphAt(h, 3, 3)
                      , m = d.createMorphAt(h, 5, 5);
                    return o(r, u, n, "if", [s(r, n, "tags")], {}, e, null ),
                    o(r, p, n, "if", [s(r, n, "users")], {}, t, null ),
                    o(r, m, n, "if", [s(r, n, "venues")], {}, a, null ),
                    l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("ul")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.get
                  , o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.childAt(l, [0])
                  , u = i.createMorphAt(h, 1, 1);
                return c(n, h, a, "bind-attr", [], {
                    "class": "items::empty"
                }),
                o(n, u, a, "if", [s(n, a, "items")], {}, e, t),
                l
            }
        }
    }())
}),
define("vine-ember/templates/search/index", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["timelines/fullscreen"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("span");
                        return e.setAttribute(a, "class", "icon-tv"),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [0]);
                        return i(t, c, e, "action", ["openFullscreen"], {}),
                        d
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 0, 0, a);
                            return n.insertBoundary(c, null ),
                            n.insertBoundary(c, 0),
                            d(t, s, e, "render", ["search/modules/users", i(t, e, "moduleUsers")], {}),
                            c
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 0, 0, a);
                            return n.insertBoundary(c, null ),
                            n.insertBoundary(c, 0),
                            d(t, s, e, "render", ["search/modules/tags", i(t, e, "moduleTags")], {}),
                            c
                        }
                    }
                }()
                  , a = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 0, 0, a);
                            return n.insertBoundary(c, null ),
                            n.insertBoundary(c, 0),
                            d(t, s, e, "render", ["search/modules/venues", i(t, e, "moduleVenues")], {}),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("section");
                        e.setAttribute(a, "id", "search-sidebar");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(n, r, i) {
                        var d = r.dom
                          , c = r.hooks
                          , s = c.get
                          , o = c.block;
                        d.detectNamespace(i);
                        var l;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                        var h = d.childAt(l, [1])
                          , u = d.createMorphAt(h, 1, 1)
                          , p = d.createMorphAt(h, 3, 3)
                          , m = d.createMorphAt(h, 5, 5);
                        return o(r, u, n, "if", [s(r, n, "moduleUsers")], {}, e, null ),
                        o(r, p, n, "if", [s(r, n, "moduleTags")], {}, t, null ),
                        o(r, m, n, "if", [s(r, n, "moduleVenues")], {}, a, null ),
                        l
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "post-results");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode(" results for ");
                    e.appendChild(a, n);
                    var n = e.createElement("strong")
                      , r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.inline
                      , o = d.content
                      , l = d.block;
                    i.detectNamespace(r);
                    var h;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                    this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                    this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                    var u = i.childAt(h, [1])
                      , p = i.createMorphAt(u, 1, 1)
                      , m = i.createMorphAt(i.childAt(u, [3]), 0, 0)
                      , v = i.createMorphAt(u, 5, 5)
                      , g = i.createMorphAt(h, 3, 3, r);
                    return i.insertBoundary(h, null ),
                    s(n, p, a, "format-count", [c(n, a, "pagination.count")], {}),
                    o(n, m, a, "params.query"),
                    l(n, v, a, "if", [c(n, a, "fullscreenAvailable")], {}, e, null ),
                    l(n, g, a, "view", ["search/posts"], {}, t, null ),
                    h
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "isTvMode")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/search/modules/tags", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "no-results");
                    var n = e.createTextNode('No results for "');
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode('"');
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                    return i(t, c, e, "query"),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 0, 0, a);
                    return n.insertBoundary(c, null ),
                    n.insertBoundary(c, 0),
                    d(t, s, e, "tv-link", [], {
                        route: "tag",
                        routeParam: i(t, e, "tag"),
                        text: i(t, e, "hashtag")
                    }),
                    c
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "module-pagination");
                    var n = e.createTextNode("Load more...");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["nextPage"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "class", "count small");
                var r = e.createComment("");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "icon-tag"),
                e.appendChild(n, r);
                var r = e.createTextNode("Tags\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.element
                  , o = c.get
                  , l = c.inline
                  , h = c.block;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0])
                  , m = d.createMorphAt(d.childAt(p, [1]), 0, 0)
                  , v = d.createMorphAt(p, 5, 5)
                  , g = d.createMorphAt(p, 7, 7)
                  , b = d.createMorphAt(p, 9, 9);
                return s(r, p, n, "bind-attr", [], {
                    "class": ":module-container pageClass"
                }),
                l(r, m, n, "format-count", [o(r, n, "pagination.count")], {}),
                h(r, v, n, "if", [o(r, n, "isEmpty")], {}, e, null ),
                h(r, g, n, "each", [o(r, n, "posts")], {}, t, null ),
                h(r, b, n, "if", [o(r, n, "pagination.nextPage")], {}, a, null ),
                u
            }
        }
    }())
}),
define("vine-ember/templates/search/modules/users", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "no-results");
                    var n = e.createTextNode('No results for "');
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode('"');
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                    return i(t, c, e, "query"),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "secure-img", [], {
                                src: i(t, e, "avatarUrl"),
                                "class": "avatar"
                            }),
                            c
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("span");
                            return e.setAttribute(a, "class", "icon-verified"),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block
                          , o = d.content;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.createMorphAt(l, 0, 0, r)
                          , u = i.createMorphAt(l, 2, 2, r)
                          , p = i.createMorphAt(l, 3, 3, r);
                        return i.insertBoundary(l, 0),
                        s(n, h, a, "user-hover", [], {
                            color: c(n, a, "backgroundColor"),
                            borderWidth: 2
                        }, e, null ),
                        o(n, u, a, "username"),
                        s(n, p, a, "if", [c(n, a, "verified")], {}, t, null ),
                        l
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3")
                      , n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.inline
                      , s = i.block;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.childAt(o, [1])
                      , h = r.createMorphAt(l, 1, 1)
                      , u = r.createMorphAt(l, 3, 3);
                    return c(a, h, t, "follow-button", [], {
                        user: d(a, t, "this")
                    }),
                    s(a, u, t, "link-user", [], {
                        user: d(a, t, "this")
                    }, e, null ),
                    o
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "module-pagination");
                    var n = e.createTextNode("Load more...");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["nextPage"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "class", "count small");
                var r = e.createComment("");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "icon-profile"),
                e.appendChild(n, r);
                var r = e.createTextNode("People\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.element
                  , o = c.get
                  , l = c.inline
                  , h = c.block;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0])
                  , m = d.createMorphAt(d.childAt(p, [1]), 0, 0)
                  , v = d.createMorphAt(p, 5, 5)
                  , g = d.createMorphAt(p, 6, 6)
                  , b = d.createMorphAt(p, 7, 7);
                return s(r, p, n, "bind-attr", [], {
                    "class": ":module-container :users pageClass"
                }),
                l(r, m, n, "format-count", [o(r, n, "pagination.count")], {}),
                h(r, v, n, "if", [o(r, n, "isEmpty")], {}, e, null ),
                h(r, g, n, "each", [o(r, n, "posts")], {}, t, null ),
                h(r, b, n, "if", [o(r, n, "pagination.nextPage")], {}, a, null ),
                u
            }
        }
    }())
}),
define("vine-ember/templates/search/modules/venues", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "no-results");
                    var n = e.createTextNode('No results for "');
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode('"');
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                    return i(t, c, e, "query"),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "tv-link", [], {
                        route: "venue",
                        routeParam: i(t, e, "foursquareVenueId"),
                        text: i(t, e, "venueName")
                    }),
                    c
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "module-pagination");
                    var n = e.createTextNode("Load more...");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["nextPage"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "class", "count small");
                var r = e.createComment("");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "icon-venue"),
                e.appendChild(n, r);
                var r = e.createTextNode("Locations\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.element
                  , o = c.get
                  , l = c.inline
                  , h = c.block;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0])
                  , m = d.createMorphAt(d.childAt(p, [1]), 0, 0)
                  , v = d.createMorphAt(p, 5, 5)
                  , g = d.createMorphAt(p, 6, 6)
                  , b = d.createMorphAt(p, 7, 7);
                return s(r, p, n, "bind-attr", [], {
                    "class": ":module-container pageClass"
                }),
                l(r, m, n, "format-count", [o(r, n, "pagination.count")], {}),
                h(r, v, n, "if", [o(r, n, "isEmpty")], {}, e, null ),
                h(r, g, n, "each", [o(r, n, "posts")], {}, t, null ),
                h(r, b, n, "if", [o(r, n, "pagination.nextPage")], {}, a, null ),
                u
            }
        }
    }())
}),
define("vine-ember/templates/search/posts", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-placeholder");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                    return i(t, c, e, "partial", ["timelines/placeholders/empty"], {}),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["post-mobile"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "each", [], {}, e, null ),
                        c
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["grid-post"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "grid-container clearfix");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                        return d(a, s, t, "each", [], {}, e, null ),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                    o
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "fullscreen");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("h3")
                      , r = e.createTextNode("TV Mode");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon-tv"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["openFullscreen"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.element
                  , o = c.content
                  , l = c.get
                  , h = c.block
                  , u = c.inline;
                d.detectNamespace(i);
                var p;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (p = this.build(d),
                this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0),
                this.cachedFragment && (p = d.cloneNode(this.cachedFragment, !0))) : p = this.build(d);
                var m = d.childAt(p, [0])
                  , v = d.createMorphAt(m, 1, 1)
                  , g = d.createMorphAt(m, 3, 3)
                  , b = d.createMorphAt(m, 5, 5)
                  , C = d.createMorphAt(p, 2, 2, i);
                return d.insertBoundary(p, null ),
                s(r, m, n, "bind-attr", [], {
                    "class": ":posts-container :grid pagination.nextPage::no-pagination"
                }),
                o(r, v, n, "yield"),
                h(r, g, n, "if", [l(r, n, "isEmpty")], {}, e, t),
                u(r, b, n, "partial", ["pagination"], {}),
                h(r, C, n, "if", [l(r, n, "fullscreenAvailable")], {}, a, null ),
                p
            }
        }
    }())
}),
define("vine-ember/templates/search/tags", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "no-results");
                    var n = e.createTextNode('No results for "');
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode('"');
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                    return i(t, c, e, "query"),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 0, 0, a);
                    return n.insertBoundary(c, null ),
                    n.insertBoundary(c, 0),
                    d(t, s, e, "tv-link", [], {
                        route: "tag",
                        routeParam: i(t, e, "tag"),
                        text: i(t, e, "hashtag")
                    }),
                    c
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n              ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "icon-tv"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "max-count", [i(t, e, "pagination.count")], {
                                max: 499,
                                display: 500,
                                unit: "Post"
                            }),
                            c
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "icon-tag"),
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 2, 2, a);
                            return i(t, c, e, "tag"),
                            d
                        }
                    }
                }()
                  , a = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var s = n.createMorphAt(c, 0, 0, a);
                                return n.insertBoundary(c, null ),
                                n.insertBoundary(c, 0),
                                d(t, s, e, "mouseover-video", [], {
                                    post: i(t, e, "this")
                                }),
                                c
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("div");
                            e.setAttribute(a, "class", "row");
                            var n = e.createTextNode("\n                ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n              ");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var s = r.createMorphAt(r.childAt(c, [0]), 1, 1);
                            return d(a, s, t, "each", [], {
                                itemController: "post"
                            }, e, null ),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("article")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(n, r, i) {
                        var d = r.dom
                          , c = r.hooks
                          , s = c.subexpr
                          , o = c.get
                          , l = c.block;
                        d.detectNamespace(i);
                        var h;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                        this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                        this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                        var u = d.createMorphAt(d.childAt(h, [1]), 1, 1)
                          , p = d.createMorphAt(d.childAt(h, [3]), 1, 1)
                          , m = d.createMorphAt(d.childAt(h, [5]), 1, 1);
                        return l(r, u, n, "link-to", ["tag", o(r, n, "tag"), s(r, n, "query-params", [], {
                            mode: "tv"
                        })], {}, e, null ),
                        l(r, p, n, "link-to", ["tag", o(r, n, "tag")], {}, t, null ),
                        l(r, m, n, "each", [o(r, n, "rows")], {}, a, null ),
                        h
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timelines");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                    return c(a, o, t, "each", [d(a, t, "timelines")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("section");
                e.setAttribute(a, "id", "tags"),
                e.setAttribute(a, "class", "module-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "clearfix");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "tags-container");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "class", "count small");
                var d = e.createComment("");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4")
                  , d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span");
                e.setAttribute(d, "class", "icon-tag"),
                e.appendChild(i, d);
                var d = e.createTextNode("Tags\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.inline
                  , l = c.block;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0, 1])
                  , p = d.childAt(u, [1])
                  , m = d.createMorphAt(d.childAt(p, [1]), 0, 0)
                  , v = d.createMorphAt(p, 5, 5)
                  , g = d.createMorphAt(p, 7, 7)
                  , b = d.createMorphAt(u, 3, 3);
                return o(r, m, n, "format-count", [s(r, n, "pagination.count")], {}),
                l(r, v, n, "unless", [s(r, n, "posts.length")], {}, e, null ),
                l(r, g, n, "each", [s(r, n, "posts")], {}, t, null ),
                l(r, b, n, "unless", [s(r, n, "isMobile")], {}, a, null ),
                h
            }
        }
    }())
}),
define("vine-ember/templates/search/users", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "no-results");
                    var n = e.createTextNode('No results for "');
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode('"');
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                    return i(t, c, e, "params.query"),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createElement("span");
                                return e.setAttribute(a, "class", "icon-verified"),
                                e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                                r
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n        ");
                            e.appendChild(t, a);
                            var a = e.createElement("h3")
                              , n = e.createTextNode("\n          ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.inline
                              , s = i.content
                              , o = i.block;
                            r.detectNamespace(n);
                            var l;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                            this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                            this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                            var h = r.childAt(l, [3])
                              , u = r.createMorphAt(l, 1, 1, n)
                              , p = r.createMorphAt(h, 1, 1)
                              , m = r.createMorphAt(h, 2, 2)
                              , v = r.createMorphAt(l, 5, 5, n);
                            return c(a, u, t, "secure-img", [], {
                                src: d(a, t, "avatarUrl"),
                                "class": "avatar"
                            }),
                            s(a, p, t, "username"),
                            o(a, m, t, "if", [d(a, t, "verified")], {}, e, null ),
                            s(a, v, t, "location"),
                            l
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "link-user", [], {
                            user: d(a, t, "this")
                        }, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "user-hover", [], {
                        color: d(a, t, "backgroundColor")
                    }, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("section");
                e.setAttribute(a, "id", "users"),
                e.setAttribute(a, "class", "module-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "class", "count small");
                var r = e.createComment("");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "icon-profile"),
                e.appendChild(n, r);
                var r = e.createTextNode("People\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.inline
                  , o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.childAt(l, [0])
                  , u = i.createMorphAt(i.childAt(h, [1]), 0, 0)
                  , p = i.createMorphAt(h, 5, 5)
                  , m = i.createMorphAt(h, 6, 6)
                  , v = i.createMorphAt(h, 8, 8);
                return s(n, u, a, "format-count", [c(n, a, "pagination.count")], {}),
                o(n, p, a, "if", [c(n, a, "isEmpty")], {}, e, null ),
                o(n, m, a, "each", [c(n, a, "posts")], {}, t, null ),
                s(n, v, a, "partial", ["pagination"], {}),
                l
            }
        }
    }())
}),
define("vine-ember/templates/search/venues", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("h3");
                    e.setAttribute(a, "class", "no-results");
                    var n = e.createTextNode('No results for "');
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode('"');
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                    return i(t, c, e, "query"),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 0, 0, a);
                    return n.insertBoundary(c, null ),
                    n.insertBoundary(c, 0),
                    d(t, s, e, "tv-link", [], {
                        route: "venue",
                        routeParam: i(t, e, "foursquareVenueId"),
                        text: i(t, e, "venueName")
                    }),
                    c
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n              ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "icon-tv"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(c, 1, 1, a);
                            return d(t, s, e, "max-count", [i(t, e, "pagination.count")], {
                                max: 499,
                                display: 500,
                                unit: "Post"
                            }),
                            c
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "icon-venue"),
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 2, 2, a);
                            return i(t, c, e, "venueName"),
                            d
                        }
                    }
                }()
                  , a = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var s = n.createMorphAt(c, 0, 0, a);
                                return n.insertBoundary(c, null ),
                                n.insertBoundary(c, 0),
                                d(t, s, e, "mouseover-video", [], {
                                    post: i(t, e, "this")
                                }),
                                c
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("div");
                            e.setAttribute(a, "class", "row");
                            var n = e.createTextNode("\n                ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n              ");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var s = r.createMorphAt(r.childAt(c, [0]), 1, 1);
                            return d(a, s, t, "each", [], {
                                itemController: "post"
                            }, e, null ),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("article")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(n, r, i) {
                        var d = r.dom
                          , c = r.hooks
                          , s = c.subexpr
                          , o = c.get
                          , l = c.block;
                        d.detectNamespace(i);
                        var h;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                        this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                        this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                        var u = d.createMorphAt(d.childAt(h, [1]), 1, 1)
                          , p = d.createMorphAt(d.childAt(h, [3]), 1, 1)
                          , m = d.createMorphAt(d.childAt(h, [5]), 1, 1);
                        return l(r, u, n, "link-to", ["venue", o(r, n, "foursquareVenueId"), s(r, n, "query-params", [], {
                            mode: "tv"
                        })], {}, e, null ),
                        l(r, p, n, "link-to", ["venue", o(r, n, "foursquareVenueId")], {}, t, null ),
                        l(r, m, n, "each", [o(r, n, "rows")], {}, a, null ),
                        h
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timelines");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                    return c(a, o, t, "each", [d(a, t, "timelines")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("section");
                e.setAttribute(a, "id", "venues"),
                e.setAttribute(a, "class", "module-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "clearfix");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "tags-container");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "class", "count small");
                var d = e.createComment("");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4")
                  , d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span");
                e.setAttribute(d, "class", "icon-venue"),
                e.appendChild(i, d);
                var d = e.createTextNode("Locations\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.inline
                  , l = c.block;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0, 1])
                  , p = d.childAt(u, [1])
                  , m = d.createMorphAt(d.childAt(p, [1]), 0, 0)
                  , v = d.createMorphAt(p, 5, 5)
                  , g = d.createMorphAt(p, 6, 6)
                  , b = d.createMorphAt(u, 3, 3);
                return o(r, m, n, "format-count", [s(r, n, "pagination.count")], {}),
                l(r, v, n, "unless", [s(r, n, "posts.length")], {}, e, null ),
                l(r, g, n, "each", [s(r, n, "posts")], {}, t, null ),
                l(r, b, n, "unless", [s(r, n, "isMobile")], {}, a, null ),
                h
            }
        }
    }())
}),
define("vine-ember/templates/search", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("section");
                e.setAttribute(a, "id", "search");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("form");
                e.setAttribute(n, "class", "search");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "type", "submit"),
                e.setAttribute(r, "class", "clear icon-search"),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                return e.appendChild(a, n),
                e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.element
                  , d = r.get
                  , c = r.inline
                  , s = r.content;
                n.detectNamespace(a);
                var o;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (o = this.build(n),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = n.cloneNode(this.cachedFragment, !0))) : o = this.build(n);
                var l = n.childAt(o, [0])
                  , h = n.childAt(l, [1])
                  , u = n.createMorphAt(h, 1, 1)
                  , p = n.createMorphAt(l, 3, 3);
                return i(t, h, e, "action", ["search"], {
                    on: "submit"
                }),
                c(t, u, e, "view", ["search-input"], {
                    placeholder: "Search",
                    value: d(t, e, "query")
                }),
                s(t, p, e, "outlet"),
                o
            }
        }
    }())
}),
define("vine-ember/templates/settings", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div")
                      , n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.content;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.childAt(c, [1])
                      , o = n.createMorphAt(s, 1, 1);
                    return i(t, s, e, "action", ["onMessageClick"], {}),
                    i(t, s, e, "bind-attr", [], {
                        "class": "apiError:error:success :confirm-message"
                    }),
                    d(t, o, e, "apiMessage"),
                    c
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "secure-img", [], {
                        src: i(t, e, "currentUser.avatarUrl"),
                        "class": "avatar"
                    }),
                    c
                }
            }
        }()
          , a = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "small cancel");
                    var n = e.createTextNode("Cancel");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n        ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "small");
                    var n = e.createTextNode("Save");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1])
                      , s = n.childAt(d, [3]);
                    return i(t, c, e, "action", ["toggleEditProfile"], {}),
                    i(t, s, e, "action", ["saveProfile"], {}),
                    d
                }
            }
        }()
          , n = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("        ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "small edit");
                    var n = e.createTextNode("Edit");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1]);
                    return i(t, c, e, "action", ["toggleEditProfile"], {}),
                    d
                }
            }
        }()
          , r = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("form");
                    e.setAttribute(a, "name", "profile"),
                    e.setAttribute(a, "class", "profile-form");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createElement("br");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createElement("br");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [1])
                      , l = n.createMorphAt(o, 1, 1)
                      , h = n.createMorphAt(o, 4, 4)
                      , u = n.createMorphAt(o, 7, 7);
                    return i(t, o, e, "action", ["saveProfile"], {
                        on: "submit"
                    }),
                    c(t, l, e, "input", [], {
                        value: d(t, e, "usernameText"),
                        name: "username",
                        placeholder: "Name",
                        "class": "username"
                    }),
                    c(t, h, e, "textarea", [], {
                        value: d(t, e, "descriptionText"),
                        name: "description",
                        placeholder: "Description",
                        "class": "description__editor"
                    }),
                    c(t, u, e, "input", [], {
                        value: d(t, e, "locationText"),
                        name: "location",
                        placeholder: "Location"
                    }),
                    s
                }
            }
        }()
          , i = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("br");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return n.insertBoundary(c, null ),
                        d(t, s, e, "replace-emoji", [i(t, e, "currentUser.location")], {}),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h2");
                    e.setAttribute(a, "class", "username");
                    var n = e.createElement("strong")
                      , r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h5");
                    e.setAttribute(a, "class", "description");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.inline
                      , s = i.block;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.childAt(o, [3])
                      , h = r.createMorphAt(r.childAt(o, [1, 0]), 0, 0)
                      , u = r.createMorphAt(l, 1, 1)
                      , p = r.createMorphAt(l, 3, 3);
                    return c(a, h, t, "replace-emoji", [d(a, t, "currentUser.username")], {}),
                    c(a, u, t, "replace-emoji", [d(a, t, "currentUser.description")], {}),
                    s(a, p, t, "if", [d(a, t, "currentUser.location")], {}, e, null ),
                    o
                }
            }
        }()
          , d = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("form");
                    e.setAttribute(a, "name", "email");
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createElement("button");
                    e.setAttribute(n, "type", "button"),
                    e.setAttribute(n, "class", "small cancel");
                    var r = e.createTextNode("Cancel");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createElement("button");
                    e.setAttribute(n, "class", "small"),
                    e.setAttribute(n, "type", "submit");
                    var r = e.createTextNode("Save");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n          ");
                    e.appendChild(t, a);
                    var a = e.createElement("h5");
                    e.setAttribute(a, "class", "error");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.element
                      , d = r.get
                      , c = r.inline
                      , s = r.content;
                    n.detectNamespace(a);
                    var o;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (o = this.build(n),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = n.cloneNode(this.cachedFragment, !0))) : o = this.build(n);
                    var l = n.childAt(o, [1])
                      , h = n.childAt(l, [3])
                      , u = n.createMorphAt(l, 1, 1)
                      , p = n.createMorphAt(n.childAt(o, [3]), 0, 0);
                    return i(t, l, e, "action", ["setEmail"], {
                        on: "submit"
                    }),
                    c(t, u, e, "my-input", [], {
                        value: d(t, e, "emailText"),
                        name: "email",
                        email: !0,
                        placeholder: "Email"
                    }),
                    i(t, h, e, "action", ["toggleEditEmail"], {}),
                    s(t, p, e, "emailError"),
                    o
                }
            }
        }()
          , c = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("              ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "currentUser.email"),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("              set email address\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("h4")
                      , n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.element
                      , s = d.get
                      , o = d.block;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.childAt(l, [1])
                      , u = i.createMorphAt(h, 1, 1);
                    return c(n, h, a, "action", ["toggleEditEmail"], {}),
                    o(n, u, a, "if", [s(n, a, "currentUser.email")], {}, e, t),
                    l
                }
            }
        }()
          , s = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h4")
                          , n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                        return i(t, c, e, "passwordReset"),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("button")
                          , n = e.createTextNode("Reset Password");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [1]);
                        return i(t, c, e, "action", ["resetPassword"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "setting-row");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("h4");
                    e.setAttribute(n, "class", "label");
                    var r = e.createTextNode("Password");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "setting reset-password");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("      ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(i.childAt(o, [1, 3]), 1, 1);
                    return s(n, l, a, "if", [c(n, a, "passwordReset")], {}, e, t),
                    o
                }
            }
        }()
          , o = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("On");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , l = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("Off");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , h = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("On");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , u = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("Off");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , p = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 0, 0, a);
                    return n.insertBoundary(c, null ),
                    n.insertBoundary(c, 0),
                    d(t, s, e, "profile-background", [], {
                        color: i(t, e, "color"),
                        isCurrentColor: i(t, e, "isCurrentColor")
                    }),
                    c
                }
            }
        }()
          , m = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("On");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , v = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("Off");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , g = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("          ");
                    e.appendChild(t, a);
                    var a = e.createElement("h4")
                      , n = e.createTextNode("\n            ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("/");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n          ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [1])
                      , s = n.createMorphAt(c, 1, 1)
                      , o = n.createMorphAt(c, 3, 3);
                    return i(t, s, e, "config.SECURE_HOSTNAME"),
                    i(t, o, e, "currentUser.vanityUrl"),
                    d
                }
            }
        }()
          , b = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "partial", ["custom-url/reserve-form"], {}),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "set-url"),
                        e.setAttribute(a, "type", "button");
                        var n = e.createTextNode("Set URL");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.childAt(d, [1]);
                        return i(t, c, e, "action", ["setUrl"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "reservingUrl")], {}, e, t),
                    o
                }
            }
        }()
          , C = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "setting-row clearfix");
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createElement("h4");
                    e.setAttribute(n, "class", "setting__label");
                    var r = e.createTextNode("\n          Page Moderation\n          ");
                    e.appendChild(n, r);
                    var r = e.createElement("p");
                    e.setAttribute(r, "class", "setting__label-description");
                    var i = e.createTextNode("Block posts or comments containing these words");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n        ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n        ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(n.childAt(c, [1]), 3, 3);
                    return d(t, s, e, "banned-words", [], {
                        ban: "banWords",
                        unban: "unbanWords",
                        bannedWords: i(t, e, "bannedWords"),
                        apiError: i(t, e, "apiError"),
                        disableKeydown: i(t, e, "disableEditor")
                    }),
                    c
                }
            }
        }()
          , f = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["custom-url/reserve-messages"], {}),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "settings-wrapper");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "username-row");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "edit-profile-buttons");
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "id", "settings-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("hr");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Email");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "setting email");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Posts are private");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div")
                  , c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createComment("");
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "toggle"),
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Remixes are disabled");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div")
                  , c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createComment("");
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "toggle"),
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Profile color");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting profile-background");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Hide Twitter Account");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div")
                  , c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createComment("");
                e.appendChild(d, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(d, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "toggle"),
                e.appendChild(d, c);
                var c = e.createTextNode("\n        ");
                e.appendChild(d, c),
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Custom URL");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting custom-url");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(F, N, T) {
                var x = N.dom
                  , A = N.hooks
                  , k = A.get
                  , E = A.block
                  , R = A.element;
                x.detectNamespace(T);
                var M;
                N.useFragmentCache && x.canClone ? (null === this.cachedFragment && (M = this.build(x),
                this.hasRendered ? this.cachedFragment = M : this.hasRendered = !0),
                this.cachedFragment && (M = x.cloneNode(this.cachedFragment, !0))) : M = this.build(x);
                var y = x.childAt(M, [2])
                  , w = x.childAt(y, [7])
                  , B = x.childAt(w, [7, 3, 1])
                  , P = x.childAt(w, [9, 3, 1])
                  , L = x.childAt(w, [13, 3, 1])
                  , H = x.createMorphAt(M, 0, 0, T)
                  , D = x.createMorphAt(y, 1, 1)
                  , S = x.createMorphAt(x.childAt(y, [3, 1]), 1, 1)
                  , _ = x.createMorphAt(y, 5, 5)
                  , I = x.createMorphAt(x.childAt(w, [3, 3]), 1, 1)
                  , U = x.createMorphAt(w, 5, 5)
                  , V = x.createMorphAt(B, 1, 1)
                  , $ = x.createMorphAt(P, 1, 1)
                  , O = x.createMorphAt(x.childAt(w, [11, 3]), 1, 1)
                  , q = x.createMorphAt(L, 1, 1)
                  , j = x.createMorphAt(x.childAt(w, [15, 3]), 1, 1)
                  , z = x.createMorphAt(w, 17, 17)
                  , W = x.createMorphAt(w, 19, 19);
                return x.insertBoundary(M, 0),
                E(N, H, F, "if", [k(N, F, "apiMessage")], {}, e, null ),
                E(N, D, F, "if", [k(N, F, "currentUser.avatarUrl")], {}, t, null ),
                E(N, S, F, "if", [k(N, F, "editingProfile")], {}, a, n),
                E(N, _, F, "if", [k(N, F, "editingProfile")], {}, r, i),
                E(N, I, F, "if", [k(N, F, "editingEmail")], {}, d, c),
                E(N, U, F, "if", [k(N, F, "currentUser.email")], {}, s, null ),
                R(N, B, F, "bind-attr", [], {
                    "class": ":switch currentUser.private:on:off"
                }),
                R(N, B, F, "action", ["togglePrivate"], {}),
                E(N, V, F, "if", [k(N, F, "currentUser.private")], {}, o, l),
                R(N, P, F, "bind-attr", [], {
                    "class": ":switch currentUser.remixDisabled:on:off"
                }),
                R(N, P, F, "action", ["toggleRemixDisabled"], {}),
                E(N, $, F, "if", [k(N, F, "currentUser.remixDisabled")], {}, h, u),
                E(N, O, F, "each", [k(N, F, "profileColors")], {}, p, null ),
                R(N, L, F, "bind-attr", [], {
                    "class": ":switch currentUser.hiddenTwitter:on:off"
                }),
                R(N, L, F, "action", ["toggleHiddenTwitter"], {}),
                E(N, q, F, "if", [k(N, F, "currentUser.hiddenTwitter")], {}, m, v),
                E(N, j, F, "if", [k(N, F, "currentUser.vanityUrl")], {}, g, b),
                E(N, z, F, "if", [k(N, F, "hasHellbanEnabled")], {}, C, null ),
                E(N, W, F, "if", [k(N, F, "reservingUrl")], {}, f, null ),
                M
            }
        }
    }())
}),
define("vine-ember/templates/splash", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("Posted by ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return n.insertBoundary(d, null ),
                        i(t, c, e, "currentPost.username"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "splash-attribution");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                    return c(a, o, t, "link-user", [], {
                        user: d(a, t, "currentPost")
                    }, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "video-container continuous"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "video-overlay"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "splash-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "splash-content");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("a");
                e.setAttribute(r, "href", "http://get.vine.co");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("p");
                e.setAttribute(r, "class", "subtitle");
                var i = e.createTextNode("Explore a world of beautiful, looping videos.");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.inline
                  , c = i.get
                  , s = i.element
                  , o = i.content
                  , l = i.block;
                r.detectNamespace(n);
                var h;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (h = this.build(r),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = r.cloneNode(this.cachedFragment, !0))) : h = this.build(r);
                var u = r.childAt(h, [2])
                  , p = r.childAt(h, [6, 1])
                  , m = r.createMorphAt(h, 0, 0, n)
                  , v = r.createMorphAt(r.childAt(p, [1]), 1, 1)
                  , g = r.createMorphAt(p, 5, 5)
                  , b = r.createMorphAt(h, 8, 8, n);
                return r.insertBoundary(h, null ),
                r.insertBoundary(h, 0),
                d(a, m, t, "render", ["splash/playing-vine"], {}),
                s(a, u, t, "bind-attr", [], {
                    style: c(a, t, "currentPost.backgroundImageStyle")
                }),
                d(a, v, t, "cdn-img", [], {
                    src: "images/vine_logo-73a74c837b9cc00532d5e211d7db9110.png",
                    width: "355",
                    height: "130",
                    "class": "logo-image"
                }),
                o(a, g, t, "download-buttons"),
                l(a, b, t, "if", [c(a, t, "currentPost")], {}, e, null ),
                h
            }
        }
    }())
}),
define("vine-ember/templates/time-and-location", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 0, 0, a);
                        return n.insertBoundary(c, null ),
                        n.insertBoundary(c, 0),
                        d(t, s, e, "format-date", [i(t, e, "created")], {}),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 1, 1, n);
                    return c(a, o, t, "link-to", ["permalink-post", d(a, t, "shortId")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return d(t, s, e, "format-date", [i(t, e, "created")], {}),
                    c
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "venueName"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      at ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 1, 1, n);
                        return c(a, o, t, "link-to", ["venue", d(a, t, "foursquareVenueId")], {}, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "venueName"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "class", "location");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                    return s(n, l, a, "if", [c(n, a, "foursquareVenueId")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("span");
                e.setAttribute(a, "class", "time");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.createMorphAt(d.childAt(l, [0]), 1, 1)
                  , u = d.createMorphAt(l, 2, 2, i);
                return d.insertBoundary(l, null ),
                o(r, h, n, "if", [s(r, n, "shortId")], {}, e, t),
                o(r, u, n, "if", [s(r, n, "venueName")], {}, a, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/timeline", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "render", ["splash/playing-vine"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "if", [d(a, t, "headerPost")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "partial", ["timelines/posts"], {}),
                    d
                }
            }
        }()
          , a = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "partial", ["timelines/posts"], {}),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "partial", ["timelines/fullscreen"], {}),
                        d
                    }
                }
            }()
              , a = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "partial", ["timelines/grid"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(n, r, i) {
                    var d = r.dom
                      , c = r.hooks
                      , s = c.get
                      , o = c.inline
                      , l = c.block;
                    d.detectNamespace(i);
                    var h;
                    r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                    this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                    this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                    var u = d.createMorphAt(h, 1, 1, i)
                      , p = d.createMorphAt(h, 3, 3, i)
                      , m = d.createMorphAt(h, 5, 5, i)
                      , v = d.createMorphAt(h, 7, 7, i)
                      , g = d.createMorphAt(h, 9, 9, i);
                    return o(r, u, n, "view-mode-toggles", [], {
                        mode: s(r, n, "mode")
                    }),
                    l(r, p, n, "if", [s(r, n, "isListMode")], {}, e, null ),
                    l(r, m, n, "if", [s(r, n, "isTvMode")], {}, t, null ),
                    l(r, v, n, "if", [s(r, n, "isGridMode")], {}, a, null ),
                    o(r, g, n, "partial", ["footer"], {}),
                    h
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block
                  , l = c.inline
                  , h = c.element;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [6])
                  , m = d.createMorphAt(u, 0, 0, i)
                  , v = d.createMorphAt(u, 2, 2, i)
                  , g = d.createMorphAt(u, 4, 4, i)
                  , b = d.createMorphAt(p, 1, 1)
                  , C = d.createMorphAt(p, 3, 3)
                  , f = d.createMorphAt(p, 5, 5)
                  , F = d.createMorphAt(p, 7, 7);
                return d.insertBoundary(u, 0),
                o(r, m, n, "unless", [s(r, n, "isMobile")], {}, e, null ),
                l(r, v, n, "outlet", ["customStyles"], {}),
                l(r, g, n, "outlet", ["timelineHeader"], {}),
                h(r, p, n, "bind-attr", [], {
                    "class": ":timeline-content isTvMode:is-fullscreen hasToggles"
                }),
                l(r, b, n, "outlet", ["timelineToggles"], {}),
                l(r, C, n, "outlet", ["timelineNotification"], {}),
                o(r, f, n, "if", [s(r, n, "isMobile")], {}, t, a),
                l(r, F, n, "outlet", ["timelineFooter"], {}),
                u
            }
        }
    }())
}),
define("vine-ember/templates/timelines/custom-styles/channel", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    .post .post-actions .action.like span:nth-of-type(2),\n    .post .post-actions .action.revine span:first-of-type,\n    .post .post-actions .action.share.active span,\n    .comments-container a,\n    .post-description a,\n    .description a,\n    .post-social-metrics a:hover,\n    .post .user-info-new a:hover,\n    .post .venue a:hover,\n    .post .more-actions .icon:hover,\n    .tv-mode a {\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n    .comments-container a:hover,\n    .post-description a:hover,\n    .description a:hover {\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    #outer-wrapper.mobile header,\n    .pagination-container .pagination {\n      background-color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n    .pagination-container .pagination:hover, .pagination-container .pagination.pagination-loading { background-color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("; }\n\n    .colorize-header header {\n      background-color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .view-mode-toggles i:hover,\n    .view-mode-toggles i.active,\n    .colorize-header .global-search .search .icon-search,\n    .colorize-header .login-link:hover {\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    #outer-wrapper:not(.colorize-header) .nav-buttons button:hover {\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a)
                          , s = n.createMorphAt(d, 3, 3, a)
                          , o = n.createMorphAt(d, 5, 5, a)
                          , l = n.createMorphAt(d, 7, 7, a)
                          , h = n.createMorphAt(d, 9, 9, a)
                          , u = n.createMorphAt(d, 11, 11, a)
                          , p = n.createMorphAt(d, 13, 13, a);
                        return i(t, c, e, "backgroundColor"),
                        i(t, s, e, "backgroundColorHover"),
                        i(t, o, e, "backgroundColor"),
                        i(t, l, e, "backgroundColorHover"),
                        i(t, h, e, "backgroundColor"),
                        i(t, u, e, "backgroundColor"),
                        i(t, p, e, "backgroundColor"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "with", [d(a, t, "channel")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "custom-styles", [], {
                    modelId: d(a, t, "channel.channelIdStr")
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/timelines/custom-styles/list", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    .timeline-header.list .timeline-header-content {\n      background-color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n      background-image: url('");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("');\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a)
                          , s = n.createMorphAt(d, 3, 3, a)
                          , o = n.createMorphAt(d, 5, 5, a);
                        return i(t, c, e, "backgroundColor"),
                        i(t, s, e, "secureSplashImageUrl"),
                        i(t, o, e, "fontColor"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "with", [d(a, t, "list")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "custom-styles", [], {
                    modelId: d(a, t, "list.timelineIdStr")
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/timelines/custom-styles/trends", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    .timeline-header.list .timeline-header-content {\n      background-color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n      background-image: url('");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("');\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .colorize-header header {\n      background-color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n    .colorize-header .global-search .search .icon-search,\n    .colorize-header .login-link:hover {\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a)
                          , s = n.createMorphAt(d, 3, 3, a)
                          , o = n.createMorphAt(d, 5, 5, a)
                          , l = n.createMorphAt(d, 7, 7, a)
                          , h = n.createMorphAt(d, 9, 9, a);
                        return i(t, c, e, "backgroundColor"),
                        i(t, s, e, "secureSplashImageUrl"),
                        i(t, o, e, "fontColor"),
                        i(t, l, e, "backgroundColor"),
                        i(t, h, e, "backgroundColor"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "with", [d(a, t, "header")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "custom-styles", [], {}, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/custom-styles/user", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    .post .post-actions .action.like.active span:nth-of-type(2),\n    .post .post-actions .action.revine.active span:first-of-type,\n    .post .post-actions .action.share.active span,\n    .is-fullscreen .username a,\n    .post .user-info-new a:hover,\n    .comments-container a strong,\n    .post .more-actions .icon:hover,\n    button.follow-button-large.following,\n    button.follow-button-large.follow-requested,\n    button.follow-button-large.follow:hover,\n    button.follow-button-large.settings,\n    button.follow-button.follow,\n    button.follow-button.following:hover,\n    button.follow-button.follow-requested:hover,\n    button.follow-button.settings:hover {\n      color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .timeline-header .timeline-header-content,\n    .pagination-container .pagination, .follow, #outer-wrapper.mobile header,\n    button.follow-button.following,\n    button.follow-button.follow-requested,\n    button.follow-button.settings,\n    button.follow-button.follow:hover {\n      background-color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    button.follow-button.following,\n    button.follow-button.follow-requested,\n    button.follow-button.settings,\n    button.follow-button.follow:hover {\n      border-color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n    }\n\n    .post-description a,\n    .post-social-metrics a:hover,\n    .description a,\n    .comments-container a {\n      color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .comments-container a:hover,\n    .post-description a:hover,\n    .description a:hover {\n      color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .pagination-container .pagination:hover,\n    .pagination-container .pagination.pagination-loading {\n      background-color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .colorize-header header {\n      background-color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .timeline-toggles div.active a,\n    .timeline-toggles a:hover,\n    .view-mode-toggles i:hover,\n    .view-mode-toggles i.active,\n    .colorize-header .global-search .search .icon-search,\n    .colorize-header .login-link:hover {\n      color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    #outer-wrapper:not(.colorize-header) .nav-buttons button:hover {\n      color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a)
                          , s = n.createMorphAt(d, 3, 3, a)
                          , o = n.createMorphAt(d, 5, 5, a)
                          , l = n.createMorphAt(d, 7, 7, a)
                          , h = n.createMorphAt(d, 9, 9, a)
                          , u = n.createMorphAt(d, 11, 11, a)
                          , p = n.createMorphAt(d, 13, 13, a)
                          , m = n.createMorphAt(d, 15, 15, a)
                          , v = n.createMorphAt(d, 17, 17, a);
                        return i(t, c, e, "backgroundColor"),
                        i(t, s, e, "backgroundColor"),
                        i(t, o, e, "backgroundColor"),
                        i(t, l, e, "linkColor"),
                        i(t, h, e, "linkColorHover"),
                        i(t, u, e, "backgroundColorHover"),
                        i(t, p, e, "backgroundColor"),
                        i(t, m, e, "backgroundColor"),
                        i(t, v, e, "backgroundColor"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "with", [d(a, t, "user")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "custom-styles", [], {
                    modelId: d(a, t, "user.userIdStr")
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/timelines/footers/trend", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.inline;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var c = n.createMorphAt(d, 0, 0, a);
                return n.insertBoundary(d, 0),
                i(t, c, e, "render", ["trends/footer"], {}),
                d
            }
        }
    }())
}),
define("vine-ember/templates/timelines/footers/trends", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "form-submitted");
                    var n = e.createTextNode("Thanks!");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "error");
                        var n = e.createTextNode("\n        Oops something went wrong! Please try again.");
                        e.appendChild(a, n);
                        var n = e.createElement("br");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("em")
                          , r = e.createTextNode('"');
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode('"');
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(n.childAt(d, [1, 3]), 1, 1);
                        return i(t, c, e, "error"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("form");
                    e.setAttribute(a, "class", "subscribe");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("button");
                    e.setAttribute(n, "type", "submit"),
                    e.setAttribute(n, "class", "clear icon-arrow_right"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.element
                      , c = i.get
                      , s = i.inline
                      , o = i.block;
                    r.detectNamespace(n);
                    var l;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                    var h = r.childAt(l, [1])
                      , u = r.createMorphAt(h, 1, 1)
                      , p = r.createMorphAt(l, 3, 3, n);
                    return r.insertBoundary(l, null ),
                    d(a, h, t, "action", ["subscribeEmail"], {
                        on: "submit"
                    }),
                    s(a, u, t, "my-input", [], {
                        placeholder: "Email",
                        value: c(a, t, "email")
                    }),
                    o(a, p, t, "if", [c(a, t, "error")], {}, e, null ),
                    l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "trends-footer");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "title");
                var r = e.createTextNode("See what's blowing up");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "subtitle");
                var r = e.createTextNode("\n    Enter your email address to get updates from Vine\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(i.childAt(o, [0]), 5, 5);
                return s(n, l, a, "if", [c(n, a, "emailSubscribed")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/timelines/fullscreen", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "tv-mode");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.inline;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.createMorphAt(n.childAt(c, [0]), 1, 1);
                return d(t, s, e, "view", ["fullscreen-post"], {
                    post: i(t, e, "currentPost"),
                    fbUrl: i(t, e, "fbUrl"),
                    tweetUrl: i(t, e, "tweetUrl")
                }),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/grid", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "view", ["post-mobile"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var s = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null ),
                    r.insertBoundary(c, 0),
                    d(a, s, t, "each", [], {}, e, null ),
                    c
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "timeline-placeholder");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(n.childAt(c, [1]), 0, 0);
                        return d(t, s, e, "partial", [i(t, e, "placeholderTemplate")], {}),
                        c
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "view", ["grid-post"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "each", [], {}, e, null ),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "grid-container clearfix");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                    return s(n, l, a, "if", [c(n, a, "placeholderTemplate")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.get
                  , o = d.block
                  , l = d.inline;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0])
                  , p = i.createMorphAt(u, 1, 1)
                  , m = i.createMorphAt(u, 3, 3);
                return c(n, u, a, "bind-attr", [], {
                    "class": ":posts-container :grid pagination.nextPage::no-pagination"
                }),
                o(n, p, a, "if", [s(n, a, "isMobile")], {}, e, t),
                l(n, m, a, "partial", ["pagination"], {}),
                h
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/audio-track", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-music"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "subtitle");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.childAt(d, [3, 1])
                      , s = n.createMorphAt(n.childAt(c, [1]), 0, 0)
                      , o = n.createMorphAt(n.childAt(c, [3]), 0, 0);
                    return i(t, s, e, "track.artistName"),
                    i(t, o, e, "track.trackName"),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "timeline-header", [], {
                    cssClass: "audio-track"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/channel", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline
                      , c = r.content;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.createMorphAt(n.childAt(s, [1]), 1, 1)
                      , l = n.createMorphAt(n.childAt(s, [3, 1, 1]), 0, 0);
                    return d(t, o, e, "secure-img", [], {
                        "class": "icon",
                        src: i(t, e, "channel.channelIconUrl")
                    }),
                    c(t, l, e, "channel.channel"),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "timeline-header", [], {
                    cssClass: "channel",
                    model: d(a, t, "channel")
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/editors-picks", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createTextNode("Editor's Picks");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                    return i(t, c, e, "cdn-img", [], {
                        src: "images/channels/EditorsPicks.svg",
                        "class": "icon"
                    }),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "timeline-header", [], {
                    cssClass: "editors-picks"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/feed", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-feed"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createTextNode("Home Feed");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "timeline-header", [], {
                    cssClass: "feed"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/list", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "video-container"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "background-overlay"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "if", [d(a, t, "headerPost")], {}, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "author");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("span")
                              , r = e.createTextNode("by");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(n.childAt(c, [1]), 2, 2);
                            return d(t, s, e, "user-info", [], {
                                data: i(t, e, "this"),
                                cssClass: "user-info-size-38 user-info-hide-metadata user-info-inherit-color"
                            }),
                            c
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "description");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                            return d(t, s, e, "html-linebreak", [i(t, e, "description")], {}),
                            c
                        }
                    }
                }()
                  , a = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "total-loops");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode(" Loops\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.inline;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.createMorphAt(n.childAt(c, [1]), 1, 1);
                            return d(t, s, e, "commaize-number", [i(t, e, "loops.count")], {}),
                            c
                        }
                    }
                }()
                  , n = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createElement("button");
                                return e.setAttribute(a, "class", "play-fullscreen"),
                                e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                                r
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.subexpr
                              , c = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                            this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var o = r.createMorphAt(s, 1, 1, n);
                            return c(a, o, t, "link-to", [d(a, t, "query-params", [], {
                                mode: "tv"
                            })], {}, e, null ),
                            s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h1");
                        e.setAttribute(a, "class", "title");
                        var n = e.createComment("");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(r, i, d) {
                        var c = i.dom
                          , s = i.hooks
                          , o = s.get
                          , l = s.inline
                          , h = s.block;
                        c.detectNamespace(d);
                        var u;
                        i.useFragmentCache && c.canClone ? (null === this.cachedFragment && (u = this.build(c),
                        this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                        this.cachedFragment && (u = c.cloneNode(this.cachedFragment, !0))) : u = this.build(c);
                        var p = c.createMorphAt(c.childAt(u, [1]), 0, 0)
                          , m = c.createMorphAt(u, 3, 3, d)
                          , v = c.createMorphAt(u, 5, 5, d)
                          , g = c.createMorphAt(u, 7, 7, d)
                          , b = c.createMorphAt(u, 9, 9, d);
                        return c.insertBoundary(u, null ),
                        l(i, p, r, "html-linebreak", [o(i, r, "title")], {}),
                        h(i, m, r, "with", [o(i, r, "createdByUser")], {}, e, null ),
                        h(i, v, r, "if", [o(i, r, "description")], {}, t, null ),
                        h(i, g, r, "if", [o(i, r, "loops")], {}, a, null ),
                        h(i, b, r, "unless", [o(i, r, "isMobile")], {}, n, null ),
                        u
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r)
                      , h = i.createMorphAt(o, 2, 2, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "unless", [c(n, a, "isMobile")], {}, e, null ),
                    s(n, h, a, "with", [c(n, a, "list")], {}, t, null ),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "timeline-header", [], {
                    cssClass: "list",
                    model: d(a, t, "list"),
                    dynamicHeight: !0
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/playlists", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-list"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createTextNode("Playlists");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "timeline-header", [], {
                    cssClass: "playlists"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/popular-now", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createTextNode("Popular Now");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(n.childAt(d, [1, 1]), 1, 1);
                    return i(t, c, e, "cdn-img", [], {
                        src: "images/sidebar/popnow.svg"
                    }),
                    d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "timeline-header", [], {
                    cssClass: "popular-now"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/post-remixes", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-audio_remix"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "subtitle");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [3, 1])
                      , l = n.createMorphAt(n.childAt(o, [1]), 0, 0)
                      , h = n.createMorphAt(n.childAt(o, [3]), 0, 0);
                    return i(t, l, e, "post.username"),
                    c(t, h, e, "replace-emoji", [d(t, e, "post.description")], {}),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "timeline-header", [], {
                    cssClass: "post-remixes"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/post-similar", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("Original Vine by: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return n.insertBoundary(d, null ),
                        i(t, c, e, "post.username"),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-similar_vines"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createTextNode("People also watched");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "subtitle");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(r.childAt(s, [3, 1, 3]), 1, 1);
                    return c(a, o, t, "link-to", ["permalink-post", d(a, t, "post.shortId")], {}, e, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "timeline-header", [], {
                    cssClass: "post-similar"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/tag", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-tag"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "subtitle");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [3, 1])
                      , l = n.createMorphAt(n.childAt(o, [1]), 0, 0)
                      , h = n.createMorphAt(n.childAt(o, [3]), 0, 0);
                    return i(t, l, e, "hashtag"),
                    c(t, h, e, "max-count", [d(t, e, "pagination.count")], {
                        max: 499,
                        display: 500,
                        unit: "Post"
                    }),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "timeline-header", [], {
                    model: d(a, t, "this")
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/trends", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 1, 1, a);
                        return i(t, c, e, "render", ["splash/playing-vine"], {}),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var o = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null ),
                    r.insertBoundary(s, 0),
                    c(a, o, t, "if", [d(a, t, "headerPost")], {}, e, null ),
                    s
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "video-container"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "if", [d(a, t, "headerPost")], {}, e, null ),
                        s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "background-overlay"),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h1");
                    e.setAttribute(a, "class", "title");
                    var n = e.createTextNode("Trends ");
                    e.appendChild(a, n);
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "on");
                    var r = e.createTextNode("on");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode(" ");
                    e.appendChild(a, n);
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "icon-vine_logo"),
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "description");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(t, a, n) {
                    var r = a.dom
                      , i = a.hooks
                      , d = i.get
                      , c = i.block
                      , s = i.content;
                    r.detectNamespace(n);
                    var o;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                    var l = r.createMorphAt(o, 0, 0, n)
                      , h = r.createMorphAt(r.childAt(o, [6]), 1, 1);
                    return r.insertBoundary(o, 0),
                    c(a, l, t, "unless", [d(a, t, "isMobile")], {}, e, null ),
                    s(a, h, t, "header.description"),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r)
                  , h = i.createMorphAt(o, 2, 2, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "unless", [c(n, a, "isMobile")], {}, e, null ),
                s(n, h, a, "timeline-header", [], {
                    cssClass: "list",
                    model: c(n, a, "header"),
                    dynamicHeight: !0
                }, t, null ),
                o
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/user", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "verified");
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-verified"),
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "settings follow-button-large");
                            var n = e.createTextNode("\n          ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "button-icon");
                            var r = e.createElement("span");
                            e.setAttribute(r, "class", "icon-settings"),
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n          Settings\n        ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "link-to", ["settings"], {}, e, null ),
                        c
                    }
                }
            }()
              , a = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "follow-button", [], {
                            user: i(t, e, "user"),
                            cssClass: "follow-button-large"
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "title");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "loops");
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode(" Loops");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "description");
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode(" ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "user-metrics");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "followers");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "metric-count");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "metric-name");
                    var i = e.createTextNode("Followers");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "following");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "metric-count");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "metric-name");
                    var i = e.createTextNode("Following");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(n, r, i) {
                    var d = r.dom
                      , c = r.hooks
                      , s = c.get
                      , o = c.inline
                      , l = c.block
                      , h = c.content;
                    d.detectNamespace(i);
                    var u;
                    r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d),
                    this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0),
                    this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                    var p = d.childAt(u, [3])
                      , m = d.childAt(p, [1])
                      , v = d.childAt(p, [5])
                      , g = d.childAt(u, [5])
                      , b = d.createMorphAt(d.childAt(u, [1]), 1, 1)
                      , C = d.createMorphAt(m, 1, 1)
                      , f = d.createMorphAt(m, 3, 3)
                      , F = d.createMorphAt(d.childAt(p, [3]), 0, 0)
                      , N = d.createMorphAt(v, 0, 0)
                      , T = d.createMorphAt(v, 2, 2)
                      , x = d.createMorphAt(g, 1, 1)
                      , A = d.createMorphAt(d.childAt(g, [3, 1]), 0, 0)
                      , k = d.createMorphAt(d.childAt(g, [5, 1]), 0, 0);
                    return o(r, b, n, "secure-img", [], {
                        "class": "icon",
                        src: s(r, n, "user.secureAvatarUrl")
                    }),
                    o(r, C, n, "replace-emoji", [s(r, n, "user.username")], {}),
                    l(r, f, n, "if", [s(r, n, "user.verified")], {}, e, null ),
                    o(r, F, n, "commaize-number", [s(r, n, "user.loopCount")], {}),
                    o(r, N, n, "replace-emoji", [s(r, n, "user.description")], {}),
                    h(r, T, n, "user.location"),
                    l(r, x, n, "if", [s(r, n, "user.isCurrentUser")], {}, t, a),
                    o(r, A, n, "format-count", [s(r, n, "user.followerCount")], {}),
                    o(r, k, n, "format-count", [s(r, n, "user.followingCount")], {}),
                    u
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var s = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null ),
                r.insertBoundary(c, 0),
                d(a, s, t, "timeline-header", [], {
                    cssClass: "user"
                }, e, null ),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/headers/venue", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "icon-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "icon");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "icon-venue"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-title");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "timeline-title-container");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "title");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "subtitle");
                    var i = e.createComment("");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content
                      , d = r.get
                      , c = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var o = n.childAt(s, [3, 1])
                      , l = n.createMorphAt(n.childAt(o, [1]), 0, 0)
                      , h = n.createMorphAt(n.childAt(o, [3]), 0, 0);
                    return i(t, l, e, "venueName"),
                    c(t, h, e, "max-count", [d(t, e, "pagination.count")], {
                        max: 499,
                        display: 500,
                        unit: "Post"
                    }),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "timeline-header", [], {
                    model: d(a, t, "this"),
                    cssClass: "venue"
                }, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/timelines/placeholders/blocked", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "icon-frowny"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("h2")
                  , n = e.createTextNode("Sorry, you can't access this profile.");
                return e.appendChild(a, n),
                e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom;
                n.detectNamespace(a);
                var r;
                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                r
            }
        }
    }())
}),
define("vine-ember/templates/timelines/placeholders/empty", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 1, 1, a);
                    return i(t, c, e, "noPostsMessage"),
                    d
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    No posts available.\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "icon-frowny"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("h2")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(i.childAt(o, [2]), 1, 1);
                return s(n, l, a, "if", [c(n, a, "noPostsMessage")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/templates/timelines/placeholders/private", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "icon-lock"),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("h2")
                  , n = e.createTextNode("You must be following ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode(" to view these posts.");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.inline;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.createMorphAt(n.childAt(c, [2]), 1, 1);
                return d(t, s, e, "replace-emoji", [i(t, e, "timelineName")], {}),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/posts", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "timeline-placeholder");
                    var n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(n.childAt(c, [1]), 0, 0);
                    return d(t, s, e, "partial", [i(t, e, "placeholderTemplate")], {}),
                    c
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "view", ["post-mobile"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "each", [], {}, e, null ),
                        c
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createComment("");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null ),
                            n.insertBoundary(d, 0),
                            i(t, c, e, "view", ["post"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "each", [], {}, e, null ),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.get
                      , s = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                    this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                    this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null ),
                    i.insertBoundary(o, 0),
                    s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                    o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.get
                  , o = d.block
                  , l = d.inline;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0])
                  , p = i.createMorphAt(u, 1, 1)
                  , m = i.createMorphAt(u, 3, 3);
                return c(n, u, a, "bind-attr", [], {
                    "class": ":posts-container pagination.nextPage::no-pagination"
                }),
                o(n, p, a, "if", [s(n, a, "placeholderTemplate")], {}, e, t),
                l(n, m, a, "partial", ["pagination"], {}),
                h
            }
        }
    }())
}),
define("vine-ember/templates/timelines/sidebars/suspension-sidebar", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.get
                  , d = r.inline;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var s = n.createMorphAt(c, 0, 0, a);
                return n.insertBoundary(c, 0),
                d(t, s, e, "suspension-sidebar", [], {
                    userIdStr: i(t, e, "user.userIdStr")
                }),
                c
            }
        }
    }())
}),
define("vine-ember/templates/timelines/sidebars/user", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "class", "verified");
                    var n = e.createElement("span");
                    e.setAttribute(n, "class", "icon-verified"),
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("br");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(c, 1, 1, a);
                    return n.insertBoundary(c, null ),
                    d(t, s, e, "replace-emoji", [i(t, e, "user.location")], {}),
                    c
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "loops");
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "metric-count");
                                var r = e.createComment("");
                                e.appendChild(n, r),
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "metric-name");
                                var r = e.createTextNode("Loops");
                                e.appendChild(n, r),
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n          ");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var s = n.createMorphAt(n.childAt(c, [1, 1]), 0, 0);
                                return d(t, s, e, "commaize-number", [i(t, e, "loopCount")], {}),
                                c
                            }
                        }
                    }()
                      , t = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "posts");
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "metric-count");
                                var r = e.createComment("");
                                e.appendChild(n, r),
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "metric-name");
                                var r = e.createTextNode("Posts");
                                e.appendChild(n, r),
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n          ");
                                e.appendChild(a, n),
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var s = n.createMorphAt(n.childAt(c, [1, 1]), 0, 0);
                                return d(t, s, e, "format-count", [i(t, e, "postCount")], {}),
                                c
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "follow-metrics");
                            var n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "followers");
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createElement("div");
                            e.setAttribute(r, "class", "metric-count");
                            var i = e.createComment("");
                            e.appendChild(r, i),
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createElement("div");
                            e.setAttribute(r, "class", "metric-name");
                            var i = e.createTextNode("Followers");
                            e.appendChild(r, i),
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "following");
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createElement("div");
                            e.setAttribute(r, "class", "metric-count");
                            var i = e.createComment("");
                            e.appendChild(r, i),
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createElement("div");
                            e.setAttribute(r, "class", "metric-name");
                            var i = e.createTextNode("Following");
                            e.appendChild(r, i),
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(a, n, r) {
                            var i = n.dom
                              , d = n.hooks
                              , c = d.get
                              , s = d.block
                              , o = d.inline;
                            i.detectNamespace(r);
                            var l;
                            n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                            this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                            this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                            var h = i.childAt(l, [1])
                              , u = i.createMorphAt(h, 1, 1)
                              , p = i.createMorphAt(i.childAt(h, [3, 1]), 0, 0)
                              , m = i.createMorphAt(i.childAt(h, [5, 1]), 0, 0);
                            return s(n, u, a, "if", [c(n, a, "loopCount")], {}, e, t),
                            o(n, p, a, "format-count", [c(n, a, "followerCount")], {}),
                            o(n, m, a, "format-count", [c(n, a, "followingCount")], {}),
                            l
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "with", [d(a, t, "user")], {}, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "settings");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "button-icon");
                            var r = e.createElement("div");
                            e.setAttribute(r, "class", "icon-settings"),
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        Settings\n      ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null ),
                        r.insertBoundary(c, 0),
                        d(a, s, t, "link-to", ["settings"], {}, e, null ),
                        c
                    }
                }
            }()
              , a = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.get
                          , d = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var s = n.createMorphAt(c, 1, 1, a);
                        return d(t, s, e, "follow-button", [], {
                            user: i(t, e, "user"),
                            cssClass: "follow-button-large"
                        }),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(n, r, i) {
                    var d = r.dom
                      , c = r.hooks
                      , s = c.get
                      , o = c.block;
                    d.detectNamespace(i);
                    var l;
                    r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                    var h = d.createMorphAt(l, 0, 0, i)
                      , u = d.createMorphAt(l, 2, 2, i);
                    return d.insertBoundary(l, null ),
                    d.insertBoundary(l, 0),
                    o(r, h, n, "if", [s(r, n, "showStats")], {}, e, null ),
                    o(r, u, n, "if", [s(r, n, "user.isCurrentUser")], {}, t, a),
                    l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("h5");
                e.setAttribute(a, "class", "description");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.get
                  , o = c.block
                  , l = c.inline;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [2])
                  , p = d.createMorphAt(h, 0, 0, i)
                  , m = d.createMorphAt(u, 1, 1)
                  , v = d.createMorphAt(u, 3, 3)
                  , g = d.createMorphAt(h, 4, 4, i);
                return d.insertBoundary(h, null ),
                d.insertBoundary(h, 0),
                o(r, p, n, "if", [s(r, n, "user.verified")], {}, e, null ),
                l(r, m, n, "replace-emoji", [s(r, n, "user.description")], {}),
                o(r, v, n, "if", [s(r, n, "user.location")], {}, t, null ),
                o(r, g, n, "unless", [s(r, n, "isBlocked")], {}, a, null ),
                h
            }
        }
    }())
}),
define("vine-ember/templates/timelines/toggles/top-recent", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      Top\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      Recent\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "timeline-toggles");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.subexpr
                  , o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.childAt(l, [0])
                  , u = i.childAt(h, [1])
                  , p = i.childAt(h, [3])
                  , m = i.createMorphAt(u, 1, 1)
                  , v = i.createMorphAt(p, 1, 1);
                return c(n, u, a, "bind-attr", [], {
                    "class": "isRecent::active"
                }),
                o(n, m, a, "link-to", [s(n, a, "query-params", [], {
                    sort: "top"
                })], {}, e, null ),
                c(n, p, a, "bind-attr", [], {
                    "class": "isRecent:active"
                }),
                o(n, v, a, "link-to", [s(n, a, "query-params", [], {
                    sort: "recent"
                })], {}, t, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/timelines/toggles/user", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("strong")
                      , n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode(" Posts\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(n.childAt(c, [1]), 0, 0);
                    return d(t, s, e, "format-count", [i(t, e, "user.postCount")], {}),
                    c
                }
            }
        }()
          , t = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("      ");
                    e.appendChild(t, a);
                    var a = e.createElement("strong")
                      , n = e.createComment("");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode(" Likes\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.get
                      , d = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                    this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var s = n.createMorphAt(n.childAt(c, [1]), 0, 0);
                    return d(t, s, e, "format-count", [i(t, e, "user.likeCount")], {}),
                    c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "timeline-toggles");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div")
                  , r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.element
                  , s = d.get
                  , o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.childAt(l, [0])
                  , u = i.childAt(h, [1])
                  , p = i.childAt(h, [3])
                  , m = i.createMorphAt(u, 1, 1)
                  , v = i.createMorphAt(p, 1, 1);
                return c(n, u, a, "bind-attr", [], {
                    "class": ":posts isLikes::active"
                }),
                o(n, m, a, "link-user", [], {
                    user: s(n, a, "user")
                }, e, null ),
                c(n, p, a, "bind-attr", [], {
                    "class": ":likes isLikes:active"
                }),
                o(n, v, a, "link-user", [], {
                    user: s(n, a, "user"),
                    likes: !0
                }, t, null ),
                l
            }
        }
    }())
}),
define("vine-ember/templates/trends/footer", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var c = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null ),
                                n.insertBoundary(d, 0),
                                i(t, c, e, "view", ["playlists/grid-list"], {}),
                                d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(t, a, n) {
                            var r = a.dom
                              , i = a.hooks
                              , d = i.get
                              , c = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                            this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var o = r.createMorphAt(s, 1, 1, n);
                            return c(a, o, t, "link-to", ["trend", d(a, t, "list.vanityUrl")], {}, e, null ),
                            s
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "view", ["playlists/grid-list"], {}),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null ),
                        i.insertBoundary(o, 0),
                        s(n, l, a, "if", [c(n, a, "isMobile")], {}, e, t),
                        o
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createElement("button");
                        e.setAttribute(a, "class", "nav-trends");
                        var n = e.createTextNode("See All");
                        return e.appendChild(a, n),
                        e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "trend-footer");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "title");
                    var r = e.createTextNode("More Trends");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "posts-container grid");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "grid-container clearfix");
                    var i = e.createTextNode("\n");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.block;
                    i.detectNamespace(r);
                    var s;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (s = this.build(i),
                    this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                    this.cachedFragment && (s = i.cloneNode(this.cachedFragment, !0))) : s = this.build(i);
                    var o = i.childAt(s, [1])
                      , l = i.createMorphAt(i.childAt(o, [3, 1]), 1, 1)
                      , h = i.createMorphAt(o, 5, 5);
                    return c(n, l, a, "each", [], {}, e, null ),
                    c(n, h, a, "link-to", ["trends"], {}, t, null ),
                    s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var o = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null ),
                r.insertBoundary(s, 0),
                c(a, o, t, "if", [d(a, t, "length")], {}, e, null ),
                s
            }
        }
    }())
}),
define("vine-ember/templates/trends", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(e, t, a) {
                var n = t.dom
                  , r = t.hooks
                  , i = r.inline;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var c = n.createMorphAt(d, 0, 0, a);
                return n.insertBoundary(d, null ),
                n.insertBoundary(d, 0),
                i(t, c, e, "partial", ["playlists"], {}),
                d
            }
        }
    }())
}),
define("vine-ember/templates/unsubscribe-vm", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom
                      , r = t.hooks
                      , i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                    this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                    this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var c = n.createMorphAt(d, 0, 0, a);
                    return n.insertBoundary(d, null ),
                    n.insertBoundary(d, 0),
                    i(t, c, e, "cdn-img", [], {
                        src: "images/vine_logo_white.svg",
                        width: "auto",
                        height: "106",
                        "class": "logo"
                    }),
                    d
                }
            }
        }()
          , t = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        You've unsubscribed from Vine message emails. For the best experience get the app.\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("        Oops.  Looks like something went wrong. For the best experience get the app.\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , a = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("button");
                            e.setAttribute(a, "class", "confirm");
                            var n = e.createTextNode("Continue");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "link-to", ["feed"], {}, e, null ),
                        c
                    }
                }
            }()
              , n = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("button");
                            e.setAttribute(a, "class", "confirm");
                            var n = e.createTextNode("Continue");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "link-to", ["index"], {}, e, null ),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h4")
                      , n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("a");
                    e.setAttribute(a, "href", "https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download"),
                    e.setAttribute(a, "target", "_blank");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("button");
                    e.setAttribute(n, "class", "app-icon white ios"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("a");
                    e.setAttribute(a, "href", "https://play.google.com/store/apps/details?id=co.vine.android"),
                    e.setAttribute(a, "target", "_blank");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("button");
                    e.setAttribute(n, "class", "app-icon white android"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("a");
                    e.setAttribute(a, "href", "http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60"),
                    e.setAttribute(a, "target", "_blank");
                    var n = e.createTextNode("\n      ");
                    e.appendChild(a, n);
                    var n = e.createElement("button");
                    e.setAttribute(n, "class", "app-icon white windows"),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("br");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(r, i, d) {
                    var c = i.dom
                      , s = i.hooks
                      , o = s.get
                      , l = s.block;
                    c.detectNamespace(d);
                    var h;
                    i.useFragmentCache && c.canClone ? (null === this.cachedFragment && (h = this.build(c),
                    this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                    this.cachedFragment && (h = c.cloneNode(this.cachedFragment, !0))) : h = this.build(c);
                    var u = c.createMorphAt(c.childAt(h, [1]), 1, 1)
                      , p = c.createMorphAt(h, 11, 11, d);
                    return l(i, u, r, "if", [o(i, r, "unsubscribed")], {}, e, t),
                    l(i, p, r, "if", [o(i, r, "session.isAuthenticated")], {}, a, n),
                    h
                }
            }
        }()
          , a = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("button")
                              , n = e.createTextNode("Cancel");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "link-to", ["feed"], {}, e, null ),
                        c
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createElement("button")
                              , n = e.createTextNode("Cancel");
                            return e.appendChild(a, n),
                            e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r),
                        this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                        this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var s = r.createMorphAt(c, 1, 1, n);
                        return d(a, s, t, "link-to", ["index"], {}, e, null ),
                        c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("h4")
                      , n = e.createTextNode("Are you sure you don't want to receive any more Vine messages to your email?");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n    ");
                    e.appendChild(t, a);
                    var a = e.createElement("button");
                    e.setAttribute(a, "class", "confirm unsubscribe");
                    var n = e.createTextNode("Unsubscribe");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a),
                    t
                },
                render: function(a, n, r) {
                    var i = n.dom
                      , d = n.hooks
                      , c = d.element
                      , s = d.get
                      , o = d.block;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.childAt(l, [3])
                      , u = i.createMorphAt(l, 5, 5, r);
                    return i.insertBoundary(l, null ),
                    c(n, h, a, "action", ["unsubscribe"], {}),
                    o(n, u, a, "if", [s(n, a, "session.isAuthenticated")], {}, e, t),
                    l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div")
                  , n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a),
                t
            },
            render: function(n, r, i) {
                var d = r.dom
                  , c = r.hooks
                  , s = c.element
                  , o = c.block
                  , l = c.get;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0])
                  , p = d.createMorphAt(u, 1, 1)
                  , m = d.createMorphAt(u, 3, 3);
                return s(r, u, n, "bind-attr", [], {
                    "class": ":confirmation confirmed"
                }),
                o(r, p, n, "link-to", ["index"], {}, e, null ),
                o(r, m, n, "if", [l(r, n, "confirmed")], {}, t, a),
                h
            }
        }
    }())
}),
define("vine-ember/templates/user-preview", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createElement("button")
                      , n = e.createTextNode("Reserve your URL");
                    return e.appendChild(a, n),
                    e.appendChild(t, a),
                    t
                },
                render: function(e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                    this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                    this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                    r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createElement("div");
                e.setAttribute(a, "class", "login-page");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h2")
                  , r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("strong")
                  , i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("'s web profile is coming soon.");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createElement("br");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    Have a Vine account?\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n),
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "custom-url-footer");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "custom-url-footer-content");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("h5")
                  , i = e.createTextNode("\n      Don't have a Vine account? Get the app to register.");
                e.appendChild(r, i);
                var i = e.createElement("br");
                e.appendChild(r, i);
                var i = e.createTextNode("Available free on\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download");
                var d = e.createTextNode("iPhone");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode(",\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https://play.google.com/store/apps/details?id=co.vine.android");
                var d = e.createTextNode("Android");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode(" and\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60");
                var d = e.createTextNode("Windows Phone");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode(".\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("h5")
                  , i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/help");
                var d = e.createTextNode("FAQ");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "dot");
                var d = e.createTextNode("·");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/contact");
                var d = e.createTextNode("Contact Support");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "dot");
                var d = e.createTextNode("·");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/terms"),
                e.setAttribute(i, "class", "terms");
                var d = e.createTextNode("Terms");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "dot");
                var d = e.createTextNode("·");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/privacy"),
                e.setAttribute(i, "class", "terms");
                var d = e.createTextNode("Privacy");
                e.appendChild(i, d),
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i),
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r),
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                return e.appendChild(a, n),
                e.appendChild(t, a),
                t
            },
            render: function(t, a, n) {
                var r = a.dom
                  , i = a.hooks
                  , d = i.get
                  , c = i.inline
                  , s = i.content
                  , o = i.block
                  , l = i.element;
                r.detectNamespace(n);
                var h;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (h = this.build(r),
                this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                this.cachedFragment && (h = r.cloneNode(this.cachedFragment, !0))) : h = this.build(r);
                var u = r.childAt(h, [0])
                  , p = r.childAt(h, [2, 1, 1])
                  , m = r.createMorphAt(u, 1, 1)
                  , v = r.createMorphAt(r.childAt(u, [3, 1]), 0, 0)
                  , g = r.createMorphAt(u, 5, 5);
                return c(a, m, t, "secure-img", [], {
                    src: d(a, t, "user.avatarUrl"),
                    "class": "avatar"
                }),
                s(a, v, t, "user.username"),
                o(a, g, t, "link-to", ["custom-url.login"], {}, e, null ),
                l(a, p, t, "bind-attr", [], {
                    "class": "showRegistration:hidden preview:hidden"
                }),
                h
            }
        }
    }())
}),
define("vine-ember/templates/vm-post", ["exports"], function(e) {
    e["default"] = Ember.HTMLBars.template(function() {
        var e = function() {
            var e = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "cdn-img", [], {
                            src: "images/vine_logo_white.svg",
                            width: "auto",
                            height: "106",
                            "class": "logo"
                        }),
                        d
                    }
                }
            }()
              , t = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("h2")
                          , n = e.createTextNode("We've emailed you a new link but for the best experience get the app.");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                        this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                        this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                        r
                    }
                }
            }()
              , a = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(d, 1, 1, a);
                            return i(t, c, e, "confirmation.error.message"),
                            d
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("          Oops.  Looks like something went wrong.\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n),
                            this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0),
                            this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n),
                            r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("h2")
                          , n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("        For the best experience get the app.\n      ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.get
                          , s = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                        return s(n, l, a, "if", [c(n, a, "confirmation.error.message")], {}, e, t),
                        o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "confirmation");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("a");
                    e.setAttribute(n, "href", "https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download"),
                    e.setAttribute(n, "target", "_blank");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "app-icon white ios"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("a");
                    e.setAttribute(n, "href", "https://play.google.com/store/apps/details?id=co.vine.android"),
                    e.setAttribute(n, "target", "_blank");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "app-icon white android"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("a");
                    e.setAttribute(n, "href", "http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60"),
                    e.setAttribute(n, "target", "_blank");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "app-icon white windows"),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(n, r, i) {
                    var d = r.dom
                      , c = r.hooks
                      , s = c.block
                      , o = c.get;
                    d.detectNamespace(i);
                    var l;
                    r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d),
                    this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                    this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                    var h = d.childAt(l, [1])
                      , u = d.createMorphAt(h, 1, 1)
                      , p = d.createMorphAt(h, 3, 3)
                      , m = d.createMorphAt(h, 5, 5);
                    return s(r, u, n, "link-to", ["index"], {}, e, null ),
                    s(r, p, n, "if", [o(r, n, "confirmation.resent")], {}, t, null ),
                    s(r, m, n, "if", [o(r, n, "confirmation.error")], {}, a, null ),
                    l
                }
            }
        }()
          , t = function() {
            var e = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "vine-player");
                            var n = e.createTextNode("\n              ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "vine-video-container");
                            var r = e.createTextNode("\n                ");
                            e.appendChild(n, r);
                            var r = e.createElement("video");
                            e.setAttribute(r, "preload", "auto");
                            var i = e.createTextNode("\n                  ");
                            e.appendChild(r, i);
                            var i = e.createElement("source");
                            e.setAttribute(i, "type", "video/mp4"),
                            e.appendChild(r, i);
                            var i = e.createTextNode("\n                ");
                            e.appendChild(r, i),
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n              ");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n            ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n            ");
                            e.appendChild(t, a);
                            var a = e.createElement("img");
                            e.setAttribute(a, "class", "thumbnail"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n            ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "play mobile"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.element;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.childAt(c, [1, 1, 1, 1])
                              , o = n.childAt(c, [3])
                              , l = n.childAt(c, [5]);
                            return d(t, s, e, "bind-attr", [], {
                                src: i(t, e, "secureVideoUrl")
                            }),
                            d(t, o, e, "bind-attr", [], {
                                src: i(t, e, "secureThumbnailUrl")
                            }),
                            d(t, l, e, "action", ["play"], {
                                target: "view"
                            }),
                            d(t, l, e, "bind-attr", [], {
                                style: i(t, e, "backgroundColorStyle")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r),
                        this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0),
                        this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var o = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null ),
                        r.insertBoundary(s, 0),
                        c(a, o, t, "if", [d(a, t, "isMobile")], {}, e, null ),
                        s
                    }
                }
            }()
              , t = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "overlay mobile-mask"),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.get
                              , d = r.element;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.childAt(c, [1]);
                            return d(t, s, e, "bind-attr", [], {
                                style: i(t, e, "backgroundColorStyle")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "overlay");
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "expired-logo"),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.get
                          , c = i.block
                          , s = i.element;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r),
                        this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                        this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [2, 1])
                          , h = r.createMorphAt(o, 0, 0, n);
                        return r.insertBoundary(o, 0),
                        c(a, h, t, "if", [d(a, t, "isMobile")], {}, e, null ),
                        s(a, l, t, "bind-attr", [], {
                            style: d(a, t, "backgroundColorStyle")
                        }),
                        o
                    }
                }
            }()
              , a = function() {
                var e = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("a");
                            e.setAttribute(a, "href", "#");
                            var n = e.createTextNode("\n                ");
                            e.appendChild(a, n);
                            var n = e.createElement("h5")
                              , r = e.createTextNode("I want to see it again");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n              ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.element
                              , d = r.get;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                            this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                            this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var s = n.childAt(c, [1])
                              , o = n.childAt(s, [1]);
                            return i(t, s, e, "action", ["resendLink"], {}),
                            i(t, o, e, "bind-attr", [], {
                                style: d(t, e, "textColorStyle")
                            }),
                            c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "expired-container");
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("h3")
                          , r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "href", "https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download"),
                        e.setAttribute(n, "target", "_blank");
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "app-icon ios"),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "href", "https://play.google.com/store/apps/details?id=co.vine.android"),
                        e.setAttribute(n, "target", "_blank");
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "app-icon android"),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "href", "http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60"),
                        e.setAttribute(n, "target", "_blank");
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "app-icon windows"),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "resend-link");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(t, a, n) {
                        var r = a.dom
                          , i = a.hooks
                          , d = i.content
                          , c = i.get
                          , s = i.element
                          , o = i.block;
                        r.detectNamespace(n);
                        var l;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r),
                        this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                        this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                        var h = r.childAt(l, [1])
                          , u = r.childAt(h, [3, 1])
                          , p = r.childAt(h, [5, 1])
                          , m = r.childAt(h, [7, 1])
                          , v = r.createMorphAt(r.childAt(h, [1]), 1, 1)
                          , g = r.createMorphAt(r.childAt(l, [3]), 1, 1);
                        return d(a, v, t, "expiredMessage"),
                        s(a, u, t, "bind-attr", [], {
                            style: c(a, t, "backgroundColorStyle")
                        }),
                        s(a, p, t, "bind-attr", [], {
                            style: c(a, t, "backgroundColorStyle")
                        }),
                        s(a, m, t, "bind-attr", [], {
                            style: c(a, t, "backgroundColorStyle")
                        }),
                        o(a, g, t, "if", [c(a, t, "resendable")], {}, e, null ),
                        l
                    }
                }
            }()
              , n = function() {
                var e = function() {
                    var e = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.get
                                  , d = r.inline;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n),
                                this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                                this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var s = n.createMorphAt(c, 0, 0, a);
                                return n.insertBoundary(c, null ),
                                n.insertBoundary(c, 0),
                                d(t, s, e, "secure-img", [], {
                                    src: i(t, e, "user.avatarUrl"),
                                    "class": "avatar"
                                }),
                                c
                            }
                        }
                    }()
                      , t = function() {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null ,
                            hasRendered: !1,
                            build: function(e) {
                                var t = e.createDocumentFragment()
                                  , a = e.createTextNode("post by ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                return e.appendChild(t, a),
                                t
                            },
                            render: function(e, t, a) {
                                var n = t.dom
                                  , r = t.hooks
                                  , i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                                this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var c = n.createMorphAt(d, 1, 1, a);
                                return n.insertBoundary(d, null ),
                                i(t, c, e, "post.username"),
                                d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "post-share");
                            var n = e.createTextNode("\n                ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n                ");
                            e.appendChild(a, n);
                            var n = e.createElement("span")
                              , r = e.createTextNode("\n                  shared a\n                  ");
                            e.appendChild(n, r);
                            var r = e.createComment("");
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n                ");
                            e.appendChild(n, r),
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n              ");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n              ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "message");
                            var n = e.createComment("");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(a, n, r) {
                            var i = n.dom
                              , d = n.hooks
                              , c = d.get
                              , s = d.block
                              , o = d.content;
                            i.detectNamespace(r);
                            var l;
                            n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i),
                            this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0),
                            this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                            var h = i.childAt(l, [1])
                              , u = i.createMorphAt(h, 1, 1)
                              , p = i.createMorphAt(i.childAt(h, [3]), 1, 1)
                              , m = i.createMorphAt(i.childAt(l, [3]), 0, 0);
                            return s(n, u, a, "link-user", [], {
                                user: c(n, a, "user")
                            }, e, null ),
                            s(n, p, a, "link-to", ["permalink-post", c(n, a, "post.shortId")], {}, t, null ),
                            o(n, m, a, "post.description"),
                            l
                        }
                    }
                }()
                  , t = function() {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null ,
                        hasRendered: !1,
                        build: function(e) {
                            var t = e.createDocumentFragment()
                              , a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "message");
                            var n = e.createComment("");
                            e.appendChild(a, n),
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a),
                            t
                        },
                        render: function(e, t, a) {
                            var n = t.dom
                              , r = t.hooks
                              , i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                            this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                            this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var c = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                            return i(t, c, e, "message"),
                            d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "info-container");
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("div")
                          , r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createElement("h3");
                        e.setAttribute(r, "class", "label");
                        var i = e.createTextNode("From");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createElement("hr");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "row");
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createElement("h3");
                        e.setAttribute(r, "class", "label");
                        var i = e.createTextNode("To");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createElement("span");
                        e.setAttribute(r, "class", "username recipient");
                        var i = e.createTextNode("\n                ");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n              ");
                        e.appendChild(r, i),
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("hr");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("h5")
                          , r = e.createComment("");
                        e.appendChild(n, r),
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n),
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(a, n, r) {
                        var i = n.dom
                          , d = n.hooks
                          , c = d.element
                          , s = d.get
                          , o = d.inline
                          , l = d.block;
                        i.detectNamespace(r);
                        var h;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i),
                        this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0),
                        this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                        var u = i.childAt(h, [1])
                          , p = i.childAt(u, [1])
                          , m = i.createMorphAt(p, 3, 3)
                          , v = i.createMorphAt(i.childAt(u, [3, 3]), 1, 1)
                          , g = i.createMorphAt(u, 7, 7)
                          , b = i.createMorphAt(i.childAt(u, [9]), 0, 0);
                        return c(n, p, a, "bind-attr", [], {
                            "class": ":row post:hidden"
                        }),
                        o(n, m, a, "user-info", [], {
                            data: s(n, a, "user"),
                            cssClass: "user-info-size-38 user-info-hide-metadata"
                        }),
                        o(n, v, a, "user-info", [], {
                            data: s(n, a, "recipientUser"),
                            cssClass: "user-info-size-38 user-info-hide-metadata",
                            delinkify: !0
                        }),
                        l(n, g, a, "if", [s(n, a, "post")], {}, e, t),
                        o(n, b, a, "format-date", [s(n, a, "created")], {}),
                        h
                    }
                }
            }()
              , r = function() {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null ,
                    hasRendered: !1,
                    build: function(e) {
                        var t = e.createDocumentFragment()
                          , a = e.createComment("");
                        return e.appendChild(t, a),
                        t
                    },
                    render: function(e, t, a) {
                        var n = t.dom
                          , r = t.hooks
                          , i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0),
                        this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var c = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null ),
                        n.insertBoundary(d, 0),
                        i(t, c, e, "cdn-img", [], {
                            src: "images/vine_logo_white.svg",
                            width: "90",
                            height: "36"
                        }),
                        d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null ,
                hasRendered: !1,
                build: function(e) {
                    var t = e.createDocumentFragment()
                      , a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "permalink-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div")
                      , r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "video-container");
                    var i = e.createTextNode("\n");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("div");
                    e.setAttribute(i, "class", "loading-bar"),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n\n\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("div");
                    e.setAttribute(r, "class", "card-content");
                    var i = e.createTextNode("\n");
                    e.appendChild(r, i);
                    var i = e.createComment("");
                    e.appendChild(r, i);
                    var i = e.createTextNode("      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "made-with-vine");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("h3")
                      , i = e.createTextNode("Made with");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("a");
                    e.setAttribute(r, "href", "http://get.vine.co");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("button")
                      , d = e.createTextNode("Download the App");
                    e.appendChild(i, d),
                    e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i),
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r),
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n),
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a),
                    t
                },
                render: function(i, d, c) {
                    var s = d.dom
                      , o = d.hooks
                      , l = o.element
                      , h = o.get
                      , u = o.block;
                    s.detectNamespace(c);
                    var p;
                    d.useFragmentCache && s.canClone ? (null === this.cachedFragment && (p = this.build(s),
                    this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0),
                    this.cachedFragment && (p = s.cloneNode(this.cachedFragment, !0))) : p = this.build(s);
                    var m = s.childAt(p, [1])
                      , v = s.childAt(m, [1])
                      , g = s.childAt(v, [1])
                      , b = s.childAt(m, [3])
                      , C = s.childAt(b, [5, 1])
                      , f = s.createMorphAt(g, 1, 1)
                      , F = s.createMorphAt(g, 3, 3)
                      , N = s.createMorphAt(s.childAt(v, [3]), 1, 1)
                      , T = s.createMorphAt(b, 3, 3);
                    return l(d, v, i, "bind-attr", [], {
                        "class": ":card expired"
                    }),
                    l(d, g, i, "bind-attr", [], {
                        style: h(d, i, "backgroundImageStyle")
                    }),
                    u(d, f, i, "unless", [h(d, i, "expired")], {}, e, null ),
                    u(d, F, i, "if", [h(d, i, "expired")], {}, t, null ),
                    u(d, N, i, "if", [h(d, i, "expired")], {}, a, n),
                    u(d, T, i, "link-to", ["index"], {}, r, null ),
                    l(d, C, i, "bind-attr", [], {
                        "class": ":download-app session.isAuthenticated:hidden",
                        style: h(d, i, "textColorStyle")
                    }),
                    p
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null ,
            hasRendered: !1,
            build: function(e) {
                var t = e.createDocumentFragment()
                  , a = e.createComment("");
                return e.appendChild(t, a),
                t
            },
            render: function(a, n, r) {
                var i = n.dom
                  , d = n.hooks
                  , c = d.get
                  , s = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i),
                this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0),
                this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null ),
                i.insertBoundary(o, 0),
                s(n, l, a, "if", [c(n, a, "confirmation")], {}, e, t),
                o
            }
        }
    }())
}),
define("vine-ember/utils/emoji_regex", ["exports"], function(e) {
    var t = /(\ud83c\uddef\ud83c\uddf5|\ud83c\uddf0\ud83c\uddf7|\ud83c\udde9\ud83c\uddea|\ud83c\udde8\ud83c\uddf3|\ud83c\uddfa\ud83c\uddf8|\ud83c\uddeb\ud83c\uddf7|\ud83c\uddea\ud83c\uddf8|\ud83c\uddee\ud83c\uddf9|\ud83c\uddf7\ud83c\uddfa|\ud83c\uddec\ud83c\udde7|\x23([\u20e3])|\x30([\u20e3])|\x31([\u20e3])|\x32([\u20e3])|\x33([\u20e3])|\x34([\u20e3])|\x35([\u20e3])|\x36([\u20e3])|\x37([\u20e3])|\x38([\u20e3])|\x39([\u20e3])|\ud83c([\udc04]|[\udccf]|[\udd70-\udd71]|[\udd7e-\udd7f]|[\udd8e]|[\udd91-\udd9a]|[\udde6-\uddff]|[\ude01-\ude02]|[\ude1a]|[\ude2f]|[\ude32-\ude3a]|[\ude50-\ude51]|[\udf00-\udf20]|[\udf30-\udf35]|[\udf37-\udf7c]|[\udf80-\udf93]|[\udfa0-\udfc4]|[\udfc6-\udfca]|[\udfe0-\udff0])|\ud83d([\udc00-\udc3e]|[\udc40]|[\udc42-\udcf7]|[\udcf9-\udcfc]|[\udd00-\udd3d]|[\udd50-\udd67]|[\uddfb-\ude40]|[\ude45-\ude4f]|[\ude80-\udec5])|[\u2712]|[\u2714]|[\u2716]|[\u2728]|[\u2733-\u2734]|[\u2744]|[\u2747]|[\u274c]|[\u274e]|[\u2753-\u2755]|[\u2757]|[\u2764]|[\u2795-\u2797]|[\u27a1]|[\u27b0]|[\u27bf]|[\u2934-\u2935]|[\u2b05-\u2b07]|[\u2b1b-\u2b1c]|[\u2b50]|[\u2b55]|[\u3030]|[\u303d]|[\u3297]|[\u3299]|[\ue50a]|[\u203c]|[\u2049]|[\u2139]|[\u2194-\u2199]|[\u21a9-\u21aa]|[\u231a-\u231b]|[\u23e9-\u23ec]|[\u23f0]|[\u23f3]|[\u24c2]|[\u25aa-\u25ab]|[\u25b6]|[\u25c0]|[\u25fb-\u25fe]|[\u2600-\u2601]|[\u260e]|[\u2611]|[\u2614-\u2615]|[\u261d]|[\u263a]|[\u2648-\u2653]|[\u2660]|[\u2663]|[\u2665-\u2666]|[\u2668]|[\u267b]|[\u267f]|[\u2693]|[\u26a0-\u26a1]|[\u26aa-\u26ab]|[\u26bd-\u26be]|[\u26c4-\u26c5]|[\u26ce]|[\u26d4]|[\u26ea]|[\u26f2-\u26f3]|[\u26f5]|[\u26fa]|[\u26fd]|[\u2702]|[\u2705]|[\u2708-\u270c]|[\u270f])[\uFE00-\uFE0F]?/g;
    e["default"] = t
}),
define("vine-ember/utils/emojify", ["exports", "vine-ember/utils/emoji_regex"], function(e, t) {
    function a(e) {
        for (var a = 0; a < e.length; a++)
            if (e.charCodeAt(a) > 255)
                return e.replace(t["default"], '<span class="emoji" data-emoji="$1">$1</span>');
        return e
    }
    e["default"] = a
}),
define("vine-ember/utils/loop-incrementor", ["exports"], function(e) {
    function t() {
        clearInterval(c),
        c = setInterval(n, 1e3 / s)
    }
    function a() {
        clearInterval(c)
    }
    function n() {
        var e = Date.now();
        o.forEach(function(t) {
            var a = (e - t.asOfTime) / 1e3;
            t.count += a * t.velocity,
            t.asOfTime = e,
            t.callback(Math.round(t.count))
        })
    }
    function r(e, a, n, r) {
        var i = Math.round(1e6 * Math.random());
        return o.push({
            id: e,
            handle: i,
            count: a,
            velocity: n,
            callback: r,
            asOfTime: Date.now()
        }),
        (l[e] = l[e] || []).push(o[o.length - 1]),
        1 === o.length && t(),
        i
    }
    function i(e) {
        function t(t) {
            return t.handle === e ? (n = n || t.id,
            !1) : !0
        }
        var n;
        o = o.filter(t),
        l[n] && (l[n] = l[n].filter(t),
        0 === l[n].length && delete l[n]),
        0 === o.length && a()
    }
    function d(e) {
        l[e] && l[e].forEach(function(e) {
            e.callback(Math.round(++e.count))
        })
    }
    var c, s = .5, o = [], l = {};
    e["default"] = {
        add: r,
        remove: i,
        addLoopTo: d
    }
}),
define("vine-ember/utils/service-loader", ["exports"], function(e) {
    var t = window.requirejs
      , a = window.require
      , n = Ember.Object.extend({
        fixtures: {},
        services: {},
        init: function() {
            this.loadFixtures(),
            this.loadServices(),
            Ember.keys(this.get("services")).forEach(function(e) {
                this.setService(e)
            }
            .bind(this))
        },
        loadFixtures: function() {
            var e = this.get("fixtures");
            Ember.keys(t._eak_seen).filter(function(e) {
                return /\/fixtures\/services/.test(e)
            }).forEach(function(t) {
                var n = t.split("/").slice(4).join("/")
                  , r = a(t, null , null , !0)["default"];
                e[n] = r
            })
        },
        loadServices: function() {
            var e = this.get("services");
            Ember.keys(t._eak_seen).filter(function(e) {
                return /^vine-ember\/services/.test(e)
            }).forEach(function(t) {
                var n = t.split("/").slice(2).join("/")
                  , r = a(t, null , null , !0)["default"];
                e[n] = r
            })
        },
        setService: function(e) {
            var t = this.get("fixtures")
              , a = this.get("services");
            return (Ember.testing || window.fixturesMode) && t[e] ? void this.set(e, t[e]) : a[e] ? void this.set(e, a[e]) : void 0
        }
    });
    e["default"] = n
}),
define("vine-ember/views/application", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        didInsertElement: function() {
            if (this.bindVisibilityChange(),
            this.get("controller.hasNotification") && !this.get("controller.isMobile")) {
                var e = $.throttle(10, function() {
                    $(window).scrollTop() > 40 ? t["default"].$("#outer-wrapper").addClass("cover-notification") : t["default"].$("#outer-wrapper").removeClass("cover-notification")
                });
                $(window).bind("scroll", e),
                $(window).scroll(),
                this.set("scrollBinding", e)
            }
        },
        willDestroyElement: function() {
            t["default"].$("header").removeClass("cover-notification"),
            this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")),
            this.get("visibilityChangeEvent") && $(document).unbind(this.get("visibilityChangeEvent"))
        },
        resetMenu: function() {
            this.get("controller.transitioning") && (this.send("hideMobileMenu"),
            this.send("hideSearchMenu"),
            this.get("controller").set("transitioning", !1))
        }
        .observes("controller.transitioning"),
        bindVisibilityChange: function() {
            var e, t;
            "undefined" != typeof document.hidden ? (e = "hidden",
            t = "visibilitychange") : "undefined" != typeof document.mozHidden ? (e = "mozHidden",
            t = "mozvisibilitychange") : "undefined" != typeof document.msHidden ? (e = "msHidden",
            t = "msvisibilitychange") : "undefined" != typeof document.webkitHidden && (e = "webkitHidden",
            t = "webkitvisibilitychange"),
            t && ($(document).on(t, function() {
                this.set("controller.isVisible", !document[e])
            }
            .bind(this)),
            this.set("controller.isVisible", !document[e]),
            this.set("visibilityChangeEvent", t))
        },
        actions: {
            toggleMobileMenu: function() {
                var e = this.$(".mobile-menu");
                e.hasClass("expanded") || this.$(".global-search").removeClass("expanded"),
                e.toggleClass("expanded")
            },
            hideMobileMenu: function() {
                this.$(".mobile-menu").removeClass("expanded")
            },
            toggleSearchMenu: function() {
                var e = this.$(".global-search");
                e.hasClass("expanded") || this.$(".mobile-menu").removeClass("expanded"),
                e.toggleClass("expanded")
            },
            hideSearchMenu: function() {
                this.$(".global-search input").blur()
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/views/current-user", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        templateName: "current-user",
        classNames: "current-user",
        mouseEnter: function() {
            window.clearTimeout(this.get("timeout")),
            this.$(".user.menu").show()
        },
        mouseLeave: function() {
            this.set("timeout", window.setTimeout(function() {
                this.$(".user.menu").hide()
            }, 100))
        },
        touchStart: function(e) {
            e.target === this.$(".icon")[0] && (e.preventDefault(),
            e.stopPropagation(),
            this.$(".user-menu").toggle())
        }
    });
    e["default"] = a
}),
define("vine-ember/views/custom-url-input", ["exports", "vine-ember/services/url", "vine-ember/components/my-input"], function(e, t, a) {
    var n = a["default"].extend({
        name: "url",
        maxlength: "32",
        classNameBindings: ["errorState:error", "availableState:available"],
        input: function() {
            this.sendAction("reset"),
            this.sendAction("typing", !0)
        },
        valueChanged: $.debounce(200, function() {
            this.sendAction("reset"),
            this.sendAction("typing", !1);
            var e = this.get("value");
            if (e) {
                if (e.length < 3)
                    return void this.sendAction("error", {
                        response: {
                            error: "URL must be between 3 and 32 characters."
                        }
                    });
                this.checkUrl(encodeURIComponent(e))
            }
        }).observes("value"),
        checkUrl: function(e) {
            t["default"].checkUrl(this.get("session.userId"), e).then(function() {
                this.sendAction("available")
            }
            .bind(this), function(e) {
                this.sendAction("error", e)
            }
            .bind(this))
        }
    });
    e["default"] = n
}),
define("vine-ember/views/explore/list", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function(e, t, a) {
    var n = a["default"].extend({
        templateName: "explore/list",
        classNameBindings: "controller.listIdClass",
        timeline: t["default"].computed.alias("controller.controllers.index.content")
    });
    e["default"] = n
}),
define("vine-ember/views/explore/mobile", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        didInsertElement: function() {
            this.get("session.isAuthenticated") || this._bindScroll()
        },
        _bindScroll: function() {
            t["default"].$("header").addClass("hide-logo");
            var e = function() {
                var e = $(window).scrollTop();
                e > this.$(".logo-image").offset().top + this.$(".logo-image").height() - 45 ? t["default"].$("header").removeClass("hide-logo") : t["default"].$("header").addClass("hide-logo")
            }
            .bind(this);
            $(window).scroll(e),
            this.set("scrollBinding", e)
        },
        _unbindScroll: function() {
            this.get("scrollBinding") && (t["default"].$("header").removeClass("hide-logo"),
            $(window).unbind("scroll", this.get("scrollBinding")))
        },
        sessionChanged: function() {
            this.get("session.isAuthenticated") ? this._unbindScroll() : this._bindScroll()
        }
        .observes("session.userId"),
        willDestroyElement: function() {
            this._unbindScroll()
        }
    });
    e["default"] = a
}),
define("vine-ember/views/explore/pinned-channel", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        templateName: "explore/pinned-channel",
        didInsertElement: function() {
            this._super();
            var e = this.$(".pinned-channel-color").text();
            e = e.replace(/\[\[channelId\]\]/g, this.get("controller.channelIdAttr")),
            e = e.replace(/\[\[backgroundColor\]\]/g, this.get("controller.channel.backgroundColor")),
            this.$(".pinned-channel-color").text(e)
        }
    });
    e["default"] = a
}),
define("vine-ember/views/explore/posts/one-mobile", ["exports", "vine-ember/views/post-mobile"], function(e, t) {
    var a = t["default"].extend({
        templateName: "explore/posts/one-mobile"
    });
    e["default"] = a
}),
define("vine-ember/views/explore/posts/one", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function(e, t, a) {
    var n = a["default"].extend({
        tagName: "article",
        classNameBindings: "controller.postIdClass",
        templateName: "explore/posts/one",
        timeline: t["default"].computed.alias("controller.controllers.index.content")
    });
    e["default"] = n
}),
define("vine-ember/views/explore/posts/popular-mobile", ["exports", "vine-ember/views/post-mobile"], function(e, t) {
    var a = t["default"].extend({
        classNames: ["post-mobile", "small"],
        templateName: "explore/posts/popular-mobile"
    });
    e["default"] = a
}),
define("vine-ember/views/explore/posts/popular", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function(e, t, a) {
    var n = a["default"].extend({
        classNames: ["sidebar-video popular-post"],
        classNameBindings: "controller.postIdClass",
        templateName: "explore/posts/popular",
        timeline: t["default"].computed.alias("controller.controllers.index.content")
    });
    e["default"] = n
}),
define("vine-ember/views/explore/posts/three", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function(e, t, a) {
    var n = a["default"].extend({
        classNames: ["post-container"],
        classNameBindings: "controller.postIdClass",
        timeline: t["default"].computed.alias("controller.controllers.index.content")
    });
    e["default"] = n
}),
define("vine-ember/views/explore/sidebar-list", ["exports", "vine-ember/views/explore/list"], function(e, t) {
    var a = t["default"].extend({
        templateName: "explore/sidebar-list"
    });
    e["default"] = a
}),
define("vine-ember/views/fullscreen-post", ["exports", "vine-ember/views/post", "vine-ember/mixins/continuous-play-view"], function(e, t, a) {
    var n = t["default"].extend(a["default"], {
        templateName: "fullscreen-post",
        didInsertElement: function() {
            this.send("resize");
            var e = $.throttle(250, function() {
                this.send("resize")
            }
            .bind(this));
            $(window).resize(e),
            this.playCurrentVine(),
            this.$().attr({
                tabindex: 1
            }),
            this.$().focus()
        },
        willDestroyElement: function() {
            $(window).unbind("resize")
        },
        _doNavRight: $.throttle(500, function() {
            this.get("controller").send("navRight")
        }),
        _doNavLeft: $.throttle(500, function() {
            this.get("controller").send("navLeft")
        }),
        _doToggleMute: $.debounce(200, function() {
            this.get("controller").send("toggleMute")
        }),
        _doToggleAutoplay: $.debounce(200, function() {
            this.get("controller").send("toggleAutoplay")
        }),
        _doTogglePlay: $.debounce(200, function() {
            this.get("controller").send("togglePlay")
        }),
        shouldShowShare: function() {
            return this.get("fbUrl") && this.get("tweetUrl")
        }
        .property("fbUrl", "tweetUrl"),
        keyDown: $.throttle(100, function(e) {
            switch (e.which) {
            case 39:
                this._doNavRight();
                break;
            case 37:
                this._doNavLeft();
                break;
            case 38:
                this.get("controller").send("like");
                break;
            case 32:
                e.preventDefault(),
                this._doTogglePlay();
                break;
            case 77:
                this._doToggleMute();
                break;
            case 65:
                this._doToggleAutoplay();
                break;
            case 27:
                this.get("controller").send("closeFullscreen");
                break;
            default:
                return
            }
        }),
        playCurrentVine: function() {
            this.send("gaq", ["_trackEvent", "TV Mode", "play post"]),
            this.get("controller.playingVine").send("play", this._getVideoObject()),
            Ember.run.scheduleOnce("afterRender", this, function() {
                this.$(".attribution") && this.$(".attribution").width(this.$(".post-info-container").width())
            })
        }
        .observes("post.postIdStr"),
        actions: {
            resize: function() {
                var e = $(window).height()
                  , t = this.$(".video-container");
                t.height(e),
                t.width(e),
                this.get("controller.playingVine.player") && this.get("controller.playingVine.player").setVideoSize(e, e)
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/views/grid-post", ["exports", "vine-ember/views/listview-enabled-post"], function(e, t) {
    var a = t["default"].extend({
        templateName: "grid-post",
        classNames: ["grid", "post"]
    });
    e["default"] = a
}),
define("vine-ember/views/index", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        didInsertElement: function() {
            this.get("controller.isMobile") || this.send("bindScroll")
        },
        sessionChanged: function() {
            this.get("session.isAuthenticated") ? (this.set("headerHeight", 178),
            this.set("searchTop", 75)) : (this.set("headerHeight", 370),
            this.set("searchTop", 120)),
            setTimeout(function() {
                $(window).scroll()
            }, 50)
        }
        .observes("session.isAuthenticated").on("init"),
        willDestroyElement: function() {
            this.send("unbindScroll")
        },
        actions: {
            bindScroll: function() {
                var e = $.throttle(10, function() {
                    var e = $(window).scrollTop();
                    e < this.get("headerHeight") ? (t["default"].$("header, .login-link, .get-app-button").addClass("transparent"),
                    t["default"].$(".fullscreen").addClass("offset")) : (t["default"].$("header, .login-link, .get-app-button").removeClass("transparent"),
                    t["default"].$(".fullscreen").removeClass("offset"));
                    var a = this.$("#search-input")
                      , n = this.get("searchTop");
                    e > n ? a.addClass("transparent") : a.removeClass("transparent");
                    var r = t["default"].$("#explore-header").height()
                      , i = 1 - $(window).scrollTop() / r;
                    t["default"].$("#splash-container, #search-input .search input").css("opacity", i)
                }
                .bind(this));
                this.set("scrollBinding", e),
                $(window).scroll(e),
                $(window).scroll()
            },
            unbindScroll: function() {
                this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")),
                t["default"].$("header, .login-link, .get-app-button").removeClass("transparent")
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/views/jobs", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        classNames: ["jobs"],
        players: [],
        didInsertElement: function() {
            this._createPlayerElement(),
            this.get("controller.isMobile") || (this.bindBulletClicks(),
            this.bindKeyboardEvents(),
            this.manageVideoStates(),
            this.setupPlantParallax(),
            $(window).on("scroll.jobs", this.manageVideoStates.bind(this))),
            this.setCarouselSize(),
            this.setCurrentBullet(),
            this.setVideoSize(),
            $(window).on("orientationchange.jobs resize.jobs", this.setCarouselSize.bind(this)),
            $(window).on("orientationchange.jobs resize.jobs", this.setVideoSize.bind(this)),
            $(window).scrollTop(0)
        },
        willDestroyElement: function() {
            $(window).off(".jobs"),
            $(document).off(".jobs")
        },
        setCarouselSize: function() {
            var e = this.$(".jobs-wrapper").width()
              , t = this.$(".perks ul.perk-slides li");
            t.css("width", e)
        },
        setVideoSize: function() {
            var e = 1920
              , t = 960
              , a = this.$(".jobs-wrapper").width();
            this.$(".hero video, .hero embed, .hero").css({
                width: a,
                height: Math.round(a / e * t)
            })
        },
        bindKeyboardEvents: function() {
            $(document).on("keyup.jobs", function(e) {
                (37 === e.keyCode || 39 === e.keyCode) && (this.get("controller").send(37 === e.keyCode ? "prevPerk" : "nextPerk"),
                this.get("controller").send("resumePerkAnimation"),
                e.preventDefault(),
                e.stopPropagation())
            }
            .bind(this))
        },
        bindBulletClicks: function() {
            this.$(".bullets").click(function(e) {
                this.set("controller.currentPerkIndex", $(e.target).prevAll("div").length),
                this.get("controller").send("resumePerkAnimation")
            }
            .bind(this))
        },
        _parallaxEffect: function(e, t, a) {
            t.scrollRange = t.stopsAtScroll - t.startsAtScroll,
            t.valueRange = t.endValue - t.startValue,
            $(window).on("scroll.jobs", function() {
                var n = $(window).scrollTop() + $(window).height();
                n < t.startsAtScroll || n > t.stopsAtScroll || (a ? a(e, t, n) : $(e).css(t.property, t.startValue + (n - t.startsAtScroll) / t.scrollRange * t.valueRange))
            })
        },
        setupPlantParallax: function() {
            this.$("*[data-parallax]").toArray().forEach(function(e) {
                this._parallaxEffect(e, JSON.parse(e.getAttribute("data-parallax")))
            }
            .bind(this))
        },
        _createPlayerElement: function(e) {
            var t = {
                features: [],
                plugins: ["flash"],
                pluginPath: "/assets/swf/",
                enablePluginSmoothing: !0,
                flashName: "flashmediaelement.2.swf",
                startVolume: 0
            }
              , a = [];
            a.push({
                element: this.$(".hero video").get(0),
                success: function(e) {
                    $(e).bind("ended", e.setCurrentTime.bind(e, 0)),
                    e.setSrc([{
                        src: this.get("controller.heroVideoUrl"),
                        type: "video/mp4"
                    }]),
                    this.set("controller.heroPlayer", e),
                    $(e).bind("canplay", function() {
                        this.$(".hero-play-button").remove()
                    }
                    .bind(this)),
                    e.setMuted(!0),
                    e.play()
                }
                .bind(this)
            }),
            this.$(".vines-all-the-way-down video").toArray().forEach(function(e) {
                a.push({
                    element: e,
                    success: function(e, t) {
                        $(e).bind("ended", e.setCurrentTime.bind(e, 0))
                    }
                })
            }),
            a.forEach(function(e) {
                var a = $(e.element).parent()
                  , n = Math.max(a.width(), a.height())
                  , r = {
                    defaultVideoWidth: n,
                    defaultVideoHeight: n,
                    success: function(t, a) {
                        this.players.push([t, a]),
                        e.success(t, a)
                    }
                    .bind(this),
                    error: function(e) {
                        window.console.log("Player initialization failed.", e)
                    }
                };
                window.MediaElement(e.element, $.extend({}, t, r))
            }
            .bind(this))
        },
        setCurrentBullet: function() {
            var e = this.$(".bullets div");
            if (e) {
                var t = this.get("controller.currentPerkIndex");
                e.removeClass("current").eq(t).addClass("current")
            }
        }
        .observes("controller.currentPerkIndex"),
        manageVideoStates: function() {
            var e = $(window).scrollTop()
              , t = $(window).height();
            this.players.forEach(function(a) {
                var n = a[0]
                  , r = a[1]
                  , i = $(r).offset().top
                  , d = $(r).height()
                  , c = i + d > e && e + t > i;
                c ? n.play() : n.pause()
            })
        },
        visibilityChange: function() {
            var e = !this.get("controller.controllers.application.isVisible");
            this.players.forEach(function(t) {
                var a = t[0]
                  , n = t[1];
                e ? (n.setAttribute("data-was-paused", a.paused),
                a.pause()) : ("false" === n.getAttribute("data-was-paused") && a.play(),
                n.removeAttribute("data-was-paused"))
            })
        }
        .observes("controller.controllers.application.isVisible"),
        actions: {
            playHeroVideo: function() {
                this.get("controller.heroPlayer").play(),
                this.$(".hero-play-button").remove()
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/views/listview-enabled-post", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        timeline: t["default"].computed.alias("controller.parentController.content"),
        click: function(e) {
            $(e.target).is("a, button") || 0 !== $(e.target).closest("a, button").length || this.get("controller").send("forceListView", this.get("controller.postIdStr"))
        }
    });
    e["default"] = a
}),
define("vine-ember/views/login", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        classNames: ["login-page"],
        didInsertElement: function() {
            this.get("controller.isMobile") || this.$('input[name="email"]').focus(),
            this.get("controller").send("gaq", ["_trackEvent", "Login", "page"])
        }
    });
    e["default"] = a
}),
define("vine-ember/views/modal/base", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        modalContainer: ".modal, .container",
        didInsertElement: function() {
            this.$().attr({
                tabindex: 1
            }),
            this.$().focus()
        },
        willDestroyElement: function() {
            var e = this.get("controller")
              , t = e.get("controllers.application");
            t.get("isMessageBrokerOpen") && t.sendMessage("restorePlayingState")
        },
        click: function(e) {
            $(e.target).is(this.get("modalContainer")) && this.get("controller").send("hideModal")
        },
        touchStart: function(e) {
            return $(e.target).is(this.$(this.get("modalContainer"))) && this.get("controller").send("hideModal"),
            !0
        },
        keyDown: function(e) {
            27 === e.which && this.get("controller").send("hideModal")
        }
    });
    e["default"] = a
}),
define("vine-ember/views/modal/embed", ["exports", "vine-ember/views/modal/base"], function(e, t) {
    var a = t["default"].extend({
        didInsertElement: function() {
            $(window).on("message.embed", function(e) {
                if (e.originalEvent.data && e.originalEvent.data.split) {
                    var t = e.originalEvent.data.split("::");
                    if ("ping" === t[0])
                        e.originalEvent.source.postMessage("pong", "*"),
                        e.originalEvent.source.postMessage("scrolledInToView", "*");
                    else if ("height" === t[0]) {
                        var a = this.$("iframe").get(0);
                        a.style.removeProperty ? a.style.removeProperty("height") : a.style.removeAttribute("height"),
                        a.height = parseInt(t[2], 10)
                    }
                }
            }),
            this.$("textarea").on("focus", function() {
                this.setSelectionRange(0, 9999),
                $(this).mouseup(function() {
                    return $(this).unbind("mouseup"),
                    !1
                })
            })
        },
        willDestroyElement: function() {
            $(window).off("message.embed"),
            this.$("iframe").remove(),
            this.get("controller").send("hideModal")
        }
    });
    e["default"] = a
}),
define("vine-ember/views/modal/flash-error", ["exports", "vine-ember/views/modal/base"], function(e, t) {
    var a = t["default"].extend({
        classNames: ["modal flash-error"]
    });
    e["default"] = a
}),
define("vine-ember/views/modal/job", ["exports", "vine-ember/views/modal/base"], function(e, t) {
    var a = t["default"].extend();
    e["default"] = a
}),
define("vine-ember/views/modal/login", ["exports", "vine-ember/views/modal/base"], function(e, t) {
    var a = t["default"].extend({
        classNames: ["modal login"],
        modalContainer: ".download-buttons, .signup, .modal, .container",
        didInsertElement: function() {
            this.get("controller").send("gaq", ["_trackEvent", "Login", "modal"]),
            this.get("controller.controllers.login").send("resetForm")
        },
        click: function(e) {
            $(e.target).is(this.get("modalContainer")) && this.get("controller").send("hideModal")
        }
    });
    e["default"] = a
}),
define("vine-ember/views/modal/post", ["exports", "ember", "vine-ember/views/modal/base", "vine-ember/mixins/continuous-play-view"], function(e, t, a, n) {
    var r = a["default"].extend(n["default"], {
        classNames: ["modal post-navigator"],
        post: t["default"].computed.alias("controller.currentPost"),
        modalContainer: ".permalink-content-wrapper, .permalink-container",
        didInsertElement: function() {
            this.get("controller").send("bindFullscreenListener"),
            this.send("playCurrentVine"),
            this._super()
        },
        willDestroyElement: function() {
            this.get("controller").send("unbindFullscreenListener")
        },
        _scrollToElement: function(e) {
            var t = e.offset().top - $(window).height() / 2 + e.height() / 2;
            $("html, body").animate({
                scrollTop: t
            })
        },
        currentPostChanged: function() {
            var e = t["default"].$("." + this.get("controller.currentPost.postIdClass"));
            if (e.length > 0)
                return void this._scrollToElement(e);
            var a = t["default"].$(".list-" + this.get("controller.currentPost.context.list.timelineIdStr"));
            if (a.length > 0)
                return void this._scrollToElement(a);
            var n = t["default"].$(".user-" + this.get("controller.currentPost.context.user.userIdStr"));
            n.length > 0 && this._scrollToElement(n)
        }
        .observes("controller.currentPost"),
        _doNavRight: $.throttle(500, function() {
            this.get("controller").send("navRight")
        }),
        _doNavLeft: $.throttle(500, function() {
            this.get("controller").send("navLeft")
        }),
        _doToggleMute: $.debounce(200, function() {
            this.get("controller").send("toggleMute")
        }),
        _doTogglePlay: $.debounce(200, function() {
            this.get("controller").send("togglePlay")
        }),
        keyDown: $.throttle(100, function(e) {
            if (27 === e.which)
                return void this.get("controller").send("hideModal");
            if (!this.$("input").is(":focus"))
                switch (e.which) {
                case 39:
                    this._doNavRight();
                    break;
                case 37:
                    this._doNavLeft();
                    break;
                case 32:
                    e.preventDefault(),
                    this._doTogglePlay();
                    break;
                case 77:
                    this._doToggleMute();
                    break;
                default:
                    return
                }
        })
    });
    e["default"] = r
}),
define("vine-ember/views/modal/report", ["exports", "vine-ember/views/modal/base"], function(e, t) {
    var a = t["default"].extend({
        classNames: ["modal report"],
        willDestroyElement: function() {
            this.get("controller").send("reset")
        },
        isReportChanged: function() {
            var e = this.$(".reasons .row input");
            this.get("controller.isReport") && e && e.first().click()
        }
        .observes("controller.isReport")
    });
    e["default"] = a
}),
define("vine-ember/views/modal/vm", ["exports", "vine-ember/views/modal/base"], function(e, t) {
    var a = t["default"].extend({
        didInsertElement: function() {
            if (this._bindRecipientsScroll(),
            this.get("controller").send("reset"),
            this.get("controller").send("reloadRecipients"),
            this.get("controller.isMobile"))
                $(window).scrollTop(0);
            else {
                var e = 100;
                this.$(".vm-modal").css({
                    marginTop: $(window).scrollTop() + e + "px"
                })
            }
        },
        _bindRecipientsScroll: function() {
            var e = this.$(".vm-recipients")
              , t = this.$(".recipients-container")
              , a = $.throttle(10, function() {
                if (!this.get("controller.paginating")) {
                    var a = t.height() - e.height() - 40;
                    e.scrollTop() > a && (this.get("controller.autocompleteRecipients.length") ? this.get("controller").send("loadAutocompleteResults") : this.get("controller").send("paginateRecipients"))
                }
            }
            .bind(this));
            e.bind("scroll", a),
            this.set("scrollBinding", a)
        },
        modeChanged: function() {
            this.$(".vm-recipients") && this.$(".vm-recipients").scrollTop(0)
        }
        .observes("controller.isAutocomplete"),
        willDestroyElement: function() {
            this.get("scrollBinding") && this.$(".vm-recipients").unbind("scroll", this.get("scrollBinding"))
        }
    });
    e["default"] = a
}),
define("vine-ember/views/modal-enabled-post", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        timeline: t["default"].computed.alias("controller.parentController.content"),
        click: function(e) {
            $(e.target).is("a, button") || 0 !== $(e.target).closest("a, button").length || this.get("controller").send("openModalView", this.get("timeline"))
        }
    });
    e["default"] = a
}),
define("vine-ember/views/permalink-post", ["exports", "ember", "vine-ember/views/post"], function(e, t, a) {
    var n = a["default"].extend({
        templateName: "permalink-post",
        classNames: ["permalink-post-wrapper"],
        classNameBindings: ["controller.relatedVideosExpanded"],
        isReady: !1,
        didInsertElement: function() {
            this.set("isReady", !0)
        },
        willDestroyElement: function() {
            this.get("controller").get("isDestroyed") || this.get("controller").send("resetRelatedVideosState")
        },
        shouldOpenEmbedModalChanged: function() {
            if (this.get("isReady")) {
                var e = this.get("controller.shouldOpenEmbedModal") ? "pause" : "play";
                t["default"].run.next(this.send.bind(this, e))
            }
        }
        .observes("controller.shouldOpenEmbedModal", "isReady"),
        _getVideoObject: function() {
            return {
                view: this,
                post: this.get("controller"),
                el: this.$(".video-container.main"),
                controlEls: this.$(".play, .thumbnail"),
                playerEls: this.$(".vine-player")
            }
        },
        registerWithPlayer: function() {
            if (this.get("isReady") && !this.get("controller.isMobile")) {
                this.get("controller.isModal") || this.get("controller.playingVine").set("endedEvent", function() {
                    this.get("controller").send("showRelatedVideos")
                }
                .bind(this));
                var e = this._getVideoObject();
                this.get("controller.playingVine").send("videoRendered", e),
                this.get("controller").set("videoObject", e)
            }
        }
        .observes("controller.secureVideoUrl", "isReady"),
        postChanged: function() {
            this.get("controller.isMobile") && (this.get("controller.playingVine").send("reset"),
            this.set("player", void 0),
            this.rerender())
        }
        .observes("controller.postIdStr"),
        transitionRelatedVideos: function() {
            if (this.get("controller.triggerRelatedVideosTransition")) {
                this.send("pause"),
                this.get("controller.playingVine").send("reset"),
                this.set("isReady", !1),
                this.get("controller").setProperties({
                    triggerRelatedVideosTransition: !1,
                    transitioningRelatedVideos: !0
                });
                var e = 500
                  , a = this.$()
                  , n = this.$(".related-videos")
                  , r = this.$(".selected-container");
                a.addClass("activated"),
                n.addClass("fade-posts"),
                t["default"].run.later(this, function() {
                    n.addClass("activated"),
                    r.css({
                        left: "198px"
                    })
                }, e),
                t["default"].run.later(this, function() {
                    r.addClass("activated"),
                    r.css({
                        top: 0,
                        left: 0
                    })
                }, e + 100),
                t["default"].run.later(this, function() {
                    n.addClass("fade-out"),
                    a.removeClass("activated")
                }, 2 * e),
                t["default"].run.later(this, function() {
                    this.set("isReady", !0),
                    a.removeClass("activated"),
                    n.removeClass("activated").removeClass("fade-out").removeClass("fade-posts"),
                    r.removeClass("activated"),
                    this.set("controller.transitioningRelatedVideos", !1),
                    this.get("controller").send("resetRelatedVideosState")
                }, 3 * e)
            }
        }
        .observes("controller.triggerRelatedVideosTransition"),
        actions: {
            toggleComments: function() {
                this.get("controller").send("showRelatedVideos"),
                this._doToggleComments()
            },
            scrollComments: function() {
                this.$(".comments-container").scrollTop(1e3)
            },
            submitComment: function() {
                this.get("controller.commentsExpanded") || this.send("toggleComments"),
                this.get("controller").send("comment")
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/views/playing-vine", ["exports", "ember"], function(e, t) {
    var a = 8
      , n = 1e3
      , r = 16
      , i = t["default"].View.extend({
        classNames: ["vine-player"],
        currentTime: -1,
        lastLikeBadgeDegrees: void 0,
        didInsertElement: function() {
            this._createPlayerElement();
            var e = $.throttle(500, function() {
                this.get("controller").send("checkViewport")
            }
            .bind(this));
            $(window).bind("scroll", e),
            this.set("scrollBinding", e),
            this.get("controller.isMobile") && this.$().hide()
        },
        willDestroyElement: function() {
            this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")),
            this.get("healthChecker") && window.clearInterval(this.get("healthChecker")),
            this.get("controller").set("loopSuccessChecker", null )
        },
        doubleClick: function(e) {
            var i, d = $('<div class="like"><div class="icon-heart_doubletap"></div></div>'), c = this.$(".vine-video-container"), s = c.offset(), o = 44, l = e.pageX - s.left - o, h = e.pageY - s.top - o;
            i = this.get("lastLikeBadgeDegrees") ? -this.get("lastLikeBadgeDegrees") : Math.random() > .5 ? a : -a,
            d.css({
                top: h,
                left: l,
                transform: "rotate(" + i + "deg)"
            }),
            c.append(d),
            t["default"].run.later(this, function() {
                d.css("transform", "rotate(0deg) translateY(-90px)")
            }, r),
            this.set("lastLikeBadgeDegrees", i);
            var u = !1
              , p = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})")
              , m = p.exec(window.navigator.userAgent);
            m && (u = parseFloat(m[1]) < 10),
            u && t["default"].run.later(this, function() {
                d.fadeOut(n)
            }, 180),
            t["default"].run.later(this, function() {
                d.remove()
            }, n);
            var v = this.get("controller.playing.post");
            v && !v.get("liked") && v.send("like")
        },
        _createPlayerElement: function(e) {
            var t = window.navigator.userAgent
              , a = /android/i.test(t)
              , n = /ipad/i.test(t)
              , r = n || /iphone|ipod/i.test(t)
              , i = /MSIE [7-9]/i.test(t)
              , d = this.$("video")
              , c = this.get("controller.defaultVideoSize")
              , s = !r && !a;
            this.get("controller").set("displayAudio", s);
            var o = {
                defaultVideoWidth: c,
                defaultVideoHeight: c,
                features: [],
                plugins: ["flash"],
                pluginPath: "/assets/swf/",
                enablePluginSmoothing: !0,
                flashName: "flashmediaelement.2.swf",
                startVolume: 1,
                success: function(t) {
                    this.get("controller.isMobile") || this._initHealthChecker(t),
                    t.needsPhantomFrameFix = "native" !== t.pluginType || i,
                    this.get("controller").send("playerInitialized", t, this.$()),
                    e && this.get("controller").send("play")
                }
                .bind(this),
                error: function() {
                    this.get("controller").send("gaq", ["_trackEvent", "Post", "video error"]),
                    /firefox/i.test(window.navigator.userAgent) && !window.navigator.mimeTypes["application/x-shockwave-flash"] && this.get("controller").send("showModal", "flash-error")
                }
                .bind(this)
            };
            window.MediaElement(d[0], o)
        },
        _initHealthChecker: function(e) {
            this.get("healthChecker") && window.clearInterval(this.get("healthChecker"));
            var t = window.setInterval(function() {
                var t = !this.get("controller.loading");
                if (t && !e.paused) {
                    if (e.currentTime === this.get("currentTime"))
                        return void this.send("rebootPlayer");
                    this.set("currentTime", e.currentTime)
                }
            }
            .bind(this), 1e3);
            this.set("healthChecker", t),
            this.get("controller.loopSuccessChecker") || this.get("controller").set("loopSuccessChecker", this._loopSuccessChecker.bind(this))
        },
        _loopSuccessChecker: function() {
            var e = this.get("controller.player");
            e.currentTime >= Math.floor(e.duration) && this.send("rebootPlayer"),
            this.set("currentTime", -1)
        },
        postChanged: function() {
            this.set("currentTime", -1),
            this.set("controller.loading", !0);
            var e = this.$(".like");
            e && e.remove(),
            this.set("lastLikeBadgeDegrees", void 0)
        }
        .observes("controller.playing.post.postIdStr"),
        actions: {
            rebootPlayer: function() {
                var e = '<video preload="auto"><source src="" type="video/mp4"></video>';
                this.$(".vine-video-container").html(e),
                this.get("controller").send("gaq", ["_trackEvent", "Post", "video reboot"]),
                this.set("controller.forceFallback", !0),
                this._createPlayerElement(!0)
            }
        }
    });
    e["default"] = i
}),
define("vine-ember/views/playlists/grid-list", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function(e, t, a) {
    var n = a["default"].extend({
        templateName: "playlists/grid-list",
        classNames: ["grid", "post"],
        timeline: t["default"].computed.alias("controller.controllers.playlists.model"),
        didInsertElement: function() {
            this.get("controller.isMobile") && this.$(".video-container").height(this.$(".video-container").width())
        },
        mouseEnter: function() {
            this.get("controller").send("bindFullscreenListener")
        },
        mouseLeave: function() {
            this.get("controller").send("unbindFullscreenListener")
        },
        click: function(e) {
            if (this.get("controller.isMobile"))
                return !0;
            var t = $(e.target);
            return t.is("a, button") || 0 !== t.closest("a, button").length || this.get("controller").send("routeToList"),
            !1
        }
    });
    e["default"] = n
}),
define("vine-ember/views/playlists", ["exports", "vine-ember/views/timeline"], function(e, t) {
    var a = t["default"].extend();
    e["default"] = a
}),
define("vine-ember/views/post-actions-menu", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        templateName: "post-actions-menu",
        classNames: "more-actions",
        click: function(e) {
            return this.get("controller.onShare") ? (($(e.target).is("li") || $(e.target).closest("li").length) && this.get("controller").send(this.get("controller.onShare")),
            !0) : void 0
        },
        mouseEnter: function() {
            window.clearTimeout(this.get("timeout")),
            this.$(".menu").show()
        },
        mouseLeave: function() {
            this.set("timeout", window.setTimeout(function() {
                this.$(".menu").hide()
            }, 100))
        },
        touchStart: function(e) {
            e.target === this.$(".icon")[0] && this.$(".menu").toggle()
        },
        shouldShowPostLink: function() {
            return !this.get("controller.isPermalink") || this.get("controller.parentController.isModal")
        }
        .property("controller.isPermalink", "controller.parentController.isModal")
    });
    e["default"] = a
}),
define("vine-ember/views/post-mobile", ["exports", "vine-ember/views/post"], function(e, t) {
    var a = t["default"].extend({
        templateName: "post-mobile",
        classNames: ["post-mobile"],
        classNameBindings: ["controller.isPermalink"],
        attributionTimeoutDuration: 3500,
        didInsertElement: function() {
            this._super(),
            Ember.run.scheduleOnce("afterRender", this, function() {
                this.send("resizeVideo")
            });
            var e = function() {
                this.send("resizeVideo")
            }
            .bind(this);
            $(window).resize(e),
            this.set("resizeBinding", e),
            this.get("controller.isPermalink") && this.get("controller.playingVine").set("initMobileEvent", function(e) {
                this.send("bindSharePanelEvent")
            }
            .bind(this)),
            this.get("controller.playingVine").send("checkViewport")
        },
        _getVideoObject: function() {
            return {
                view: this,
                post: this.get("controller"),
                el: this.$(".video-container"),
                controlEls: this.$(".play, .thumbnail"),
                playerEls: this.$(".vine-player"),
                video: this.$("video")
            }
        },
        willDestroyElement: function() {
            $(window).unbind("resize", this.get("resizeBinding"))
        },
        postChanged: function() {
            this.get("controller.playingVine").send("reset"),
            this.set("player", void 0),
            this.rerender()
        }
        .observes("controller.postIdStr"),
        attributionVisibilityChanged: function() {
            this.get("controller.showAttribution") && (this.get("controller.isPermalink") && this.get("controller").set("forceHideMobileInterstitial", !0),
            this.get("attributionTimeout") && Ember.run.cancel(this.get("attributionTimeout")),
            this.set("attributionTimeout", Ember.run.later(this, function() {
                this.get("controller").send("hideAttribution")
            }, this.get("attributionTimeoutDuration"))))
        }
        .observes("controller.showAttribution"),
        actions: {
            resizeVideo: function() {
                var e = this.$(".video-container");
                if (e.is(":visible")) {
                    var t = this.$(".video-container").width();
                    this.set("controller.videoHeight", t)
                } else
                    this.set("controller.videoHeight", void 0)
            },
            bindSharePanelEvent: function(e) {
                e = e || this.get("player"),
                $(e).bind("webkitendfullscreen", function() {
                    this.send("expandSharePanel")
                }
                .bind(this))
            },
            expandSharePanel: function() {
                this.$(".share-panel").show(),
                this.$(".share-panel").addClass("activated"),
                this.send("pause"),
                this.set("sharePanelExpanded", !0)
            },
            collapseSharePanel: function() {
                this.$(".share-panel").removeClass("activated"),
                this.set("sharePanelExpanded", !1)
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/views/post", ["exports", "ember", "vine-ember/mixins/set-comments-to-expanded-height"], function(e, t, a) {
    var n = t["default"].View.extend(a["default"], {
        templateName: "post",
        classNames: ["post"],
        didInsertElement: function() {
            this.get("controller").send("videoRendered", this._getVideoObject()),
            this.$(".similar-vines") && this.get("controller").send("trackSimilarVinesEvent", "impression", {
                label: this.get("controller.isMobile") ? "post mobile" : "post",
                nonInteraction: !0
            })
        },
        commentsChanged: function() {
            this.get("isReady") && this.get("controller.comments.dirty") && t["default"].run.scheduleOnce("afterRender", this, function() {
                this.get("controller.commentsExpanded") ? this.send("scrollComments") : this.send("toggleComments"),
                this.set("controller.comments.dirty", !1)
            }
            .bind(this))
        }
        .observes("controller.comments.dirty"),
        collapseComments: function() {
            this.get("controller.commentsExpanded") && this.send("toggleComments")
        }
        .observes("controller.postIdStr"),
        commentsToggled: function() {
            this.get("controller.initWithComments") && t["default"].run.scheduleOnce("afterRender", this, function() {
                this.$("form.comment input").focus(),
                this.send("toggleComments", {
                    dont: !0
                })
            })
        }
        .observes("controller.initWithComments").on("init"),
        _getVideoObject: function() {
            return {
                view: this,
                post: this.get("controller"),
                el: this.$(".video-container")
            }
        },
        _doToggleComments: function() {
            this.$setCommentsToExpandedHeight(),
            this.$(".action.comments").toggleClass("active"),
            this.send("scrollComments"),
            this.get("controller").toggleProperty("commentsExpanded")
        },
        actions: {
            toggleComments: function() {
                this._doToggleComments()
            },
            toggleShare: function() {
                this.$(".share-overlay").fadeToggle(),
                this.$(".action.share").toggleClass("active")
            },
            play: function() {
                var e = null ;
                if (this.get("controller.playingVine.playing") && (e = this.get("controller.playingVine.playing.el").closest(".post").attr("id")),
                this.$(".video-container")) {
                    var t = this.$(".video-container").closest(".post").attr("id");
                    e !== t && this.get("controller.playingVine").send("play", this._getVideoObject())
                }
            },
            pause: function() {
                var e = null ;
                this.get("controller.playingVine.playing") && (e = this.get("controller.playingVine.playing.el").closest(".post").attr("id"));
                var t = this.$(".video-container").closest(".post").attr("id");
                e === t && this.get("controller.playingVine").send("pause", this._getVideoObject())
            },
            submitComment: function() {
                this.get("controller.commentsExpanded") || this.send("toggleComments"),
                this.get("controller").send("comment")
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/views/promo/camera", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        didInsertElement: function() {
            this._bindHeros();
            var e = $.throttle(10, function() {
                var e = $(window).scrollTop();
                e > this.$("#promo-header").height() ? (this.get("controller").send("stopVideo"),
                $("#outer-wrapper").addClass("show-header")) : $("#outer-wrapper").removeClass("show-header")
            }
            .bind(this));
            $(window).scroll(e),
            this.set("scrollBinding", e);
            var t = $.throttle(10, function() {
                this.send("resizeHeader")
            }
            .bind(this));
            t(),
            $(window).bind("resize", t),
            this.set("resizeBinding", t)
        },
        willDestroyElement: function() {
            this.get("fadeInterval") && window.clearInterval(this.get("fadeInterval")),
            this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")),
            this.get("resizeBinding") && $(window).unbind("resize", this.get("resizeBinding")),
            $("#outer-wrapper").removeClass("show-header")
        },
        _bindHeros: function() {
            this.get("fadeInterval") && window.clearInterval(this.get("fadeInterval"));
            var e, t = this.$(".hero"), a = 0;
            t.hide(),
            t.first().show();
            var n = window.setInterval(function() {
                e = (a + 1) % t.length,
                t.eq(e).css({
                    zIndex: 1
                }).show(),
                t.eq(a).css({
                    zIndex: 2
                }).fadeOut(1e3),
                a = e
            }, 2e3);
            this.setProperties("fadeInterval", n)
        },
        _bindPlayer: function() {
            function e(e) {
                var r = JSON.parse(e.data);
                switch (r.event) {
                case "ready":
                    if (t.data("bound"))
                        return;
                    t[0].contentWindow.postMessage({
                        method: "addEventListener",
                        value: "finish"
                    }, a),
                    t.attr({
                        "data-bound": !0
                    });
                    break;
                case "finish":
                    n.send("stopVideo")
                }
            }
            window.addEventListener ? window.addEventListener("message", e, !1) : window.attachEvent("onmessage", e, !1);
            var t = this.$(".iframe-container iframe")
              , a = window.location.protocol + t.attr("src").split("?")[0]
              , n = this.get("controller")
        },
        videoPlayChanged: function() {
            this.send("resizeHeader", !0),
            this.get("controller.isPlaying") ? t["default"].run.scheduleOnce("afterRender", function() {
                this._bindPlayer()
            }
            .bind(this)) : t["default"].run.scheduleOnce("afterRender", function() {
                this._bindHeros()
            }
            .bind(this))
        }
        .observes("controller.isPlaying"),
        actions: {
            playVideo: function() {
                var e = this.get("controller");
                e.send("scrollToTop"),
                this.$(".header-content").fadeOut(500, function() {
                    e.send("playVideo")
                })
            },
            resizeHeader: function(e) {
                var t = this.$("#promo-header")
                  , a = $("#outer-wrapper");
                if (t && a) {
                    var n = a.width();
                    if (!this.get("controller.isPlaying") || n > 1280)
                        return t.removeAttr("style"),
                        void a.removeAttr("style");
                    var r = Math.floor(n / 2) + "px"
                      , i = {
                        height: r
                    }
                      , d = {
                        "padding-top": r
                    };
                    e && n > 605 && (t.animate(i, 500),
                    a.animate(d, 500)),
                    t.css(i),
                    a.css(d)
                }
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/views/promo/music", ["exports", "vine-ember/views/promo/camera"], function(e, t) {
    var a = t["default"].extend({
        lastTop: 0,
        currentSection: 0,
        isAnimating: !1,
        isDown: !1,
        isUp: !1,
        animationSpeed: 500,
        quietPeriod: 750,
        lastTouchY: null ,
        isLandscape: !1,
        didInsertElement: function() {
            return this.set("lastTop", $(window).scrollTop()),
            this.get("controller.isMobile") ? (this.set("quietPeriod", 100),
            void this._bindMobileEvents()) : void this._bindDesktopEvents()
        },
        _bindMobileEvents: function() {
            var e = $.throttle(10, function(e) {
                this.get("isAnimating") || (this.set("currentSection", Math.floor($(window).scrollTop() / $(window).height())),
                0 === this.get("currentSection") && this.$(".mobile-background.blur").height(0))
            }
            .bind(this));
            $(window).bind("scroll", e),
            this.set("scrollBinding", e);
            var t = function() {
                this.set("isLandscape", $(window).width() > $(window).height()),
                this.get("isLandscape") || this.$("article, #promo-header").height(window.innerHeight)
            }
            .bind(this);
            t(),
            $(window).bind("resize", t),
            this.set("resizeBinding", t)
        },
        _bindDesktopEvents: function() {
            $("body").bind("mousewheel", function(e) {
                this.get("isAnimating") && (e.preventDefault(),
                e.stopPropagation())
            }
            .bind(this));
            var e = $.throttle(50, this._onScroll.bind(this));
            $(window).bind("scroll", e),
            this.set("scrollBinding", e);
            var t = $.throttle(10, function() {
                this.set("currentSection", Math.floor($(window).scrollTop() / $(window).height())),
                this.send("goToSection", this.get("currentSection")),
                this.send("centerVideo")
            }
            .bind(this));
            t(),
            $(window).bind("resize", t),
            this.set("resizeBinding", t),
            this.$().attr({
                tabindex: 1
            }),
            this.$().focus()
        },
        _onScroll: function(e) {
            var t = $(window).scrollTop();
            this.setProperties({
                isDown: t > this.get("lastTop"),
                isUp: t < this.get("lastTop"),
                lastTop: t
            }),
            this.get("isAnimating") || this.send("handleScroll")
        },
        keyDown: function(e) {
            switch (e.which) {
            case 38:
                e.preventDefault(),
                this.send("navUp");
                break;
            case 40:
                e.preventDefault(),
                this.send("navDown");
                break;
            default:
                return
            }
        },
        touchStart: function(e) {
            if (!this.get("isLandscape") && !this.get("isAnimating")) {
                var t = e.originalEvent;
                return t.targetTouches.length > 1 ? void this.set("lastTouchY", null ) : void this.set("lastTouchY", t.touches[0].pageY)
            }
        },
        touchEnd: function(e) {
            this.get("isLandscape") || this.set("lastTouchY", null )
        },
        touchMove: function(e) {
            if (!this.get("isLandscape") && (e.preventDefault(),
            this.get("lastTouchY"))) {
                if (this.get("isAnimating"))
                    return void this.set("lastTouchY", null );
                var t = e.originalEvent.touches[0].pageY - this.get("lastTouchY");
                t > 20 ? (this.send("navUp"),
                this.set("lastTouchY", null )) : -20 > t && (this.send("navDown"),
                this.set("lastTouchY", null ))
            }
        },
        willDestroyElement: function() {
            this._super(),
            $("#outer-wrapper").removeClass("hide-header"),
            $("body").unbind("mousewheel")
        },
        actions: {
            navUp: function() {
                this.setProperties({
                    isDown: !1,
                    isUp: !0
                }),
                this.send("goToSection", this.get("currentSection") - 1)
            },
            navDown: function() {
                this.setProperties({
                    isDown: !0,
                    isUp: !1
                }),
                this.send("goToSection", this.get("currentSection") + 1)
            },
            syncBackgroundVideo: function(e) {
                if (!this.get("controller.isMobile")) {
                    var t = this.$(".video-container.blur video")[0]
                      , a = this.$(".video-container.main video")[0];
                    e ? (a.play(),
                    setTimeout(function() {
                        t.pause()
                    }, this.get("animationSpeed"))) : (t.currentTime = a.currentTime,
                    t.play(),
                    setTimeout(function() {
                        a.pause()
                    }, this.get("animationSpeed")))
                }
            },
            handleScroll: function() {
                var e;
                if (this.get("isDown"))
                    e = this.get("currentSection") + 1;
                else {
                    if (!this.get("isUp"))
                        return;
                    e = this.get("currentSection") - 1
                }
                this.send("goToSection", e)
            },
            goToSection: function(e) {
                if (!this.get("isAnimating")) {
                    var t = this.$("article");
                    if (!(e >= t.length || 0 > e)) {
                        this.send("handlePhoneState", e),
                        this.send("handleBackgroundState", e);
                        var a = this.$(".vine-iframe-container.playing");
                        a.length && (a.removeClass("playing"),
                        a.find("video")[0].pause()),
                        e === t.length - 1 ? this.$(".nav-down.footer").hide() : this.$(".nav-down.footer").show();
                        var n = this.$("article").eq(e).offset().top;
                        this.set("isAnimating", !0),
                        $("html, body").animate({
                            scrollTop: n + "px"
                        }, this.get("animationSpeed"), function() {
                            e > 0 ? $("#outer-wrapper").addClass("show-header") : $("#outer-wrapper").removeClass("show-header"),
                            this.set("currentSection", e),
                            setTimeout(function() {
                                this.set("isAnimating", !1)
                            }
                            .bind(this), this.get("quietPeriod"))
                        }
                        .bind(this))
                    }
                }
            },
            handlePhoneState: function(e) {
                if (!this.get("controller.isMobile")) {
                    var t, a = this.$("article").index(this.$(".tutorial:first")), n = this.$("article").index(this.$(".tutorial:last"));
                    if (t = this.get("isUp") ? e >= a && n > e : e > a && n >= e,
                    t ? this.$("#promo-content").addClass("phone-fixed") : this.$("#promo-content").removeClass("phone-fixed"),
                    e >= a && n >= e) {
                        var r;
                        r = this.get("isUp") && e === n ? this.$(".anchor .screenshot") : this.$(".sticky .screenshot").eq(e - a),
                        r.find("video")[0].currentTime = 0,
                        r.find("video")[0].play();
                        var i = this.get("isDown") ? e - a : e - a + 1
                          , d = this.$(".sticky .screenshot").eq(i);
                        d.length && d.animate({
                            height: this.get("isDown") ? "100vh" : 0
                        }, this.get("animationSpeed"))
                    }
                }
            },
            handleBackgroundState: function(e) {
                var t;
                t = this.get("controller.isMobile") ? this.$(".mobile-background.blur") : this.$(".video-container.blur"),
                0 === e ? (this.send("syncBackgroundVideo", !0),
                t.animate({
                    height: 0
                }, this.get("animationSpeed"))) : (0 === this.get("currentSection") || 0 === t.height()) && (this.send("syncBackgroundVideo"),
                t.animate({
                    height: "100vh"
                }, this.get("animationSpeed")))
            },
            centerVideo: function() {
                var e = $(window).height()
                  , t = $(window).width()
                  , a = 1280 / 680
                  , n = e * a
                  , r = e;
                t > n && (n = t,
                r = t / a);
                var i = this.$("#promo-header video");
                if (n > t) {
                    var d = (t - n) / 2;
                    i.css({
                        marginTop: 0,
                        marginLeft: d + "px"
                    }),
                    this.$("#promo-header .video-container").css({
                        backgroundPosition: d + "px 0"
                    })
                }
                if (r > e) {
                    var c = (e - r) / 2;
                    i.css({
                        marginTop: c + "px",
                        marginLeft: 0
                    }),
                    this.$("#promo-header .video-container").css({
                        backgroundPosition: "0 " + c + "px"
                    })
                }
            },
            playMobileVine: function(e) {
                var t = this.$(".vine-iframe-container." + e);
                if (t.length) {
                    var a = t.find("video")[0];
                    a.currentTime = 0,
                    a.play(),
                    t.addClass("playing")
                }
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/views/related-videos/playing-vine", ["exports", "vine-ember/views/playing-vine"], function(e, t) {
    var a = t["default"].extend({
        templateName: "playing-vine",
        didInsertElement: function() {
            this.get("controller.isMobile") || this._createPlayerElement()
        }
    });
    e["default"] = a
}),
define("vine-ember/views/related-videos/post", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        templateName: "related-videos/post",
        classNames: "related-post",
        isMobile: t["default"].computed.alias("controller.isMobile"),
        didInsertElement: function() {
            return this.$("a").css("color", this.get("userColor")),
            this.$(".avatar-new img").css("border", "2px solid " + this.get("userColor")),
            this.get("controller.canShow") ? void this._transitionPost() : void this.set("useCanShowBinding", !0)
        },
        userColor: function() {
            var e = this.get("context.backgroundColor")
              , t = "#333333";
            return e && e !== t ? e : "#00bf8f"
        }
        .property("context.backgroundColor"),
        _transitionPost: function() {
            var e = this.$()
              , a = 70
              , n = this.get("context.index") * a;
            $("<img>").attr("src", this.get("context.secureThumbnailUrl")).load(function() {
                t["default"].run.later(function() {
                    e.addClass("pin-left")
                }, n)
            })
        },
        canShowChanged: function() {
            this.get("useCanShowBinding") && this.get("controller.canShow") && this._transitionPost()
        }
        .observes("controller.canShow"),
        click: function(e) {
            if ($(e.target).hasClass("vine-audio"))
                return !0;
            if (!this.get("isMobile")) {
                var a = this.$().offset()
                  , n = this.$().closest(".related-videos").offset()
                  , r = a.top - n.top
                  , i = a.left - n.left;
                t["default"].$(".selected-container").css({
                    top: r + "px",
                    left: i + "px"
                })
            }
            t["default"].$(".share-panel").hide();
            var d = this.get("context.index");
            this.get("controller").send("select", d)
        }
    });
    e["default"] = a
}),
define("vine-ember/views/search/modules/base", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        type: "index",
        click: function(e) {
            var t = "a, button, .module-pagination";
            $(e.target).is(t) || 0 !== $(e.target).closest(t).length || this.get("controller").transitionToRoute("search." + this.get("type"), this.get("controller.query"))
        }
    });
    e["default"] = a
}),
define("vine-ember/views/search/modules/tags", ["exports", "vine-ember/views/search/modules/base"], function(e, t) {
    var a = t["default"].extend({
        type: "tags"
    });
    e["default"] = a
}),
define("vine-ember/views/search/modules/users", ["exports", "vine-ember/views/search/modules/base"], function(e, t) {
    var a = t["default"].extend({
        type: "users"
    });
    e["default"] = a
}),
define("vine-ember/views/search/modules/venues", ["exports", "vine-ember/views/search/modules/base"], function(e, t) {
    var a = t["default"].extend({
        type: "venues"
    });
    e["default"] = a
}),
define("vine-ember/views/search/posts", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        layoutName: "search/posts"
    });
    e["default"] = a
}),
define("vine-ember/views/search-input", ["exports", "ember", "vine-ember/components/my-input"], function(e, t, a) {
    var n = a["default"].extend({
        didInsertElement: function() {
            this._super(),
            this.get("autofocus") && this.$().focus()
        },
        valueChanged: $.debounce(200, function() {
            this.sendAction("queryChanged")
        }).observes("value"),
        focusIn: function() {
            var e = this.$();
            e[0].setSelectionRange(0, 9999),
            e.on("mouseup", function(t) {
                t.preventDefault(),
                e.off("mouseup")
            })
        },
        focusOut: function() {
            t["default"].$(".global-search").removeClass("expanded")
        }
    });
    e["default"] = n
}),
define("vine-ember/views/splash/playing-vine", ["exports", "vine-ember/views/playing-vine"], function(e, t) {
    var a = t["default"].extend({
        templateName: "playing-vine",
        didInsertElement: function() {
            this._createPlayerElement()
        }
    });
    e["default"] = a
}),
define("vine-ember/views/splash", ["exports", "ember", "vine-ember/mixins/continuous-play-view"], function(e, t, a) {
    var n = t["default"].View.extend(a["default"], {
        templateName: "splash",
        classNames: "splash",
        post: t["default"].computed.alias("controller.currentPost"),
        didInsertElement: function() {
            this.get("controller").send("bindFullscreenListener"),
            this.send("playCurrentVine");
            var e, t = window.navigator.userAgent;
            if (t.match(/iPhone/i) || t.match(/iPad/i) || t.match(/iPod/i) ? e = "apple" : t.match(/Android/i) || t.match(/KF/) ? e = "android" : t.match(/Windows Phone/i) && (e = "windows"),
            e && (this.$(".download-buttons a").hide(),
            this.$('a[data-device="' + e + '"]').show()),
            !this.get("controller").get("isMobile")) {
                var a = $.throttle(250, function() {
                    this.send("resize")
                }
                .bind(this));
                $(window).resize(a),
                $(window).trigger("resize"),
                this.get("controller").send("forceMute")
            }
        },
        willDestroyElement: function() {
            $(window).unbind("resize"),
            this.get("controller").send("restoreMute")
        },
        actions: {
            resize: function() {
                var e = this.$(".vine-video-container > video, .vine-video-container > div, .thumbnail")
                  , t = this.$(".video-container, .video-poster");
                if (e) {
                    var a = this.$("#splash-container").width()
                      , n = this.$("#splash-container").height()
                      , r = Math.max(a, n);
                    if (e.height(r),
                    e.width(r),
                    this.get("controller.playingVine.player") && this.get("controller.playingVine.player").setVideoSize(r, r),
                    r > a) {
                        var i = Math.floor((a - r) / 2);
                        t.css("background-position", i + "px 0"),
                        e.css("left", i + "px")
                    }
                    if (r > n) {
                        var d = Math.floor((n - r) / 2);
                        t.css("top", "0 " + d + "px"),
                        e.css("top", d + "px")
                    }
                }
            }
        }
    });
    e["default"] = n
}),
define("vine-ember/views/tag", ["exports", "vine-ember/views/timeline"], function(e, t) {
    var a = t["default"].extend();
    e["default"] = a
}),
define("vine-ember/views/timeline", ["exports", "ember"], function(e, t) {
    var a = t["default"].View.extend({
        postPaginationThreshold: 3,
        didInsertElement: function() {
            this.send("setupTimeline"),
            !this.get("controller.isMobile") && this.get("controller.headerPost") && this.send("setupHeaderVideo")
        },
        willDestroyElement: function() {
            this.send("cleanupTimeline")
        },
        modeChanged: function() {
            this.send("scrollToCurrentPost")
        }
        .observes("controller.mode"),
        modelChanged: function() {
            this.send("cleanupTimeline"),
            t["default"].run.scheduleOnce("afterRender", this, function() {
                this.send("setupTimeline")
            })
        }
        .observes("controller.model"),
        headerPostChanged: function() {
            this.get("controller.headerPost") && t["default"].run.scheduleOnce("afterRender", this, function() {
                this.get("controller.headerPlayingVine").send("play", this._getVideoObject())
            })
        }
        .observes("controller.headerPost.postIdStr"),
        refreshPaginationThreshold: function() {
            this.get("controller.isMobile") || t["default"].run.scheduleOnce("afterRender", this, function() {
                var e = this.$(".timeline-content .post");
                if (e) {
                    var t = $("#outer-wrapper").height() - $(window).height();
                    e.length > this.get("postPaginationThreshold") && (t = e.eq(e.length - this.get("postPaginationThreshold")).offset().top),
                    this.set("paginationThreshold", t)
                }
            })
        }
        .observes("controller.model.length", "controller.mode"),
        paginationChanged: function() {
            this.get("controller.pagination.nextPage") || this._unbindPaginationScroll()
        }
        .observes("controller.pagination.nextPage"),
        _bindScroll: function() {
            var e;
            try {
                e = this.$(".timeline-header").height() + this.$(".timeline-toggles").height() - $("header").height()
            } catch (t) {}
            if (e) {
                var a, n = $(window), r = this.$(), i = $("#outer-wrapper"), d = $.throttle(50, function() {
                    a = n.scrollTop() >= e,
                    r.toggleClass("fixed-modules", a),
                    i.toggleClass("colorize-header", a)
                });
                n.bind("scroll", d),
                this.set("scrollBinding", d)
            }
        },
        _unbindScroll: function() {
            this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding"))
        },
        _bindPaginationScroll: function() {
            this.refreshPaginationThreshold();
            var e = $.throttle(100, function() {
                $(window).scrollTop() + $(window).height() > this.get("paginationThreshold") && this.get("controller").send("nextPage")
            }
            .bind(this));
            $(window).bind("scroll", e),
            this.set("paginationScrollBinding", e)
        },
        _unbindPaginationScroll: function() {
            this.get("paginationScrollBinding") && $(window).unbind("scroll", this.get("paginationScrollBinding"))
        },
        _getVideoObject: function() {
            return {
                view: this,
                post: this.get("controller.headerPost"),
                el: this.get("videoContainer")
            }
        },
        _bindResize: function() {
            var e = this.get("videoContainer")
              , t = function() {
                var t = Math.max(e.height(), e.width())
                  , a = e.find("video");
                a.width(t),
                a.height(t),
                this._alignHeaderVine()
            }
            .bind(this);
            $(window).bind("resize", t),
            this.set("resizeBinding", t)
        },
        _alignHeaderVine: function() {
            var e = this.get("videoContainer")
              , t = e.find("video")
              , a = (t.height() - e.height()) / 2;
            t.css({
                top: -1 * a + "px"
            })
        },
        actions: {
            scrollToCurrentPost: function() {
                !this.get("controller.isTvMode") && this.$() && t["default"].run.scheduleOnce("afterRender", this, function() {
                    var e = this.get("controller.videoIndex")
                      , t = this.$(".ember-view.post").get(e)
                      , a = 20;
                    t && $(window).scrollTop($(t).offset().top - $("header").height() - a)
                })
            },
            reset: function() {
                this.$() && this.$().closest(".timeline-content").removeClass("is-fullscreen"),
                $("#outer-wrapper").removeClass("colorize-header"),
                this.get("controller").send("setIsTimeline", !1)
            },
            setupTimeline: function() {
                this.get("controller").send("setIsTimeline", !0),
                this.get("controller.isMobile") || (this._bindScroll(),
                this._bindPaginationScroll()),
                $(window).scroll()
            },
            setupHeaderVideo: function() {
                this.set("videoContainer", this.$(".timeline-header .video-container")),
                this.get("controller.headerPlayingVine").setProperties({
                    forceLoad: !0,
                    forceMute: !0
                }),
                this.get("controller.headerPlayingVine").send("play", this._getVideoObject()),
                this._bindResize(),
                this._alignHeaderVine()
            },
            cleanupTimeline: function() {
                this.send("reset"),
                this._unbindScroll(),
                this._unbindPaginationScroll(),
                this.get("resizeBinding") && $(window).unbind("resize", this.get("resizeBinding"))
            }
        }
    });
    e["default"] = a
}),
define("vine-ember/views/trends", ["exports", "vine-ember/views/timeline"], function(e, t) {
    var a = t["default"].extend();
    e["default"] = a
}),
define("vine-ember/views/vm-post", ["exports", "ember", "vine-ember/views/post"], function(e, t, a) {
    var n = a["default"].extend({
        classNames: ["permalink-post-wrapper"],
        templateName: "vm-post",
        didInsertElement: function() {
            this._super(),
            $("#outer-wrapper.vm-post .permalink-post-wrapper").css("background", this.get("controller.profileColor")),
            this.get("controller.isMobile") && $("#outer-wrapper.vm-post").css("background", this.get("controller.profileColor")),
            this._setAppBannerColor();
            var e = this.get("controller.playingVine");
            if (e.set("forceUnmute", !0),
            this.get("controller.isMobile")) {
                var t = function() {
                    this.$(".video-container").height(this.$(".video-container").width())
                }
                .bind(this);
                $(window).bind("resize", t).resize(),
                this.set("resizeBinding", t),
                this.get("controller.playingVine").send("checkViewport")
            }
            this.get("controller.expired") || this._super()
        },
        _getVideoObject: function() {
            return {
                view: this,
                post: this.get("controller"),
                el: this.$(".video-container"),
                controlEls: this.$(".play, .thumbnail"),
                playerEls: this.$(".vine-player"),
                video: this.$("video")
            }
        },
        willDestroyElement: function() {
            $("#outer-wrapper.vm-post").removeAttr("style"),
            t["default"].$(".app-banner").css("background", "#00bf8f"),
            this.get("resizeBinding") && $(window).unbind("resize", this.get("resizeBinding"))
        },
        _setAppBannerColor: function() {
            this.get("controller.confirmation") ? t["default"].$(".app-banner").css("background", "black") : t["default"].$(".app-banner").css("background", this.get("controller.profileColor"))
        }
        .observes("controller.confirmation")
    });
    e["default"] = n
}),
define("vine-ember/config/environment", ["ember"], function(e) {
    var t = "vine-ember";
    try {
        var a = t + "/config/environment"
          , n = e["default"].$('meta[name="' + a + '"]').attr("content")
          , r = JSON.parse(unescape(n));
        return {
            "default": r
        }
    } catch (i) {
        throw new Error('Could not read config from meta tag with name "' + a + '".')
    }
}),
runningTests ? require("vine-ember/tests/test-helper") : require("vine-ember/app")["default"].create({
    name: "vine-ember",
    version: "2.0.0.9271ad10"
});
